Index: cz/vutbr/web/csskit/ElementUtil.java
===================================================================
--- cz/vutbr/web/csskit/ElementUtil.java	(revision 656)
+++ cz/vutbr/web/csskit/ElementUtil.java	(working copy)
@@ -89,6 +89,10 @@
         			return attributeValue.matches(".* " + value + " .*");
         		case DASHMATCH:
         			return attributeValue.matches("^" + value + "(-.*|$)");
+        		case CONTAINS:
+        			return attributeValue.matches(".*" + value + ".*");
+        		case STARTSWITH:
+        			return attributeValue.matches("^" + value + ".*");
         		default:
         			return true;
     		}
Index: cz/vutbr/web/css/Selector.java
===================================================================
--- cz/vutbr/web/css/Selector.java	(revision 656)
+++ cz/vutbr/web/css/Selector.java	(working copy)
@@ -42,6 +42,8 @@
     	EQUALS("="),
     	INCLUDES("~="),
     	DASHMATCH("|="),
+    	CONTAINS("*="),
+    	STARTSWITH("^="),
     	NO_OPERATOR("");
     	
     	private String value;
@@ -65,6 +67,9 @@
         LINK("link", false),
         VISITED("visited", false),
         FIRST_CHILD("first-child", false),
+        LAST_CHILD("last-child", false),
+        ONLY_CHILD("only-child", false),
+        NTH_CHILD("nth-child", false),
         LANG("lang", false),
         
         FIRST_LINE("first-line", true),
Index: cz/vutbr/web/csskit/SelectorImpl.java
===================================================================
--- cz/vutbr/web/csskit/SelectorImpl.java	(revision 656)
+++ cz/vutbr/web/csskit/SelectorImpl.java	(working copy)
@@ -3,6 +3,7 @@
 import java.util.HashMap;
 
 import org.w3c.dom.Element;
+import org.w3c.dom.Node;
 
 import cz.vutbr.web.css.CombinedSelector;
 import cz.vutbr.web.css.Selector;
@@ -308,6 +309,9 @@
             PSEUDO_DECLARATIONS.put("link", PseudoDeclaration.LINK);
             PSEUDO_DECLARATIONS.put("visited", PseudoDeclaration.VISITED);
             PSEUDO_DECLARATIONS.put("first-child", PseudoDeclaration.FIRST_CHILD);
+            PSEUDO_DECLARATIONS.put("last-child", PseudoDeclaration.LAST_CHILD);
+            PSEUDO_DECLARATIONS.put("only-child", PseudoDeclaration.ONLY_CHILD);
+            PSEUDO_DECLARATIONS.put("nth-child", PseudoDeclaration.NTH_CHILD);
             PSEUDO_DECLARATIONS.put("lang", PseudoDeclaration.LANG);
             PSEUDO_DECLARATIONS.put("first-letter", PseudoDeclaration.FIRST_LETTER);
             PSEUDO_DECLARATIONS.put("first-line", PseudoDeclaration.FIRST_LINE);
@@ -361,9 +365,54 @@
 		public boolean matches(Element e) {
 			
 			if(declaration != null) { //null declaration means some unknown or unimplemented pseudo
-			    if (declaration.isPseudoElement() || //match all pseudo elements and the LINK pseudo class for links
-			            (e.getTagName().equalsIgnoreCase("a") && declaration == PseudoDeclaration.LINK))
-			        return true;
+				switch (declaration) {
+					case FIRST_CHILD:
+					case LAST_CHILD:
+					case ONLY_CHILD:
+						boolean first = false;
+						boolean last = false;
+						if (declaration != PseudoDeclaration.LAST_CHILD) {
+							Node prev = e;
+							do {
+								prev = prev.getPreviousSibling();
+								if (prev == null)
+									first = true; break;
+							} while(prev.getNodeType() != Node.ELEMENT_NODE);
+						}
+						if (declaration != PseudoDeclaration.FIRST_CHILD) {
+							Node next = e;
+							do {
+								next = next.getNextSibling();
+								if (next == null)
+									last = true; break;
+							} while(next.getNodeType() != Node.ELEMENT_NODE);
+						}
+						switch (declaration) {
+							case FIRST_CHILD: return first;
+							case LAST_CHILD: return last;
+							case ONLY_CHILD: return first && last;
+						}
+					case NTH_CHILD:
+						try {
+							int n = Integer.parseInt(value);
+							int count = 0;
+							Node prev = e;
+							do {
+								prev = prev.getPreviousSibling();
+								if (prev == null)
+									break;
+								if (prev.getNodeType() == Node.ELEMENT_NODE)
+									count++;
+							} while(count < n);
+							return (count == n-1);
+						} catch (NumberFormatException ex) {
+							return false;
+						}
+					default:
+						if (declaration.isPseudoElement() || //match all pseudo elements and the LINK pseudo class for links
+								(e.getTagName().equalsIgnoreCase("a") && declaration == PseudoDeclaration.LINK))
+							return true;
+				}
 			}
 			return false;
 		}
Index: cz/vutbr/web/csskit/antlr/CSSTreeParser.g
===================================================================
--- cz/vutbr/web/csskit/antlr/CSSTreeParser.g	(revision 656)
+++ cz/vutbr/web/csskit/antlr/CSSTreeParser.g	(working copy)
@@ -601,17 +601,21 @@
 	
 pseudo returns [Selector.PseudoPage pseudoPage]
 @init {
-		  logEnter("pseudo");
-		  String fname =null;
-		  String value = null;
+		logEnter("pseudo");
 }
-	: ^(PSEUDO 
-	   			(f=FUNCTION {fname=extractText(f);})? 
-			     i=IDENT {value=extractText(i);})
+	: ^(PSEUDO i=IDENT)
 		{
-			$pseudoPage = rf.createPseudoPage(value, fname);
+			$pseudoPage = rf.createPseudoPage(extractText(i), null);
 		}
-	;	
+	| ^(PSEUDO f=FUNCTION i=IDENT)
+		{
+			$pseudoPage = rf.createPseudoPage(extractText(i), extractText(f));
+		}
+	| ^(PSEUDO f=FUNCTION n=NUMBER)
+		{
+			$pseudoPage = rf.createPseudoPage(extractText(n), extractText(f));
+		}
+	;
 
 string returns [String s]
 	: st=STRING { $s= extractText(st);}
Index: cz/vutbr/web/csskit/antlr/CSS.g
===================================================================
--- cz/vutbr/web/csskit/antlr/CSS.g	(revision 656)
+++ cz/vutbr/web/csskit/antlr/CSS.g	(working copy)
@@ -939,13 +939,16 @@
 	;
 
 pseudo
-	: COLON COLON? (IDENT | FUNCTION S*  IDENT S* RPAREN)
-	 -> ^(PSEUDO FUNCTION? IDENT)
+	: pseudocolon^ (IDENT | FUNCTION (IDENT | NUMBER) RPAREN!)
 	;
   catch [RecognitionException re] {
      retval.tree = invalidFallback(CSSLexer.INVALID_SELPART, "INVALID_SELPART", re);
   }
 
+pseudocolon
+	: COLON COLON? -> PSEUDO
+	;
+
 string
 	: STRING
 	| INVALID_STRING
