Index: cz/vutbr/web/csskit/ElementUtil.java
===================================================================
--- cz/vutbr/web/csskit/ElementUtil.java	(revision 656)
+++ cz/vutbr/web/csskit/ElementUtil.java	(working copy)
@@ -78,11 +78,9 @@
 	
 	public static boolean matchesAttribute(Element e, String name, String value, Selector.Operator o) 
 	{
-	    Node attributeNode = e.getAttributeNode(name);
-	    if (attributeNode != null && o != null)
+	    String attributeValue = e.getAttribute(name);
+	    if (attributeValue.length() >  0 && o != null)
 	    {
-    	    String attributeValue = attributeNode.getNodeValue();
-    		
     		switch(o) {
         		case EQUALS:
         			return attributeValue.equals(value);
Index: cz/vutbr/web/domassign/Analyzer.java
===================================================================
--- cz/vutbr/web/domassign/Analyzer.java	(revision 656)
+++ cz/vutbr/web/domassign/Analyzer.java	(working copy)
@@ -86,7 +86,7 @@
 
 		StyleMap nodes = new StyleMap(declarations.size());
 
-		Traversal<StyleMap> traversal = new Traversal<StyleMap>(
+		Traversal<StyleMap> traversal = new SaxonTraversal<StyleMap>(
 				doc, (Object) declarations, NodeFilter.SHOW_ELEMENT) {
 			
 			@Override
@@ -162,7 +162,7 @@
         // if holder is empty skip evaluation
         if(holder!=null && !holder.isEmpty()) {
             
-    		Traversal<DeclarationMap> traversal = new Traversal<DeclarationMap>(
+    		Traversal<DeclarationMap> traversal = new SaxonTraversal<DeclarationMap>(
     				doc, (Object) holder, NodeFilter.SHOW_ELEMENT) {
     			protected void processNode(DeclarationMap result,
     					Node current, Object source) {
Index: cz/vutbr/web/domassign/SaxonTraversal.java
===================================================================
--- cz/vutbr/web/domassign/SaxonTraversal.java	(revision 0)
+++ cz/vutbr/web/domassign/SaxonTraversal.java	(revision 0)
@@ -0,0 +1,125 @@
+package cz.vutbr.web.domassign;
+
+import org.w3c.dom.DOMException;
+import org.w3c.dom.Document;
+import org.w3c.dom.Node;
+import org.w3c.dom.traversal.NodeFilter;
+import org.w3c.dom.traversal.TreeWalker;
+
+public abstract class SaxonTraversal<T> extends Traversal<T> {
+
+	public SaxonTraversal(Document doc, Object source, int whatToShow) {
+		super(null, source);
+		if (whatToShow != NodeFilter.SHOW_ELEMENT)
+			throw new IllegalArgumentException(
+				"Only supported value for argument whatToShow is NodeFilter.SHOW_ELEMENT");
+		walker = new SaxonTreeWalker(doc.getDocumentElement());
+	}
+	
+	private class SaxonTreeWalker implements TreeWalker {
+
+		private final Node root;
+		private Node current;
+		
+		public SaxonTreeWalker(Node root) {
+			this.root = root;
+			current = null;
+		}
+		
+		@Override
+		public Node firstChild() {
+			Node firstChild = getCurrentNode().getFirstChild();
+			while (firstChild != null && firstChild.getNodeType() != Node.ELEMENT_NODE)
+				firstChild = firstChild.getNextSibling();
+			if (firstChild != null)
+				current = firstChild;
+			return firstChild;
+		}
+
+		@Override
+		public Node getCurrentNode() {
+			if (current == null)
+				current = root;
+			return current;
+		}
+
+		@Override
+		public boolean getExpandEntityReferences() {
+			throw new UnsupportedOperationException("Not supported yet."); 
+		}
+
+		@Override
+		public NodeFilter getFilter() {
+			throw new UnsupportedOperationException("Not supported yet."); 
+		}
+
+		@Override
+		public Node getRoot() {
+			return root;
+		}
+
+		@Override
+		public int getWhatToShow() {
+			return NodeFilter.SHOW_ELEMENT;
+		}
+
+		@Override
+		public Node lastChild() {
+			throw new UnsupportedOperationException("Not supported yet."); 
+		}
+
+		@Override
+		public Node nextNode() {
+			if (current == null)
+				return getCurrentNode();
+			if (firstChild() != null)
+				return current;
+			do {
+				if (nextSibling() != null)
+					return current; }
+			while(parentNode() != null);
+			return null;
+		}
+
+		@Override
+		public Node nextSibling() {
+			Node nextSibling = getCurrentNode().getNextSibling();
+			while (nextSibling != null && nextSibling.getNodeType() != Node.ELEMENT_NODE)
+				nextSibling = nextSibling.getNextSibling();
+			if (nextSibling != null)
+				current = nextSibling;
+			return nextSibling;
+		}
+
+		@Override
+		public Node parentNode() {
+			Node parent = getCurrentNode().getParentNode();
+			if (parent == null || parent.getNodeType() == Node.DOCUMENT_NODE)
+				return null;
+			current = parent;
+			return parent;
+		}
+
+		@Override
+		public Node previousNode() {
+			throw new UnsupportedOperationException("Not supported yet."); 
+		}
+
+		@Override
+		public Node previousSibling() {
+			Node previousSibling = getCurrentNode().getPreviousSibling();
+			while (previousSibling != null && previousSibling.getNodeType() != Node.ELEMENT_NODE)
+				previousSibling = previousSibling.getPreviousSibling();
+			if (previousSibling != null)
+				current = previousSibling;
+			return previousSibling;
+		}
+
+		@Override
+		public void setCurrentNode(Node current) throws DOMException {
+			if (current == null)
+				throw new DOMException(DOMException.NOT_SUPPORTED_ERR, null);
+			this.current = current;
+		}
+	}
+}
Index: cz/vutbr/web/css/CSSFactory.java
===================================================================
--- cz/vutbr/web/css/CSSFactory.java	(revision 656)
+++ cz/vutbr/web/css/CSSFactory.java	(working copy)
@@ -18,6 +18,7 @@
 import cz.vutbr.web.csskit.antlr.CSSParserFactory;
 import cz.vutbr.web.csskit.antlr.CSSParserFactory.SourceType;
 import cz.vutbr.web.domassign.Analyzer;
+import cz.vutbr.web.domassign.SaxonTraversal;
 import cz.vutbr.web.domassign.StyleMap;
 import cz.vutbr.web.domassign.Traversal;
 
@@ -353,7 +354,7 @@
 	 * @author kapy
 	 * 
 	 */
-	private static final class CSSAssignTraversal extends Traversal<StyleSheet> {
+	private static final class CSSAssignTraversal extends SaxonTraversal<StyleSheet> {
 
 		public CSSAssignTraversal(Document doc, Object source, int whatToShow) {
 			super(doc, source, whatToShow);
