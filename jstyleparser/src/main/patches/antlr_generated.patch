Index: cz/vutbr/web/csskit/antlr/CSSLexer.java
===================================================================
--- cz/vutbr/web/csskit/antlr/CSSLexer.java	(revision 656)
+++ cz/vutbr/web/csskit/antlr/CSSLexer.java	(working copy)
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g 2012-06-04 10:42:31
+// $ANTLR 3.1 CSS.g 2012-08-17 12:13:40
 
 package cz.vutbr.web.csskit.antlr;
 
@@ -571,15 +571,15 @@
         super(input,state);
 
     }
-    public String getGrammarFileName() { return "/home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g"; }
+    public String getGrammarFileName() { return "CSS.g"; }
 
     // $ANTLR start "T__89"
     public final void mT__89() throws RecognitionException {
         try {
             int _type = T__89;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:470:7: ( 'important' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:470:9: 'important'
+            // CSS.g:470:7: ( 'important' )
+            // CSS.g:470:9: 'important'
             {
             match("important"); 
 
@@ -599,8 +599,8 @@
         try {
             int _type = IDENT;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1040:2: ( IDENT_MACR )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1040:4: IDENT_MACR
+            // CSS.g:1043:2: ( IDENT_MACR )
+            // CSS.g:1043:4: IDENT_MACR
             {
             mIDENT_MACR(); 
 
@@ -624,12 +624,12 @@
 
             	expectedToken.push(new Integer(CHARSET));
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1051:2: ( '@charset' ( S )* s= STRING_MACR ( S )* SEMICOLON )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1051:4: '@charset' ( S )* s= STRING_MACR ( S )* SEMICOLON
+            // CSS.g:1054:2: ( '@charset' ( S )* s= STRING_MACR ( S )* SEMICOLON )
+            // CSS.g:1054:4: '@charset' ( S )* s= STRING_MACR ( S )* SEMICOLON
             {
             match("@charset"); 
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1051:15: ( S )*
+            // CSS.g:1054:15: ( S )*
             loop1:
             do {
                 int alt1=2;
@@ -642,7 +642,7 @@
 
                 switch (alt1) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1051:15: S
+            	    // CSS.g:1054:15: S
             	    {
             	    mS(); 
 
@@ -657,7 +657,7 @@
             int sStart69 = getCharIndex();
             mSTRING_MACR(); 
             s = new CommonToken(input, Token.INVALID_TOKEN_TYPE, Token.DEFAULT_CHANNEL, sStart69, getCharIndex()-1);
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1051:32: ( S )*
+            // CSS.g:1054:32: ( S )*
             loop2:
             do {
                 int alt2=2;
@@ -670,7 +670,7 @@
 
                 switch (alt2) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1051:32: S
+            	    // CSS.g:1054:32: S
             	    {
             	    mS(); 
 
@@ -732,12 +732,12 @@
             	StringBuilder media = new StringBuilder();
             	String mText = null;
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1086:2: ( '@import' ( S )* (s= STRING_MACR | s= URI ) ( S )* (m= IDENT_MACR ( S )* ( ',' ( S )* m= IDENT_MACR ( S )* )* )? SEMICOLON )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1086:4: '@import' ( S )* (s= STRING_MACR | s= URI ) ( S )* (m= IDENT_MACR ( S )* ( ',' ( S )* m= IDENT_MACR ( S )* )* )? SEMICOLON
+            // CSS.g:1089:2: ( '@import' ( S )* (s= STRING_MACR | s= URI ) ( S )* (m= IDENT_MACR ( S )* ( ',' ( S )* m= IDENT_MACR ( S )* )* )? SEMICOLON )
+            // CSS.g:1089:4: '@import' ( S )* (s= STRING_MACR | s= URI ) ( S )* (m= IDENT_MACR ( S )* ( ',' ( S )* m= IDENT_MACR ( S )* )* )? SEMICOLON
             {
             match("@import"); 
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1086:14: ( S )*
+            // CSS.g:1089:14: ( S )*
             loop3:
             do {
                 int alt3=2;
@@ -750,7 +750,7 @@
 
                 switch (alt3) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1086:14: S
+            	    // CSS.g:1089:14: S
             	    {
             	    mS(); 
 
@@ -762,7 +762,7 @@
                 }
             } while (true);
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1087:4: (s= STRING_MACR | s= URI )
+            // CSS.g:1090:4: (s= STRING_MACR | s= URI )
             int alt4=2;
             int LA4_0 = input.LA(1);
 
@@ -780,7 +780,7 @@
             }
             switch (alt4) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1087:5: s= STRING_MACR
+                    // CSS.g:1090:5: s= STRING_MACR
                     {
                     int sStart114 = getCharIndex();
                     mSTRING_MACR(); 
@@ -790,7 +790,7 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1088:7: s= URI
+                    // CSS.g:1091:7: s= URI
                     {
                     int sStart127 = getCharIndex();
                     mURI(); 
@@ -802,7 +802,7 @@
 
             }
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1088:33: ( S )*
+            // CSS.g:1091:33: ( S )*
             loop5:
             do {
                 int alt5=2;
@@ -815,7 +815,7 @@
 
                 switch (alt5) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1088:33: S
+            	    // CSS.g:1091:33: S
             	    {
             	    mS(); 
 
@@ -827,7 +827,7 @@
                 }
             } while (true);
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1089:6: (m= IDENT_MACR ( S )* ( ',' ( S )* m= IDENT_MACR ( S )* )* )?
+            // CSS.g:1092:6: (m= IDENT_MACR ( S )* ( ',' ( S )* m= IDENT_MACR ( S )* )* )?
             int alt10=2;
             int LA10_0 = input.LA(1);
 
@@ -836,7 +836,7 @@
             }
             switch (alt10) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1089:7: m= IDENT_MACR ( S )* ( ',' ( S )* m= IDENT_MACR ( S )* )*
+                    // CSS.g:1092:7: m= IDENT_MACR ( S )* ( ',' ( S )* m= IDENT_MACR ( S )* )*
                     {
                     int mStart143 = getCharIndex();
                     mIDENT_MACR(); 
@@ -848,7 +848,7 @@
                     	    	else
                     	    	    log.debug("Invalid import media \"{}\"", mText);
                     	     
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1096:7: ( S )*
+                    // CSS.g:1099:7: ( S )*
                     loop6:
                     do {
                         int alt6=2;
@@ -861,7 +861,7 @@
 
                         switch (alt6) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1096:7: S
+                    	    // CSS.g:1099:7: S
                     	    {
                     	    mS(); 
 
@@ -873,7 +873,7 @@
                         }
                     } while (true);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1097:9: ( ',' ( S )* m= IDENT_MACR ( S )* )*
+                    // CSS.g:1100:9: ( ',' ( S )* m= IDENT_MACR ( S )* )*
                     loop9:
                     do {
                         int alt9=2;
@@ -886,10 +886,10 @@
 
                         switch (alt9) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1097:10: ',' ( S )* m= IDENT_MACR ( S )*
+                    	    // CSS.g:1100:10: ',' ( S )* m= IDENT_MACR ( S )*
                     	    {
                     	    match(','); 
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1097:14: ( S )*
+                    	    // CSS.g:1100:14: ( S )*
                     	    loop7:
                     	    do {
                     	        int alt7=2;
@@ -902,7 +902,7 @@
 
                     	        switch (alt7) {
                     	    	case 1 :
-                    	    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1097:14: S
+                    	    	    // CSS.g:1100:14: S
                     	    	    {
                     	    	    mS(); 
 
@@ -924,7 +924,7 @@
                     	    	       	 else
                     	    	    	    log.debug("Invalid import media \"{}\"", mText);		
                     	    	       	
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1104:9: ( S )*
+                    	    // CSS.g:1107:9: ( S )*
                     	    loop8:
                     	    do {
                     	        int alt8=2;
@@ -937,7 +937,7 @@
 
                     	        switch (alt8) {
                     	    	case 1 :
-                    	    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1104:9: S
+                    	    	    // CSS.g:1107:9: S
                     	    	    {
                     	    	    mS(); 
 
@@ -1041,8 +1041,8 @@
         try {
             int _type = MEDIA;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1168:2: ( '@media' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1168:4: '@media'
+            // CSS.g:1171:2: ( '@media' )
+            // CSS.g:1171:4: '@media'
             {
             match("@media"); 
 
@@ -1062,8 +1062,8 @@
         try {
             int _type = PAGE;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1172:2: ( '@page' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1172:4: '@page'
+            // CSS.g:1175:2: ( '@page' )
+            // CSS.g:1175:4: '@page'
             {
             match("@page"); 
 
@@ -1083,11 +1083,11 @@
         try {
             int _type = ATKEYWORD;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1177:2: ( '@' ( MINUS )? IDENT_MACR )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1177:4: '@' ( MINUS )? IDENT_MACR
+            // CSS.g:1180:2: ( '@' ( MINUS )? IDENT_MACR )
+            // CSS.g:1180:4: '@' ( MINUS )? IDENT_MACR
             {
             match('@'); 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1177:8: ( MINUS )?
+            // CSS.g:1180:8: ( MINUS )?
             int alt11=2;
             int LA11_0 = input.LA(1);
 
@@ -1096,7 +1096,7 @@
             }
             switch (alt11) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1177:8: MINUS
+                    // CSS.g:1180:8: MINUS
                     {
                     mMINUS(); 
 
@@ -1122,8 +1122,8 @@
         try {
             int _type = CLASSKEYWORD;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1181:5: ( '.' IDENT_MACR )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1181:7: '.' IDENT_MACR
+            // CSS.g:1184:5: ( '.' IDENT_MACR )
+            // CSS.g:1184:7: '.' IDENT_MACR
             {
             match('.'); 
             mIDENT_MACR(); 
@@ -1146,8 +1146,8 @@
 
             	expectedToken.push(new Integer(STRING));
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1192:2: ( STRING_MACR )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1192:4: STRING_MACR
+            // CSS.g:1195:2: ( STRING_MACR )
+            // CSS.g:1195:4: STRING_MACR
             {
             mSTRING_MACR(); 
 
@@ -1168,8 +1168,8 @@
         try {
             int _type = HASH;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1197:2: ( '#' NAME_MACR )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1197:4: '#' NAME_MACR
+            // CSS.g:1200:2: ( '#' NAME_MACR )
+            // CSS.g:1200:4: '#' NAME_MACR
             {
             match('#'); 
             mNAME_MACR(); 
@@ -1189,8 +1189,8 @@
         try {
             int _type = NUMBER;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1202:2: ( NUMBER_MACR )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1202:4: NUMBER_MACR
+            // CSS.g:1205:2: ( NUMBER_MACR )
+            // CSS.g:1205:4: NUMBER_MACR
             {
             mNUMBER_MACR(); 
 
@@ -1209,8 +1209,8 @@
         try {
             int _type = PERCENTAGE;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1207:2: ( NUMBER_MACR '%' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1207:4: NUMBER_MACR '%'
+            // CSS.g:1210:2: ( NUMBER_MACR '%' )
+            // CSS.g:1210:4: NUMBER_MACR '%'
             {
             mNUMBER_MACR(); 
             match('%'); 
@@ -1230,8 +1230,8 @@
         try {
             int _type = DIMENSION;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1212:2: ( NUMBER_MACR IDENT_MACR )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1212:4: NUMBER_MACR IDENT_MACR
+            // CSS.g:1215:2: ( NUMBER_MACR IDENT_MACR )
+            // CSS.g:1215:4: NUMBER_MACR IDENT_MACR
             {
             mNUMBER_MACR(); 
             mIDENT_MACR(); 
@@ -1251,13 +1251,13 @@
         try {
             int _type = URI;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1217:2: ( 'url(' W_MACR ( STRING_MACR | URI_MACR ) W_MACR ')' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1217:4: 'url(' W_MACR ( STRING_MACR | URI_MACR ) W_MACR ')'
+            // CSS.g:1220:2: ( 'url(' W_MACR ( STRING_MACR | URI_MACR ) W_MACR ')' )
+            // CSS.g:1220:4: 'url(' W_MACR ( STRING_MACR | URI_MACR ) W_MACR ')'
             {
             match("url("); 
 
             mW_MACR(); 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1217:18: ( STRING_MACR | URI_MACR )
+            // CSS.g:1220:18: ( STRING_MACR | URI_MACR )
             int alt12=2;
             int LA12_0 = input.LA(1);
 
@@ -1275,14 +1275,14 @@
             }
             switch (alt12) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1217:19: STRING_MACR
+                    // CSS.g:1220:19: STRING_MACR
                     {
                     mSTRING_MACR(); 
 
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1217:33: URI_MACR
+                    // CSS.g:1220:33: URI_MACR
                     {
                     mURI_MACR(); 
 
@@ -1309,8 +1309,8 @@
         try {
             int _type = UNIRANGE;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1221:9: ( 'U+' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) )? ( '-' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )? )? )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1222:2: 'U+' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) )? ( '-' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )? )?
+            // CSS.g:1224:9: ( 'U+' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) )? ( '-' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )? )? )
+            // CSS.g:1225:2: 'U+' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) )? ( '-' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )? )?
             {
             match("U+"); 
 
@@ -1350,7 +1350,7 @@
                 recover(mse);
                 throw mse;}
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1226:7: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) )?
+            // CSS.g:1229:7: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) )?
             int alt13=2;
             int LA13_0 = input.LA(1);
 
@@ -1359,7 +1359,7 @@
             }
             switch (alt13) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1226:8: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' )
+                    // CSS.g:1229:8: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' | '?' )
                     {
                     if ( (input.LA(1)>='0' && input.LA(1)<='9')||input.LA(1)=='?'||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f') ) {
                         input.consume();
@@ -1385,7 +1385,7 @@
 
             }
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1227:2: ( '-' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )? )?
+            // CSS.g:1230:2: ( '-' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )? )?
             int alt15=2;
             int LA15_0 = input.LA(1);
 
@@ -1394,7 +1394,7 @@
             }
             switch (alt15) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1227:3: '-' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )?
+                    // CSS.g:1230:3: '-' ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )?
                     {
                     match('-'); 
                     if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f') ) {
@@ -1433,7 +1433,7 @@
                         recover(mse);
                         throw mse;}
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1232:14: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )?
+                    // CSS.g:1235:14: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )?
                     int alt14=2;
                     int LA14_0 = input.LA(1);
 
@@ -1442,7 +1442,7 @@
                     }
                     switch (alt14) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1232:15: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
+                            // CSS.g:1235:15: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
                             {
                             if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f') ) {
                                 input.consume();
@@ -1490,8 +1490,8 @@
         try {
             int _type = CDO;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1238:2: ( '<!--' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1238:4: '<!--'
+            // CSS.g:1241:2: ( '<!--' )
+            // CSS.g:1241:4: '<!--'
             {
             match("<!--"); 
 
@@ -1511,8 +1511,8 @@
         try {
             int _type = CDC;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1243:2: ( '-->' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1243:4: '-->'
+            // CSS.g:1246:2: ( '-->' )
+            // CSS.g:1246:4: '-->'
             {
             match("-->"); 
 
@@ -1532,8 +1532,8 @@
         try {
             int _type = SEMICOLON;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1247:2: ( ';' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1247:4: ';'
+            // CSS.g:1250:2: ( ';' )
+            // CSS.g:1250:4: ';'
             {
             match(';'); 
 
@@ -1552,8 +1552,8 @@
         try {
             int _type = COLON;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1251:2: ( ':' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1251:4: ':'
+            // CSS.g:1254:2: ( ':' )
+            // CSS.g:1254:4: ':'
             {
             match(':'); 
 
@@ -1572,8 +1572,8 @@
         try {
             int _type = COMMA;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1255:5: ( ',' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1255:7: ','
+            // CSS.g:1258:5: ( ',' )
+            // CSS.g:1258:7: ','
             {
             match(','); 
 
@@ -1592,8 +1592,8 @@
         try {
             int _type = QUESTION;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1259:2: ( '?' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1259:4: '?'
+            // CSS.g:1262:2: ( '?' )
+            // CSS.g:1262:4: '?'
             {
             match('?'); 
 
@@ -1612,8 +1612,8 @@
         try {
             int _type = PERCENT;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1263:2: ( '%' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1263:4: '%'
+            // CSS.g:1266:2: ( '%' )
+            // CSS.g:1266:4: '%'
             {
             match('%'); 
 
@@ -1632,8 +1632,8 @@
         try {
             int _type = EQUALS;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1267:5: ( '=' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1267:7: '='
+            // CSS.g:1270:5: ( '=' )
+            // CSS.g:1270:7: '='
             {
             match('='); 
 
@@ -1652,8 +1652,8 @@
         try {
             int _type = SLASH;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1271:5: ( '/' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1271:7: '/'
+            // CSS.g:1274:5: ( '/' )
+            // CSS.g:1274:7: '/'
             {
             match('/'); 
 
@@ -1672,8 +1672,8 @@
         try {
             int _type = GREATER;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1275:5: ( '>' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1275:7: '>'
+            // CSS.g:1278:5: ( '>' )
+            // CSS.g:1278:7: '>'
             {
             match('>'); 
 
@@ -1692,8 +1692,8 @@
         try {
             int _type = LESS;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1279:5: ( '<' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1279:7: '<'
+            // CSS.g:1282:5: ( '<' )
+            // CSS.g:1282:7: '<'
             {
             match('<'); 
 
@@ -1712,8 +1712,8 @@
         try {
             int _type = LCURLY;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1283:2: ( '{' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1283:4: '{'
+            // CSS.g:1286:2: ( '{' )
+            // CSS.g:1286:4: '{'
             {
             match('{'); 
             ls.curlyNest++;
@@ -1733,8 +1733,8 @@
         try {
             int _type = RCURLY;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1287:2: ( '}' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1287:4: '}'
+            // CSS.g:1290:2: ( '}' )
+            // CSS.g:1290:4: '}'
             {
             match('}'); 
              if(ls.curlyNest>0) ls.curlyNest--;
@@ -1754,8 +1754,8 @@
         try {
             int _type = APOS;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1291:2: ( '\\'' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1291:4: '\\''
+            // CSS.g:1294:2: ( '\\'' )
+            // CSS.g:1294:4: '\\''
             {
             match('\''); 
              ls.aposOpen=!ls.aposOpen; 
@@ -1775,8 +1775,8 @@
         try {
             int _type = QUOT;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1295:2: ( '\"' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1295:4: '\"'
+            // CSS.g:1298:2: ( '\"' )
+            // CSS.g:1298:4: '\"'
             {
             match('\"'); 
              ls.quotOpen=!ls.quotOpen; 
@@ -1796,8 +1796,8 @@
         try {
             int _type = LPAREN;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1299:2: ( '(' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1299:4: '('
+            // CSS.g:1302:2: ( '(' )
+            // CSS.g:1302:4: '('
             {
             match('('); 
             ls.parenNest++; 
@@ -1817,8 +1817,8 @@
         try {
             int _type = RPAREN;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1303:2: ( ')' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1303:4: ')'
+            // CSS.g:1306:2: ( ')' )
+            // CSS.g:1306:4: ')'
             {
             match(')'); 
              if(ls.parenNest>0) ls.parenNest--; 
@@ -1838,8 +1838,8 @@
         try {
             int _type = LBRACE;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1307:2: ( '[' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1307:4: '['
+            // CSS.g:1310:2: ( '[' )
+            // CSS.g:1310:4: '['
             {
             match('['); 
 
@@ -1858,8 +1858,8 @@
         try {
             int _type = RBRACE;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1311:2: ( ']' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1311:4: ']'
+            // CSS.g:1314:2: ( ']' )
+            // CSS.g:1314:4: ']'
             {
             match(']'); 
 
@@ -1878,8 +1878,8 @@
         try {
             int _type = EXCLAMATION;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1315:5: ( '!' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1315:7: '!'
+            // CSS.g:1318:5: ( '!' )
+            // CSS.g:1318:7: '!'
             {
             match('!'); 
 
@@ -1898,8 +1898,8 @@
         try {
             int _type = MINUS;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1319:2: ( '-' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1319:4: '-'
+            // CSS.g:1322:2: ( '-' )
+            // CSS.g:1322:4: '-'
             {
             match('-'); 
 
@@ -1918,8 +1918,8 @@
         try {
             int _type = PLUS;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1323:2: ( '+' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1323:4: '+'
+            // CSS.g:1326:2: ( '+' )
+            // CSS.g:1326:4: '+'
             {
             match('+'); 
 
@@ -1938,8 +1938,8 @@
         try {
             int _type = ASTERISK;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1327:2: ( '*' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1327:4: '*'
+            // CSS.g:1330:2: ( '*' )
+            // CSS.g:1330:4: '*'
             {
             match('*'); 
 
@@ -1958,10 +1958,10 @@
         try {
             int _type = S;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1332:2: ( ( W_CHAR )+ )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1332:4: ( W_CHAR )+
+            // CSS.g:1335:2: ( ( W_CHAR )+ )
+            // CSS.g:1335:4: ( W_CHAR )+
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1332:4: ( W_CHAR )+
+            // CSS.g:1335:4: ( W_CHAR )+
             int cnt16=0;
             loop16:
             do {
@@ -1975,7 +1975,7 @@
 
                 switch (alt16) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1332:4: W_CHAR
+            	    // CSS.g:1335:4: W_CHAR
             	    {
             	    mW_CHAR(); 
 
@@ -2007,12 +2007,12 @@
         try {
             int _type = COMMENT;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1336:2: ( '/*' ( options {greedy=false; } : . )* '*/' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1336:4: '/*' ( options {greedy=false; } : . )* '*/'
+            // CSS.g:1339:2: ( '/*' ( options {greedy=false; } : . )* '*/' )
+            // CSS.g:1339:4: '/*' ( options {greedy=false; } : . )* '*/'
             {
             match("/*"); 
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1336:9: ( options {greedy=false; } : . )*
+            // CSS.g:1339:9: ( options {greedy=false; } : . )*
             loop17:
             do {
                 int alt17=2;
@@ -2024,20 +2024,20 @@
                     if ( (LA17_1=='/') ) {
                         alt17=2;
                     }
-                    else if ( ((LA17_1>='\u0000' && LA17_1<='.')||(LA17_1>='0' && LA17_1<='\uFFFF')) ) {
+                    else if ( ((LA17_1>='\u0000' && LA17_1<='.')||(LA17_1>='0' && LA17_1<='\uFFFE')) ) {
                         alt17=1;
                     }
 
 
                 }
-                else if ( ((LA17_0>='\u0000' && LA17_0<=')')||(LA17_0>='+' && LA17_0<='\uFFFF')) ) {
+                else if ( ((LA17_0>='\u0000' && LA17_0<=')')||(LA17_0>='+' && LA17_0<='\uFFFE')) ) {
                     alt17=1;
                 }
 
 
                 switch (alt17) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1336:37: .
+            	    // CSS.g:1339:37: .
             	    {
             	    matchAny(); 
 
@@ -2068,12 +2068,12 @@
         try {
             int _type = SL_COMMENT;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1340:2: ( '//' ( options {greedy=false; } : . )* ( '\\n' | '\\r' ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1340:4: '//' ( options {greedy=false; } : . )* ( '\\n' | '\\r' )
+            // CSS.g:1343:2: ( '//' ( options {greedy=false; } : . )* ( '\\n' | '\\r' ) )
+            // CSS.g:1343:4: '//' ( options {greedy=false; } : . )* ( '\\n' | '\\r' )
             {
             match("//"); 
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1340:9: ( options {greedy=false; } : . )*
+            // CSS.g:1343:9: ( options {greedy=false; } : . )*
             loop18:
             do {
                 int alt18=2;
@@ -2082,14 +2082,14 @@
                 if ( (LA18_0=='\n'||LA18_0=='\r') ) {
                     alt18=2;
                 }
-                else if ( ((LA18_0>='\u0000' && LA18_0<='\t')||(LA18_0>='\u000B' && LA18_0<='\f')||(LA18_0>='\u000E' && LA18_0<='\uFFFF')) ) {
+                else if ( ((LA18_0>='\u0000' && LA18_0<='\t')||(LA18_0>='\u000B' && LA18_0<='\f')||(LA18_0>='\u000E' && LA18_0<='\uFFFE')) ) {
                     alt18=1;
                 }
 
 
                 switch (alt18) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1340:37: .
+            	    // CSS.g:1343:37: .
             	    {
             	    matchAny(); 
 
@@ -2127,8 +2127,8 @@
         try {
             int _type = EXPRESSION;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1345:3: ( 'expression(' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1345:5: 'expression('
+            // CSS.g:1348:3: ( 'expression(' )
+            // CSS.g:1348:5: 'expression('
             {
             match("expression("); 
 
@@ -2149,8 +2149,8 @@
         try {
             int _type = FUNCTION;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1350:2: ( IDENT_MACR '(' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1350:4: IDENT_MACR '('
+            // CSS.g:1353:2: ( IDENT_MACR '(' )
+            // CSS.g:1353:4: IDENT_MACR '('
             {
             mIDENT_MACR(); 
             match('('); 
@@ -2170,8 +2170,8 @@
         try {
             int _type = INCLUDES;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1354:2: ( '~=' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1354:4: '~='
+            // CSS.g:1357:2: ( '~=' )
+            // CSS.g:1357:4: '~='
             {
             match("~="); 
 
@@ -2191,8 +2191,8 @@
         try {
             int _type = DASHMATCH;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1358:2: ( '|=' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1358:4: '|='
+            // CSS.g:1361:2: ( '|=' )
+            // CSS.g:1361:4: '|='
             {
             match("|="); 
 
@@ -2212,8 +2212,8 @@
         try {
             int _type = INVALID_TOKEN;
             int _channel = DEFAULT_TOKEN_CHANNEL;
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1362:2: ( . )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1362:4: .
+            // CSS.g:1365:2: ( . )
+            // CSS.g:1365:4: .
             {
             matchAny(); 
 
@@ -2230,11 +2230,11 @@
     // $ANTLR start "IDENT_MACR"
     public final void mIDENT_MACR() throws RecognitionException {
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1371:4: ( NAME_START ( NAME_CHAR )* )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1371:6: NAME_START ( NAME_CHAR )*
+            // CSS.g:1374:4: ( NAME_START ( NAME_CHAR )* )
+            // CSS.g:1374:6: NAME_START ( NAME_CHAR )*
             {
             mNAME_START(); 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1371:17: ( NAME_CHAR )*
+            // CSS.g:1374:17: ( NAME_CHAR )*
             loop19:
             do {
                 int alt19=2;
@@ -2247,7 +2247,7 @@
 
                 switch (alt19) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1371:17: NAME_CHAR
+            	    // CSS.g:1374:17: NAME_CHAR
             	    {
             	    mNAME_CHAR(); 
 
@@ -2271,10 +2271,10 @@
     // $ANTLR start "NAME_MACR"
     public final void mNAME_MACR() throws RecognitionException {
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1376:3: ( ( NAME_CHAR )+ )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1376:5: ( NAME_CHAR )+
+            // CSS.g:1379:3: ( ( NAME_CHAR )+ )
+            // CSS.g:1379:5: ( NAME_CHAR )+
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1376:5: ( NAME_CHAR )+
+            // CSS.g:1379:5: ( NAME_CHAR )+
             int cnt20=0;
             loop20:
             do {
@@ -2288,7 +2288,7 @@
 
                 switch (alt20) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1376:5: NAME_CHAR
+            	    // CSS.g:1379:5: NAME_CHAR
             	    {
             	    mNAME_CHAR(); 
 
@@ -2316,10 +2316,10 @@
     // $ANTLR start "NAME_START"
     public final void mNAME_START() throws RecognitionException {
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1381:4: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | NON_ASCII | ESCAPE_CHAR ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1381:6: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | NON_ASCII | ESCAPE_CHAR )
+            // CSS.g:1384:4: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' | NON_ASCII | ESCAPE_CHAR ) )
+            // CSS.g:1384:6: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | NON_ASCII | ESCAPE_CHAR )
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1381:6: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | NON_ASCII | ESCAPE_CHAR )
+            // CSS.g:1384:6: ( 'a' .. 'z' | 'A' .. 'Z' | '_' | NON_ASCII | ESCAPE_CHAR )
             int alt21=5;
             int LA21_0 = input.LA(1);
 
@@ -2346,35 +2346,35 @@
             }
             switch (alt21) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1381:7: 'a' .. 'z'
+                    // CSS.g:1384:7: 'a' .. 'z'
                     {
                     matchRange('a','z'); 
 
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1381:18: 'A' .. 'Z'
+                    // CSS.g:1384:18: 'A' .. 'Z'
                     {
                     matchRange('A','Z'); 
 
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1381:29: '_'
+                    // CSS.g:1384:29: '_'
                     {
                     match('_'); 
 
                     }
                     break;
                 case 4 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1381:35: NON_ASCII
+                    // CSS.g:1384:35: NON_ASCII
                     {
                     mNON_ASCII(); 
 
                     }
                     break;
                 case 5 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1381:47: ESCAPE_CHAR
+                    // CSS.g:1384:47: ESCAPE_CHAR
                     {
                     mESCAPE_CHAR(); 
 
@@ -2395,8 +2395,8 @@
     // $ANTLR start "NON_ASCII"
     public final void mNON_ASCII() throws RecognitionException {
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1386:4: ( ( '\\u0080' .. '\\uD7FF' | '\\uE000' .. '\\uFFFD' ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1386:6: ( '\\u0080' .. '\\uD7FF' | '\\uE000' .. '\\uFFFD' )
+            // CSS.g:1389:4: ( ( '\\u0080' .. '\\uD7FF' | '\\uE000' .. '\\uFFFD' ) )
+            // CSS.g:1389:6: ( '\\u0080' .. '\\uD7FF' | '\\uE000' .. '\\uFFFD' )
             {
             if ( (input.LA(1)>='\u0080' && input.LA(1)<='\uD7FF')||(input.LA(1)>='\uE000' && input.LA(1)<='\uFFFD') ) {
                 input.consume();
@@ -2419,17 +2419,17 @@
     // $ANTLR start "ESCAPE_CHAR"
     public final void mESCAPE_CHAR() throws RecognitionException {
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1391:3: ( ( '\\\\' ) ( ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )? ) | ( '\\u0020' .. '\\u007E' | '\\u0080' .. '\\uD7FF' | '\\uE000' .. '\\uFFFD' ) ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1391:5: ( '\\\\' ) ( ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )? ) | ( '\\u0020' .. '\\u007E' | '\\u0080' .. '\\uD7FF' | '\\uE000' .. '\\uFFFD' ) )
+            // CSS.g:1394:3: ( ( '\\\\' ) ( ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )? ) | ( '\\u0020' .. '\\u007E' | '\\u0080' .. '\\uD7FF' | '\\uE000' .. '\\uFFFD' ) ) )
+            // CSS.g:1394:5: ( '\\\\' ) ( ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )? ) | ( '\\u0020' .. '\\u007E' | '\\u0080' .. '\\uD7FF' | '\\uE000' .. '\\uFFFD' ) )
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1391:5: ( '\\\\' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1391:6: '\\\\'
+            // CSS.g:1394:5: ( '\\\\' )
+            // CSS.g:1394:6: '\\\\'
             {
             match('\\'); 
 
             }
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1392:5: ( ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )? ) | ( '\\u0020' .. '\\u007E' | '\\u0080' .. '\\uD7FF' | '\\uE000' .. '\\uFFFD' ) )
+            // CSS.g:1395:5: ( ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )? ) | ( '\\u0020' .. '\\u007E' | '\\u0080' .. '\\uD7FF' | '\\uE000' .. '\\uFFFD' ) )
             int alt23=2;
             int LA23_0 = input.LA(1);
 
@@ -2453,10 +2453,10 @@
             }
             switch (alt23) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1393:7: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )? )
+                    // CSS.g:1396:7: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )? )
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1393:7: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )? )
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1393:8: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )?
+                    // CSS.g:1396:7: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )? )
+                    // CSS.g:1396:8: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )?
                     {
                     if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f') ) {
                         input.consume();
@@ -2494,7 +2494,7 @@
                         recover(mse);
                         throw mse;}
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1397:8: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )?
+                    // CSS.g:1400:8: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )?
                     int alt22=2;
                     int LA22_0 = input.LA(1);
 
@@ -2503,7 +2503,7 @@
                     }
                     switch (alt22) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1397:9: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
+                            // CSS.g:1400:9: ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' )
                             {
                             if ( (input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f') ) {
                                 input.consume();
@@ -2536,7 +2536,7 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1400:7: ( '\\u0020' .. '\\u007E' | '\\u0080' .. '\\uD7FF' | '\\uE000' .. '\\uFFFD' )
+                    // CSS.g:1403:7: ( '\\u0020' .. '\\u007E' | '\\u0080' .. '\\uD7FF' | '\\uE000' .. '\\uFFFD' )
                     {
                     if ( (input.LA(1)>=' ' && input.LA(1)<='~')||(input.LA(1)>='\u0080' && input.LA(1)<='\uD7FF')||(input.LA(1)>='\uE000' && input.LA(1)<='\uFFFD') ) {
                         input.consume();
@@ -2565,10 +2565,10 @@
     // $ANTLR start "NAME_CHAR"
     public final void mNAME_CHAR() throws RecognitionException {
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1406:4: ( ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | '_' | NON_ASCII | ESCAPE_CHAR ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1406:6: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | '_' | NON_ASCII | ESCAPE_CHAR )
+            // CSS.g:1409:4: ( ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | '_' | NON_ASCII | ESCAPE_CHAR ) )
+            // CSS.g:1409:6: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | '_' | NON_ASCII | ESCAPE_CHAR )
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1406:6: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | '_' | NON_ASCII | ESCAPE_CHAR )
+            // CSS.g:1409:6: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '-' | '_' | NON_ASCII | ESCAPE_CHAR )
             int alt24=7;
             int LA24_0 = input.LA(1);
 
@@ -2601,49 +2601,49 @@
             }
             switch (alt24) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1406:7: 'a' .. 'z'
+                    // CSS.g:1409:7: 'a' .. 'z'
                     {
                     matchRange('a','z'); 
 
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1406:18: 'A' .. 'Z'
+                    // CSS.g:1409:18: 'A' .. 'Z'
                     {
                     matchRange('A','Z'); 
 
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1406:29: '0' .. '9'
+                    // CSS.g:1409:29: '0' .. '9'
                     {
                     matchRange('0','9'); 
 
                     }
                     break;
                 case 4 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1406:40: '-'
+                    // CSS.g:1409:40: '-'
                     {
                     match('-'); 
 
                     }
                     break;
                 case 5 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1406:46: '_'
+                    // CSS.g:1409:46: '_'
                     {
                     match('_'); 
 
                     }
                     break;
                 case 6 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1406:52: NON_ASCII
+                    // CSS.g:1409:52: NON_ASCII
                     {
                     mNON_ASCII(); 
 
                     }
                     break;
                 case 7 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1406:64: ESCAPE_CHAR
+                    // CSS.g:1409:64: ESCAPE_CHAR
                     {
                     mESCAPE_CHAR(); 
 
@@ -2664,14 +2664,14 @@
     // $ANTLR start "NUMBER_MACR"
     public final void mNUMBER_MACR() throws RecognitionException {
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1411:4: ( ( '0' .. '9' )+ | ( ( '0' .. '9' )* '.' ( '0' .. '9' )+ ) )
+            // CSS.g:1414:4: ( ( '0' .. '9' )+ | ( ( '0' .. '9' )* '.' ( '0' .. '9' )+ ) )
             int alt28=2;
             alt28 = dfa28.predict(input);
             switch (alt28) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1411:6: ( '0' .. '9' )+
+                    // CSS.g:1414:6: ( '0' .. '9' )+
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1411:6: ( '0' .. '9' )+
+                    // CSS.g:1414:6: ( '0' .. '9' )+
                     int cnt25=0;
                     loop25:
                     do {
@@ -2685,7 +2685,7 @@
 
                         switch (alt25) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1411:7: '0' .. '9'
+                    	    // CSS.g:1414:7: '0' .. '9'
                     	    {
                     	    matchRange('0','9'); 
 
@@ -2705,12 +2705,12 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1411:20: ( ( '0' .. '9' )* '.' ( '0' .. '9' )+ )
+                    // CSS.g:1414:20: ( ( '0' .. '9' )* '.' ( '0' .. '9' )+ )
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1411:20: ( ( '0' .. '9' )* '.' ( '0' .. '9' )+ )
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1411:21: ( '0' .. '9' )* '.' ( '0' .. '9' )+
+                    // CSS.g:1414:20: ( ( '0' .. '9' )* '.' ( '0' .. '9' )+ )
+                    // CSS.g:1414:21: ( '0' .. '9' )* '.' ( '0' .. '9' )+
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1411:21: ( '0' .. '9' )*
+                    // CSS.g:1414:21: ( '0' .. '9' )*
                     loop26:
                     do {
                         int alt26=2;
@@ -2723,7 +2723,7 @@
 
                         switch (alt26) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1411:22: '0' .. '9'
+                    	    // CSS.g:1414:22: '0' .. '9'
                     	    {
                     	    matchRange('0','9'); 
 
@@ -2736,7 +2736,7 @@
                     } while (true);
 
                     match('.'); 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1411:37: ( '0' .. '9' )+
+                    // CSS.g:1414:37: ( '0' .. '9' )+
                     int cnt27=0;
                     loop27:
                     do {
@@ -2750,7 +2750,7 @@
 
                         switch (alt27) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1411:38: '0' .. '9'
+                    	    // CSS.g:1414:38: '0' .. '9'
                     	    {
                     	    matchRange('0','9'); 
 
@@ -2783,7 +2783,7 @@
     // $ANTLR start "STRING_MACR"
     public final void mSTRING_MACR() throws RecognitionException {
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1416:2: ( QUOT ( STRING_CHAR | APOS )* QUOT | APOS ( STRING_CHAR | QUOT )* APOS )
+            // CSS.g:1419:2: ( QUOT ( STRING_CHAR | APOS )* QUOT | APOS ( STRING_CHAR | QUOT )* APOS )
             int alt31=2;
             int LA31_0 = input.LA(1);
 
@@ -2801,10 +2801,10 @@
             }
             switch (alt31) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1416:4: QUOT ( STRING_CHAR | APOS )* QUOT
+                    // CSS.g:1419:4: QUOT ( STRING_CHAR | APOS )* QUOT
                     {
                     mQUOT(); 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1416:9: ( STRING_CHAR | APOS )*
+                    // CSS.g:1419:9: ( STRING_CHAR | APOS )*
                     loop29:
                     do {
                         int alt29=3;
@@ -2820,14 +2820,14 @@
 
                         switch (alt29) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1416:10: STRING_CHAR
+                    	    // CSS.g:1419:10: STRING_CHAR
                     	    {
                     	    mSTRING_CHAR(); 
 
                     	    }
                     	    break;
                     	case 2 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1416:24: APOS
+                    	    // CSS.g:1419:24: APOS
                     	    {
                     	    mAPOS(); 
                     	    ls.aposOpen=false;
@@ -2845,10 +2845,10 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1417:4: APOS ( STRING_CHAR | QUOT )* APOS
+                    // CSS.g:1420:4: APOS ( STRING_CHAR | QUOT )* APOS
                     {
                     mAPOS(); 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1417:9: ( STRING_CHAR | QUOT )*
+                    // CSS.g:1420:9: ( STRING_CHAR | QUOT )*
                     loop30:
                     do {
                         int alt30=3;
@@ -2864,14 +2864,14 @@
 
                         switch (alt30) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1417:10: STRING_CHAR
+                    	    // CSS.g:1420:10: STRING_CHAR
                     	    {
                     	    mSTRING_CHAR(); 
 
                     	    }
                     	    break;
                     	case 2 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1417:24: QUOT
+                    	    // CSS.g:1420:24: QUOT
                     	    {
                     	    mQUOT(); 
                     	    ls.quotOpen=false;
@@ -2899,10 +2899,10 @@
     // $ANTLR start "STRING_CHAR"
     public final void mSTRING_CHAR() throws RecognitionException {
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1422:2: ( ( URI_CHAR | ' ' | '(' | ')' | ( '\\\\' NL_CHAR ) ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1422:5: ( URI_CHAR | ' ' | '(' | ')' | ( '\\\\' NL_CHAR ) )
+            // CSS.g:1425:2: ( ( URI_CHAR | ' ' | '(' | ')' | ( '\\\\' NL_CHAR ) ) )
+            // CSS.g:1425:5: ( URI_CHAR | ' ' | '(' | ')' | ( '\\\\' NL_CHAR ) )
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1422:5: ( URI_CHAR | ' ' | '(' | ')' | ( '\\\\' NL_CHAR ) )
+            // CSS.g:1425:5: ( URI_CHAR | ' ' | '(' | ')' | ( '\\\\' NL_CHAR ) )
             int alt32=5;
             int LA32_0 = input.LA(1);
 
@@ -2935,38 +2935,38 @@
             }
             switch (alt32) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1422:6: URI_CHAR
+                    // CSS.g:1425:6: URI_CHAR
                     {
                     mURI_CHAR(); 
 
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1422:17: ' '
+                    // CSS.g:1425:17: ' '
                     {
                     match(' '); 
 
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1422:23: '('
+                    // CSS.g:1425:23: '('
                     {
                     match('('); 
 
                     }
                     break;
                 case 4 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1422:29: ')'
+                    // CSS.g:1425:29: ')'
                     {
                     match(')'); 
 
                     }
                     break;
                 case 5 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1422:35: ( '\\\\' NL_CHAR )
+                    // CSS.g:1425:35: ( '\\\\' NL_CHAR )
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1422:35: ( '\\\\' NL_CHAR )
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1422:36: '\\\\' NL_CHAR
+                    // CSS.g:1425:35: ( '\\\\' NL_CHAR )
+                    // CSS.g:1425:36: '\\\\' NL_CHAR
                     {
                     match('\\'); 
                     mNL_CHAR(); 
@@ -2991,10 +2991,10 @@
     // $ANTLR start "URI_MACR"
     public final void mURI_MACR() throws RecognitionException {
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1427:2: ( ( URI_CHAR )* )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1427:4: ( URI_CHAR )*
+            // CSS.g:1430:2: ( ( URI_CHAR )* )
+            // CSS.g:1430:4: ( URI_CHAR )*
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1427:4: ( URI_CHAR )*
+            // CSS.g:1430:4: ( URI_CHAR )*
             loop33:
             do {
                 int alt33=2;
@@ -3007,7 +3007,7 @@
 
                 switch (alt33) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1427:4: URI_CHAR
+            	    // CSS.g:1430:4: URI_CHAR
             	    {
             	    mURI_CHAR(); 
 
@@ -3031,7 +3031,7 @@
     // $ANTLR start "URI_CHAR"
     public final void mURI_CHAR() throws RecognitionException {
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1432:2: ( ( '\\u0009' | '\\u0021' | '\\u0023' .. '\\u0026' | '\\u002A' .. '\\u007E' ) | NON_ASCII | ESCAPE_CHAR )
+            // CSS.g:1435:2: ( ( '\\u0009' | '\\u0021' | '\\u0023' .. '\\u0026' | '\\u002A' .. '\\u007E' ) | NON_ASCII | ESCAPE_CHAR )
             int alt34=3;
             int LA34_0 = input.LA(1);
 
@@ -3058,7 +3058,7 @@
             }
             switch (alt34) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1432:4: ( '\\u0009' | '\\u0021' | '\\u0023' .. '\\u0026' | '\\u002A' .. '\\u007E' )
+                    // CSS.g:1435:4: ( '\\u0009' | '\\u0021' | '\\u0023' .. '\\u0026' | '\\u002A' .. '\\u007E' )
                     {
                     if ( input.LA(1)=='\t'||input.LA(1)=='!'||(input.LA(1)>='#' && input.LA(1)<='&')||(input.LA(1)>='*' && input.LA(1)<='~') ) {
                         input.consume();
@@ -3073,14 +3073,14 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1433:6: NON_ASCII
+                    // CSS.g:1436:6: NON_ASCII
                     {
                     mNON_ASCII(); 
 
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1433:18: ESCAPE_CHAR
+                    // CSS.g:1436:18: ESCAPE_CHAR
                     {
                     mESCAPE_CHAR(); 
 
@@ -3097,7 +3097,7 @@
     // $ANTLR start "NL_CHAR"
     public final void mNL_CHAR() throws RecognitionException {
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1438:4: ( '\\u000A' | '\\u000D' '\\u000A' | '\\u000D' | '\\u000C' )
+            // CSS.g:1441:4: ( '\\u000A' | '\\u000D' '\\u000A' | '\\u000D' | '\\u000C' )
             int alt35=4;
             switch ( input.LA(1) ) {
             case '\n':
@@ -3130,14 +3130,14 @@
 
             switch (alt35) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1438:6: '\\u000A'
+                    // CSS.g:1441:6: '\\u000A'
                     {
                     match('\n'); 
 
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1438:17: '\\u000D' '\\u000A'
+                    // CSS.g:1441:17: '\\u000D' '\\u000A'
                     {
                     match('\r'); 
                     match('\n'); 
@@ -3145,14 +3145,14 @@
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1438:37: '\\u000D'
+                    // CSS.g:1441:37: '\\u000D'
                     {
                     match('\r'); 
 
                     }
                     break;
                 case 4 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1438:48: '\\u000C'
+                    // CSS.g:1441:48: '\\u000C'
                     {
                     match('\f'); 
 
@@ -3169,10 +3169,10 @@
     // $ANTLR start "W_MACR"
     public final void mW_MACR() throws RecognitionException {
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1443:2: ( ( W_CHAR )* )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1443:4: ( W_CHAR )*
+            // CSS.g:1446:2: ( ( W_CHAR )* )
+            // CSS.g:1446:4: ( W_CHAR )*
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1443:4: ( W_CHAR )*
+            // CSS.g:1446:4: ( W_CHAR )*
             loop36:
             do {
                 int alt36=2;
@@ -3185,7 +3185,7 @@
 
                 switch (alt36) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1443:4: W_CHAR
+            	    // CSS.g:1446:4: W_CHAR
             	    {
             	    mW_CHAR(); 
 
@@ -3209,8 +3209,8 @@
     // $ANTLR start "W_CHAR"
     public final void mW_CHAR() throws RecognitionException {
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1448:4: ( '\\u0009' | '\\u000A' | '\\u000C' | '\\u000D' | '\\u0020' )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:
+            // CSS.g:1451:4: ( '\\u0009' | '\\u000A' | '\\u000C' | '\\u000D' | '\\u0020' )
+            // CSS.g:
             {
             if ( (input.LA(1)>='\t' && input.LA(1)<='\n')||(input.LA(1)>='\f' && input.LA(1)<='\r')||input.LA(1)==' ' ) {
                 input.consume();
@@ -3231,327 +3231,327 @@
     // $ANTLR end "W_CHAR"
 
     public void mTokens() throws RecognitionException {
-        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:8: ( T__89 | IDENT | CHARSET | IMPORT | MEDIA | PAGE | ATKEYWORD | CLASSKEYWORD | STRING | HASH | NUMBER | PERCENTAGE | DIMENSION | URI | UNIRANGE | CDO | CDC | SEMICOLON | COLON | COMMA | QUESTION | PERCENT | EQUALS | SLASH | GREATER | LESS | LCURLY | RCURLY | APOS | QUOT | LPAREN | RPAREN | LBRACE | RBRACE | EXCLAMATION | MINUS | PLUS | ASTERISK | S | COMMENT | SL_COMMENT | EXPRESSION | FUNCTION | INCLUDES | DASHMATCH | INVALID_TOKEN )
+        // CSS.g:1:8: ( T__89 | IDENT | CHARSET | IMPORT | MEDIA | PAGE | ATKEYWORD | CLASSKEYWORD | STRING | HASH | NUMBER | PERCENTAGE | DIMENSION | URI | UNIRANGE | CDO | CDC | SEMICOLON | COLON | COMMA | QUESTION | PERCENT | EQUALS | SLASH | GREATER | LESS | LCURLY | RCURLY | APOS | QUOT | LPAREN | RPAREN | LBRACE | RBRACE | EXCLAMATION | MINUS | PLUS | ASTERISK | S | COMMENT | SL_COMMENT | EXPRESSION | FUNCTION | INCLUDES | DASHMATCH | INVALID_TOKEN )
         int alt37=46;
         alt37 = dfa37.predict(input);
         switch (alt37) {
             case 1 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:10: T__89
+                // CSS.g:1:10: T__89
                 {
                 mT__89(); 
 
                 }
                 break;
             case 2 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:16: IDENT
+                // CSS.g:1:16: IDENT
                 {
                 mIDENT(); 
 
                 }
                 break;
             case 3 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:22: CHARSET
+                // CSS.g:1:22: CHARSET
                 {
                 mCHARSET(); 
 
                 }
                 break;
             case 4 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:30: IMPORT
+                // CSS.g:1:30: IMPORT
                 {
                 mIMPORT(); 
 
                 }
                 break;
             case 5 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:37: MEDIA
+                // CSS.g:1:37: MEDIA
                 {
                 mMEDIA(); 
 
                 }
                 break;
             case 6 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:43: PAGE
+                // CSS.g:1:43: PAGE
                 {
                 mPAGE(); 
 
                 }
                 break;
             case 7 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:48: ATKEYWORD
+                // CSS.g:1:48: ATKEYWORD
                 {
                 mATKEYWORD(); 
 
                 }
                 break;
             case 8 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:58: CLASSKEYWORD
+                // CSS.g:1:58: CLASSKEYWORD
                 {
                 mCLASSKEYWORD(); 
 
                 }
                 break;
             case 9 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:71: STRING
+                // CSS.g:1:71: STRING
                 {
                 mSTRING(); 
 
                 }
                 break;
             case 10 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:78: HASH
+                // CSS.g:1:78: HASH
                 {
                 mHASH(); 
 
                 }
                 break;
             case 11 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:83: NUMBER
+                // CSS.g:1:83: NUMBER
                 {
                 mNUMBER(); 
 
                 }
                 break;
             case 12 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:90: PERCENTAGE
+                // CSS.g:1:90: PERCENTAGE
                 {
                 mPERCENTAGE(); 
 
                 }
                 break;
             case 13 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:101: DIMENSION
+                // CSS.g:1:101: DIMENSION
                 {
                 mDIMENSION(); 
 
                 }
                 break;
             case 14 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:111: URI
+                // CSS.g:1:111: URI
                 {
                 mURI(); 
 
                 }
                 break;
             case 15 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:115: UNIRANGE
+                // CSS.g:1:115: UNIRANGE
                 {
                 mUNIRANGE(); 
 
                 }
                 break;
             case 16 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:124: CDO
+                // CSS.g:1:124: CDO
                 {
                 mCDO(); 
 
                 }
                 break;
             case 17 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:128: CDC
+                // CSS.g:1:128: CDC
                 {
                 mCDC(); 
 
                 }
                 break;
             case 18 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:132: SEMICOLON
+                // CSS.g:1:132: SEMICOLON
                 {
                 mSEMICOLON(); 
 
                 }
                 break;
             case 19 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:142: COLON
+                // CSS.g:1:142: COLON
                 {
                 mCOLON(); 
 
                 }
                 break;
             case 20 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:148: COMMA
+                // CSS.g:1:148: COMMA
                 {
                 mCOMMA(); 
 
                 }
                 break;
             case 21 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:154: QUESTION
+                // CSS.g:1:154: QUESTION
                 {
                 mQUESTION(); 
 
                 }
                 break;
             case 22 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:163: PERCENT
+                // CSS.g:1:163: PERCENT
                 {
                 mPERCENT(); 
 
                 }
                 break;
             case 23 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:171: EQUALS
+                // CSS.g:1:171: EQUALS
                 {
                 mEQUALS(); 
 
                 }
                 break;
             case 24 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:178: SLASH
+                // CSS.g:1:178: SLASH
                 {
                 mSLASH(); 
 
                 }
                 break;
             case 25 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:184: GREATER
+                // CSS.g:1:184: GREATER
                 {
                 mGREATER(); 
 
                 }
                 break;
             case 26 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:192: LESS
+                // CSS.g:1:192: LESS
                 {
                 mLESS(); 
 
                 }
                 break;
             case 27 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:197: LCURLY
+                // CSS.g:1:197: LCURLY
                 {
                 mLCURLY(); 
 
                 }
                 break;
             case 28 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:204: RCURLY
+                // CSS.g:1:204: RCURLY
                 {
                 mRCURLY(); 
 
                 }
                 break;
             case 29 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:211: APOS
+                // CSS.g:1:211: APOS
                 {
                 mAPOS(); 
 
                 }
                 break;
             case 30 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:216: QUOT
+                // CSS.g:1:216: QUOT
                 {
                 mQUOT(); 
 
                 }
                 break;
             case 31 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:221: LPAREN
+                // CSS.g:1:221: LPAREN
                 {
                 mLPAREN(); 
 
                 }
                 break;
             case 32 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:228: RPAREN
+                // CSS.g:1:228: RPAREN
                 {
                 mRPAREN(); 
 
                 }
                 break;
             case 33 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:235: LBRACE
+                // CSS.g:1:235: LBRACE
                 {
                 mLBRACE(); 
 
                 }
                 break;
             case 34 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:242: RBRACE
+                // CSS.g:1:242: RBRACE
                 {
                 mRBRACE(); 
 
                 }
                 break;
             case 35 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:249: EXCLAMATION
+                // CSS.g:1:249: EXCLAMATION
                 {
                 mEXCLAMATION(); 
 
                 }
                 break;
             case 36 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:261: MINUS
+                // CSS.g:1:261: MINUS
                 {
                 mMINUS(); 
 
                 }
                 break;
             case 37 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:267: PLUS
+                // CSS.g:1:267: PLUS
                 {
                 mPLUS(); 
 
                 }
                 break;
             case 38 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:272: ASTERISK
+                // CSS.g:1:272: ASTERISK
                 {
                 mASTERISK(); 
 
                 }
                 break;
             case 39 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:281: S
+                // CSS.g:1:281: S
                 {
                 mS(); 
 
                 }
                 break;
             case 40 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:283: COMMENT
+                // CSS.g:1:283: COMMENT
                 {
                 mCOMMENT(); 
 
                 }
                 break;
             case 41 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:291: SL_COMMENT
+                // CSS.g:1:291: SL_COMMENT
                 {
                 mSL_COMMENT(); 
 
                 }
                 break;
             case 42 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:302: EXPRESSION
+                // CSS.g:1:302: EXPRESSION
                 {
                 mEXPRESSION(); 
 
                 }
                 break;
             case 43 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:313: FUNCTION
+                // CSS.g:1:313: FUNCTION
                 {
                 mFUNCTION(); 
 
                 }
                 break;
             case 44 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:322: INCLUDES
+                // CSS.g:1:322: INCLUDES
                 {
                 mINCLUDES(); 
 
                 }
                 break;
             case 45 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:331: DASHMATCH
+                // CSS.g:1:331: DASHMATCH
                 {
                 mDASHMATCH(); 
 
                 }
                 break;
             case 46 :
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1:341: INVALID_TOKEN
+                // CSS.g:1:341: INVALID_TOKEN
                 {
                 mINVALID_TOKEN(); 
 
@@ -3614,7 +3614,7 @@
             this.transition = DFA28_transition;
         }
         public String getDescription() {
-            return "1409:1: fragment NUMBER_MACR : ( ( '0' .. '9' )+ | ( ( '0' .. '9' )* '.' ( '0' .. '9' )+ ) );";
+            return "1412:1: fragment NUMBER_MACR : ( ( '0' .. '9' )+ | ( ( '0' .. '9' )* '.' ( '0' .. '9' )+ ) );";
         }
     }
     static final String DFA37_eotS =
@@ -3636,7 +3636,7 @@
         "\5\50\1\11\1\162\1\uffff\2\50\1\uffff\1\154\1\50\1\uffff\2\50\2"+
         "\uffff";
     static final String DFA37_maxS =
-        "\1\uffff\16\ufffd\1\41\1\55\6\uffff\1\57\13\uffff\1\ufffd\2\75\1"+
+        "\1\ufffe\16\ufffd\1\41\1\55\6\uffff\1\57\13\uffff\1\ufffd\2\75\1"+
         "\uffff\1\ufffd\1\uffff\7\ufffd\1\uffff\1\ufffd\1\uffff\2\ufffd\1"+
         "\150\1\155\1\145\1\141\1\uffff\1\ufffd\7\uffff\1\ufffd\1\71\1\uffff"+
         "\1\ufffd\32\uffff\7\ufffd\1\141\1\160\1\144\1\147\11\ufffd\1\162"+
@@ -3654,13 +3654,13 @@
         "\1\6\12\uffff\1\5\7\uffff\1\4\2\uffff\1\3\2\uffff\1\1\2\uffff\2"+
         "\52";
     static final String DFA37_specialS =
-        "\1\0\u00ad\uffff}>";
+        "\u00ae\uffff}>";
     static final String[] DFA37_transitionS = {
             "\11\46\2\42\1\46\2\42\22\46\1\42\1\37\1\11\1\13\1\46\1\25\1"+
             "\46\1\12\1\33\1\34\1\41\1\40\1\23\1\20\1\10\1\27\12\14\1\22"+
             "\1\21\1\17\1\26\1\30\1\24\1\7\24\16\1\3\5\16\1\35\1\6\1\36\1"+
             "\46\1\4\1\46\4\43\1\15\3\43\1\1\13\43\1\2\5\43\1\31\1\45\1\32"+
-            "\1\44\1\46\ud780\5\u0800\46\u1ffe\5\2\46",
+            "\1\44\1\46\ud780\5\u0800\46\u1ffe\5\1\46",
             "\1\60\4\uffff\1\54\2\uffff\12\53\7\uffff\32\52\1\uffff\1\57"+
             "\2\uffff\1\55\1\uffff\14\51\1\47\15\51\5\uffff\ud780\56\u0800"+
             "\uffff\u1ffe\56",
@@ -4018,98 +4018,6 @@
         public String getDescription() {
             return "1:1: Tokens : ( T__89 | IDENT | CHARSET | IMPORT | MEDIA | PAGE | ATKEYWORD | CLASSKEYWORD | STRING | HASH | NUMBER | PERCENTAGE | DIMENSION | URI | UNIRANGE | CDO | CDC | SEMICOLON | COLON | COMMA | QUESTION | PERCENT | EQUALS | SLASH | GREATER | LESS | LCURLY | RCURLY | APOS | QUOT | LPAREN | RPAREN | LBRACE | RBRACE | EXCLAMATION | MINUS | PLUS | ASTERISK | S | COMMENT | SL_COMMENT | EXPRESSION | FUNCTION | INCLUDES | DASHMATCH | INVALID_TOKEN );";
         }
-        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
-            IntStream input = _input;
-        	int _s = s;
-            switch ( s ) {
-                    case 0 : 
-                        int LA37_0 = input.LA(1);
-
-                        s = -1;
-                        if ( (LA37_0=='i') ) {s = 1;}
-
-                        else if ( (LA37_0=='u') ) {s = 2;}
-
-                        else if ( (LA37_0=='U') ) {s = 3;}
-
-                        else if ( (LA37_0=='_') ) {s = 4;}
-
-                        else if ( ((LA37_0>='\u0080' && LA37_0<='\uD7FF')||(LA37_0>='\uE000' && LA37_0<='\uFFFD')) ) {s = 5;}
-
-                        else if ( (LA37_0=='\\') ) {s = 6;}
-
-                        else if ( (LA37_0=='@') ) {s = 7;}
-
-                        else if ( (LA37_0=='.') ) {s = 8;}
-
-                        else if ( (LA37_0=='\"') ) {s = 9;}
-
-                        else if ( (LA37_0=='\'') ) {s = 10;}
-
-                        else if ( (LA37_0=='#') ) {s = 11;}
-
-                        else if ( ((LA37_0>='0' && LA37_0<='9')) ) {s = 12;}
-
-                        else if ( (LA37_0=='e') ) {s = 13;}
-
-                        else if ( ((LA37_0>='A' && LA37_0<='T')||(LA37_0>='V' && LA37_0<='Z')) ) {s = 14;}
-
-                        else if ( (LA37_0=='<') ) {s = 15;}
-
-                        else if ( (LA37_0=='-') ) {s = 16;}
-
-                        else if ( (LA37_0==';') ) {s = 17;}
-
-                        else if ( (LA37_0==':') ) {s = 18;}
-
-                        else if ( (LA37_0==',') ) {s = 19;}
-
-                        else if ( (LA37_0=='?') ) {s = 20;}
-
-                        else if ( (LA37_0=='%') ) {s = 21;}
-
-                        else if ( (LA37_0=='=') ) {s = 22;}
-
-                        else if ( (LA37_0=='/') ) {s = 23;}
-
-                        else if ( (LA37_0=='>') ) {s = 24;}
-
-                        else if ( (LA37_0=='{') ) {s = 25;}
-
-                        else if ( (LA37_0=='}') ) {s = 26;}
-
-                        else if ( (LA37_0=='(') ) {s = 27;}
-
-                        else if ( (LA37_0==')') ) {s = 28;}
-
-                        else if ( (LA37_0=='[') ) {s = 29;}
-
-                        else if ( (LA37_0==']') ) {s = 30;}
-
-                        else if ( (LA37_0=='!') ) {s = 31;}
-
-                        else if ( (LA37_0=='+') ) {s = 32;}
-
-                        else if ( (LA37_0=='*') ) {s = 33;}
-
-                        else if ( ((LA37_0>='\t' && LA37_0<='\n')||(LA37_0>='\f' && LA37_0<='\r')||LA37_0==' ') ) {s = 34;}
-
-                        else if ( ((LA37_0>='a' && LA37_0<='d')||(LA37_0>='f' && LA37_0<='h')||(LA37_0>='j' && LA37_0<='t')||(LA37_0>='v' && LA37_0<='z')) ) {s = 35;}
-
-                        else if ( (LA37_0=='~') ) {s = 36;}
-
-                        else if ( (LA37_0=='|') ) {s = 37;}
-
-                        else if ( ((LA37_0>='\u0000' && LA37_0<='\b')||LA37_0=='\u000B'||(LA37_0>='\u000E' && LA37_0<='\u001F')||LA37_0=='$'||LA37_0=='&'||LA37_0=='^'||LA37_0=='`'||LA37_0=='\u007F'||(LA37_0>='\uD800' && LA37_0<='\uDFFF')||(LA37_0>='\uFFFE' && LA37_0<='\uFFFF')) ) {s = 38;}
-
-                        if ( s>=0 ) return s;
-                        break;
-            }
-            NoViableAltException nvae =
-                new NoViableAltException(getDescription(), 37, _s, input);
-            error(nvae);
-            throw nvae;
-        }
     }
  
 
Index: cz/vutbr/web/csskit/antlr/CSSParser.java
===================================================================
--- cz/vutbr/web/csskit/antlr/CSSParser.java	(revision 656)
+++ cz/vutbr/web/csskit/antlr/CSSParser.java	(working copy)
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g 2012-06-04 10:42:30
+// $ANTLR 3.1 CSS.g 2012-08-17 12:13:39
  
 package cz.vutbr.web.csskit.antlr;
 
@@ -136,7 +136,7 @@
     }
 
     public String[] getTokenNames() { return CSSParser.tokenNames; }
-    public String getGrammarFileName() { return "/home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g"; }
+    public String getGrammarFileName() { return "CSS.g"; }
 
 
         private static Logger log = LoggerFactory.getLogger(CSSParser.class);
@@ -333,7 +333,7 @@
     };
 
     // $ANTLR start "inlinestyle"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:736:1: inlinestyle : ( S )* ( declarations -> ^( INLINESTYLE declarations ) | ( inlineset )+ -> ^( INLINESTYLE ( inlineset )+ ) ) ;
+    // CSS.g:736:1: inlinestyle : ( S )* ( declarations -> ^( INLINESTYLE declarations ) | ( inlineset )+ -> ^( INLINESTYLE ( inlineset )+ ) ) ;
     public final CSSParser.inlinestyle_return inlinestyle() throws RecognitionException {
         CSSParser.inlinestyle_return retval = new CSSParser.inlinestyle_return();
         retval.start = input.LT(1);
@@ -351,17 +351,17 @@
         RewriteRuleSubtreeStream stream_inlineset=new RewriteRuleSubtreeStream(adaptor,"rule inlineset");
         RewriteRuleSubtreeStream stream_declarations=new RewriteRuleSubtreeStream(adaptor,"rule declarations");
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:743:2: ( ( S )* ( declarations -> ^( INLINESTYLE declarations ) | ( inlineset )+ -> ^( INLINESTYLE ( inlineset )+ ) ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:743:4: ( S )* ( declarations -> ^( INLINESTYLE declarations ) | ( inlineset )+ -> ^( INLINESTYLE ( inlineset )+ ) )
+            // CSS.g:743:2: ( ( S )* ( declarations -> ^( INLINESTYLE declarations ) | ( inlineset )+ -> ^( INLINESTYLE ( inlineset )+ ) ) )
+            // CSS.g:743:4: ( S )* ( declarations -> ^( INLINESTYLE declarations ) | ( inlineset )+ -> ^( INLINESTYLE ( inlineset )+ ) )
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:743:4: ( S )*
+            // CSS.g:743:4: ( S )*
             loop1:
             do {
                 int alt1=2;
                 alt1 = dfa1.predict(input);
                 switch (alt1) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:743:4: S
+            	    // CSS.g:743:4: S
             	    {
             	    S1=(Token)match(input,S,FOLLOW_S_in_inlinestyle201);  
             	    stream_S.add(S1);
@@ -375,12 +375,12 @@
                 }
             } while (true);
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:743:8: ( declarations -> ^( INLINESTYLE declarations ) | ( inlineset )+ -> ^( INLINESTYLE ( inlineset )+ ) )
+            // CSS.g:743:8: ( declarations -> ^( INLINESTYLE declarations ) | ( inlineset )+ -> ^( INLINESTYLE ( inlineset )+ ) )
             int alt3=2;
             alt3 = dfa3.predict(input);
             switch (alt3) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:743:9: declarations
+                    // CSS.g:743:9: declarations
                     {
                     pushFollow(FOLLOW_declarations_in_inlinestyle206);
                     declarations2=declarations();
@@ -396,14 +396,13 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 743:22: -> ^( INLINESTYLE declarations )
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:743:25: ^( INLINESTYLE declarations )
+                        // CSS.g:743:25: ^( INLINESTYLE declarations )
                         {
                         Object root_1 = (Object)adaptor.nil();
                         root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INLINESTYLE, "INLINESTYLE"), root_1);
@@ -419,9 +418,9 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:744:10: ( inlineset )+
+                    // CSS.g:744:10: ( inlineset )+
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:744:10: ( inlineset )+
+                    // CSS.g:744:10: ( inlineset )+
                     int cnt2=0;
                     loop2:
                     do {
@@ -435,7 +434,7 @@
 
                         switch (alt2) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:744:10: inlineset
+                    	    // CSS.g:744:10: inlineset
                     	    {
                     	    pushFollow(FOLLOW_inlineset_in_inlinestyle226);
                     	    inlineset3=inlineset();
@@ -464,14 +463,13 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 744:21: -> ^( INLINESTYLE ( inlineset )+ )
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:744:24: ^( INLINESTYLE ( inlineset )+ )
+                        // CSS.g:744:24: ^( INLINESTYLE ( inlineset )+ )
                         {
                         Object root_1 = (Object)adaptor.nil();
                         root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INLINESTYLE, "INLINESTYLE"), root_1);
@@ -523,7 +521,7 @@
     };
 
     // $ANTLR start "stylesheet"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:748:1: stylesheet : ( CDO | CDC | S | nostatement | statement )* -> ^( STYLESHEET ( statement )* ) ;
+    // CSS.g:748:1: stylesheet : ( CDO | CDC | S | nostatement | statement )* -> ^( STYLESHEET ( statement )* ) ;
     public final CSSParser.stylesheet_return stylesheet() throws RecognitionException {
         CSSParser.stylesheet_return retval = new CSSParser.stylesheet_return();
         retval.start = input.LT(1);
@@ -547,17 +545,17 @@
         RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
         RewriteRuleSubtreeStream stream_nostatement=new RewriteRuleSubtreeStream(adaptor,"rule nostatement");
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:749:2: ( ( CDO | CDC | S | nostatement | statement )* -> ^( STYLESHEET ( statement )* ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:749:4: ( CDO | CDC | S | nostatement | statement )*
+            // CSS.g:749:2: ( ( CDO | CDC | S | nostatement | statement )* -> ^( STYLESHEET ( statement )* ) )
+            // CSS.g:749:4: ( CDO | CDC | S | nostatement | statement )*
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:749:4: ( CDO | CDC | S | nostatement | statement )*
+            // CSS.g:749:4: ( CDO | CDC | S | nostatement | statement )*
             loop4:
             do {
                 int alt4=6;
                 alt4 = dfa4.predict(input);
                 switch (alt4) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:749:6: CDO
+            	    // CSS.g:749:6: CDO
             	    {
             	    CDO4=(Token)match(input,CDO,FOLLOW_CDO_in_stylesheet254);  
             	    stream_CDO.add(CDO4);
@@ -566,7 +564,7 @@
             	    }
             	    break;
             	case 2 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:749:12: CDC
+            	    // CSS.g:749:12: CDC
             	    {
             	    CDC5=(Token)match(input,CDC,FOLLOW_CDC_in_stylesheet258);  
             	    stream_CDC.add(CDC5);
@@ -575,7 +573,7 @@
             	    }
             	    break;
             	case 3 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:749:18: S
+            	    // CSS.g:749:18: S
             	    {
             	    S6=(Token)match(input,S,FOLLOW_S_in_stylesheet262);  
             	    stream_S.add(S6);
@@ -584,7 +582,7 @@
             	    }
             	    break;
             	case 4 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:749:22: nostatement
+            	    // CSS.g:749:22: nostatement
             	    {
             	    pushFollow(FOLLOW_nostatement_in_stylesheet266);
             	    nostatement7=nostatement();
@@ -596,7 +594,7 @@
             	    }
             	    break;
             	case 5 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:749:36: statement
+            	    // CSS.g:749:36: statement
             	    {
             	    pushFollow(FOLLOW_statement_in_stylesheet270);
             	    statement8=statement();
@@ -621,19 +619,18 @@
             // rule labels: retval
             // token list labels: 
             // rule list labels: 
-            // wildcard labels: 
             retval.tree = root_0;
-            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
             root_0 = (Object)adaptor.nil();
             // 750:3: -> ^( STYLESHEET ( statement )* )
             {
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:750:6: ^( STYLESHEET ( statement )* )
+                // CSS.g:750:6: ^( STYLESHEET ( statement )* )
                 {
                 Object root_1 = (Object)adaptor.nil();
                 root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STYLESHEET, "STYLESHEET"), root_1);
 
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:750:19: ( statement )*
+                // CSS.g:750:19: ( statement )*
                 while ( stream_statement.hasNext() ) {
                     adaptor.addChild(root_1, stream_statement.nextTree());
 
@@ -672,7 +669,7 @@
     };
 
     // $ANTLR start "statement"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:753:1: statement : ( ruleset | atstatement );
+    // CSS.g:753:1: statement : ( ruleset | atstatement );
     public final CSSParser.statement_return statement() throws RecognitionException {
         CSSParser.statement_return retval = new CSSParser.statement_return();
         retval.start = input.LT(1);
@@ -686,12 +683,12 @@
 
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:754:2: ( ruleset | atstatement )
+            // CSS.g:754:2: ( ruleset | atstatement )
             int alt5=2;
             alt5 = dfa5.predict(input);
             switch (alt5) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:754:4: ruleset
+                    // CSS.g:754:4: ruleset
                     {
                     root_0 = (Object)adaptor.nil();
 
@@ -705,7 +702,7 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:754:14: atstatement
+                    // CSS.g:754:14: atstatement
                     {
                     root_0 = (Object)adaptor.nil();
 
@@ -744,7 +741,7 @@
     };
 
     // $ANTLR start "atstatement"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:757:1: atstatement : ( CHARSET | IMPORT | INVALID_IMPORT | IMPORT_END | PAGE ( S )* ( COLON IDENT ( S )* )? LCURLY ( S )* declarations RCURLY -> ^( PAGE ( IDENT )? declarations ) | MEDIA ( S )* ( media )? LCURLY ( S )* ( ruleset ( S )* )* RCURLY -> ^( MEDIA ( media )? ( ruleset )* ) | ATKEYWORD ( S )* LCURLY ( any )* RCURLY -> INVALID_STATEMENT );
+    // CSS.g:757:1: atstatement : ( CHARSET | IMPORT | INVALID_IMPORT | IMPORT_END | PAGE ( S )* ( COLON IDENT ( S )* )? LCURLY ( S )* declarations RCURLY -> ^( PAGE ( IDENT )? declarations ) | MEDIA ( S )* ( media )? LCURLY ( S )* ( ruleset ( S )* )* RCURLY -> ^( MEDIA ( media )? ( ruleset )* ) | ATKEYWORD ( S )* LCURLY ( any )* RCURLY -> INVALID_STATEMENT );
     public final CSSParser.atstatement_return atstatement() throws RecognitionException {
         CSSParser.atstatement_return retval = new CSSParser.atstatement_return();
         retval.start = input.LT(1);
@@ -817,7 +814,7 @@
         RewriteRuleSubtreeStream stream_media=new RewriteRuleSubtreeStream(adaptor,"rule media");
         RewriteRuleSubtreeStream stream_declarations=new RewriteRuleSubtreeStream(adaptor,"rule declarations");
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:758:2: ( CHARSET | IMPORT | INVALID_IMPORT | IMPORT_END | PAGE ( S )* ( COLON IDENT ( S )* )? LCURLY ( S )* declarations RCURLY -> ^( PAGE ( IDENT )? declarations ) | MEDIA ( S )* ( media )? LCURLY ( S )* ( ruleset ( S )* )* RCURLY -> ^( MEDIA ( media )? ( ruleset )* ) | ATKEYWORD ( S )* LCURLY ( any )* RCURLY -> INVALID_STATEMENT )
+            // CSS.g:758:2: ( CHARSET | IMPORT | INVALID_IMPORT | IMPORT_END | PAGE ( S )* ( COLON IDENT ( S )* )? LCURLY ( S )* declarations RCURLY -> ^( PAGE ( IDENT )? declarations ) | MEDIA ( S )* ( media )? LCURLY ( S )* ( ruleset ( S )* )* RCURLY -> ^( MEDIA ( media )? ( ruleset )* ) | ATKEYWORD ( S )* LCURLY ( any )* RCURLY -> INVALID_STATEMENT )
             int alt17=7;
             switch ( input.LA(1) ) {
             case CHARSET:
@@ -864,7 +861,7 @@
 
             switch (alt17) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:758:4: CHARSET
+                    // CSS.g:758:4: CHARSET
                     {
                     root_0 = (Object)adaptor.nil();
 
@@ -876,7 +873,7 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:759:4: IMPORT
+                    // CSS.g:759:4: IMPORT
                     {
                     root_0 = (Object)adaptor.nil();
 
@@ -888,7 +885,7 @@
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:760:4: INVALID_IMPORT
+                    // CSS.g:760:4: INVALID_IMPORT
                     {
                     root_0 = (Object)adaptor.nil();
 
@@ -900,7 +897,7 @@
                     }
                     break;
                 case 4 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:761:4: IMPORT_END
+                    // CSS.g:761:4: IMPORT_END
                     {
                     root_0 = (Object)adaptor.nil();
 
@@ -912,12 +909,12 @@
                     }
                     break;
                 case 5 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:762:4: PAGE ( S )* ( COLON IDENT ( S )* )? LCURLY ( S )* declarations RCURLY
+                    // CSS.g:762:4: PAGE ( S )* ( COLON IDENT ( S )* )? LCURLY ( S )* declarations RCURLY
                     {
                     PAGE15=(Token)match(input,PAGE,FOLLOW_PAGE_in_atstatement335);  
                     stream_PAGE.add(PAGE15);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:762:9: ( S )*
+                    // CSS.g:762:9: ( S )*
                     loop6:
                     do {
                         int alt6=2;
@@ -930,7 +927,7 @@
 
                         switch (alt6) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:762:9: S
+                    	    // CSS.g:762:9: S
                     	    {
                     	    S16=(Token)match(input,S,FOLLOW_S_in_atstatement337);  
                     	    stream_S.add(S16);
@@ -944,7 +941,7 @@
                         }
                     } while (true);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:762:12: ( COLON IDENT ( S )* )?
+                    // CSS.g:762:12: ( COLON IDENT ( S )* )?
                     int alt8=2;
                     int LA8_0 = input.LA(1);
 
@@ -953,7 +950,7 @@
                     }
                     switch (alt8) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:762:13: COLON IDENT ( S )*
+                            // CSS.g:762:13: COLON IDENT ( S )*
                             {
                             COLON17=(Token)match(input,COLON,FOLLOW_COLON_in_atstatement341);  
                             stream_COLON.add(COLON17);
@@ -961,7 +958,7 @@
                             IDENT18=(Token)match(input,IDENT,FOLLOW_IDENT_in_atstatement343);  
                             stream_IDENT.add(IDENT18);
 
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:762:25: ( S )*
+                            // CSS.g:762:25: ( S )*
                             loop7:
                             do {
                                 int alt7=2;
@@ -974,7 +971,7 @@
 
                                 switch (alt7) {
                             	case 1 :
-                            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:762:25: S
+                            	    // CSS.g:762:25: S
                             	    {
                             	    S19=(Token)match(input,S,FOLLOW_S_in_atstatement345);  
                             	    stream_S.add(S19);
@@ -997,14 +994,14 @@
                     LCURLY20=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_atstatement353);  
                     stream_LCURLY.add(LCURLY20);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:763:10: ( S )*
+                    // CSS.g:763:10: ( S )*
                     loop9:
                     do {
                         int alt9=2;
                         alt9 = dfa9.predict(input);
                         switch (alt9) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:763:10: S
+                    	    // CSS.g:763:10: S
                     	    {
                     	    S21=(Token)match(input,S,FOLLOW_S_in_atstatement355);  
                     	    stream_S.add(S21);
@@ -1030,24 +1027,23 @@
 
 
                     // AST REWRITE
-                    // elements: IDENT, PAGE, declarations
+                    // elements: declarations, IDENT, PAGE
                     // token labels: 
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 764:10: -> ^( PAGE ( IDENT )? declarations )
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:764:13: ^( PAGE ( IDENT )? declarations )
+                        // CSS.g:764:13: ^( PAGE ( IDENT )? declarations )
                         {
                         Object root_1 = (Object)adaptor.nil();
                         root_1 = (Object)adaptor.becomeRoot(stream_PAGE.nextNode(), root_1);
 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:764:20: ( IDENT )?
+                        // CSS.g:764:20: ( IDENT )?
                         if ( stream_IDENT.hasNext() ) {
                             adaptor.addChild(root_1, stream_IDENT.nextNode());
 
@@ -1064,12 +1060,12 @@
                     }
                     break;
                 case 6 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:765:4: MEDIA ( S )* ( media )? LCURLY ( S )* ( ruleset ( S )* )* RCURLY
+                    // CSS.g:765:4: MEDIA ( S )* ( media )? LCURLY ( S )* ( ruleset ( S )* )* RCURLY
                     {
                     MEDIA24=(Token)match(input,MEDIA,FOLLOW_MEDIA_in_atstatement379);  
                     stream_MEDIA.add(MEDIA24);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:765:10: ( S )*
+                    // CSS.g:765:10: ( S )*
                     loop10:
                     do {
                         int alt10=2;
@@ -1082,7 +1078,7 @@
 
                         switch (alt10) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:765:10: S
+                    	    // CSS.g:765:10: S
                     	    {
                     	    S25=(Token)match(input,S,FOLLOW_S_in_atstatement381);  
                     	    stream_S.add(S25);
@@ -1096,7 +1092,7 @@
                         }
                     } while (true);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:765:13: ( media )?
+                    // CSS.g:765:13: ( media )?
                     int alt11=2;
                     int LA11_0 = input.LA(1);
 
@@ -1105,7 +1101,7 @@
                     }
                     switch (alt11) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:765:13: media
+                            // CSS.g:765:13: media
                             {
                             pushFollow(FOLLOW_media_in_atstatement384);
                             media26=media();
@@ -1122,14 +1118,14 @@
                     LCURLY27=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_atstatement390);  
                     stream_LCURLY.add(LCURLY27);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:766:10: ( S )*
+                    // CSS.g:766:10: ( S )*
                     loop12:
                     do {
                         int alt12=2;
                         alt12 = dfa12.predict(input);
                         switch (alt12) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:766:10: S
+                    	    // CSS.g:766:10: S
                     	    {
                     	    S28=(Token)match(input,S,FOLLOW_S_in_atstatement392);  
                     	    stream_S.add(S28);
@@ -1143,14 +1139,14 @@
                         }
                     } while (true);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:766:13: ( ruleset ( S )* )*
+                    // CSS.g:766:13: ( ruleset ( S )* )*
                     loop14:
                     do {
                         int alt14=2;
                         alt14 = dfa14.predict(input);
                         switch (alt14) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:766:14: ruleset ( S )*
+                    	    // CSS.g:766:14: ruleset ( S )*
                     	    {
                     	    pushFollow(FOLLOW_ruleset_in_atstatement396);
                     	    ruleset29=ruleset();
@@ -1158,14 +1154,14 @@
                     	    state._fsp--;
 
                     	    stream_ruleset.add(ruleset29.getTree());
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:766:22: ( S )*
+                    	    // CSS.g:766:22: ( S )*
                     	    loop13:
                     	    do {
                     	        int alt13=2;
                     	        alt13 = dfa13.predict(input);
                     	        switch (alt13) {
                     	    	case 1 :
-                    	    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:766:22: S
+                    	    	    // CSS.g:766:22: S
                     	    	    {
                     	    	    S30=(Token)match(input,S,FOLLOW_S_in_atstatement398);  
                     	    	    stream_S.add(S30);
@@ -1194,30 +1190,29 @@
 
 
                     // AST REWRITE
-                    // elements: MEDIA, ruleset, media
+                    // elements: media, ruleset, MEDIA
                     // token labels: 
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 766:34: -> ^( MEDIA ( media )? ( ruleset )* )
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:766:37: ^( MEDIA ( media )? ( ruleset )* )
+                        // CSS.g:766:37: ^( MEDIA ( media )? ( ruleset )* )
                         {
                         Object root_1 = (Object)adaptor.nil();
                         root_1 = (Object)adaptor.becomeRoot(stream_MEDIA.nextNode(), root_1);
 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:766:45: ( media )?
+                        // CSS.g:766:45: ( media )?
                         if ( stream_media.hasNext() ) {
                             adaptor.addChild(root_1, stream_media.nextTree());
 
                         }
                         stream_media.reset();
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:766:52: ( ruleset )*
+                        // CSS.g:766:52: ( ruleset )*
                         while ( stream_ruleset.hasNext() ) {
                             adaptor.addChild(root_1, stream_ruleset.nextTree());
 
@@ -1233,12 +1228,12 @@
                     }
                     break;
                 case 7 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:767:4: ATKEYWORD ( S )* LCURLY ( any )* RCURLY
+                    // CSS.g:767:4: ATKEYWORD ( S )* LCURLY ( any )* RCURLY
                     {
                     ATKEYWORD32=(Token)match(input,ATKEYWORD,FOLLOW_ATKEYWORD_in_atstatement421);  
                     stream_ATKEYWORD.add(ATKEYWORD32);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:767:14: ( S )*
+                    // CSS.g:767:14: ( S )*
                     loop15:
                     do {
                         int alt15=2;
@@ -1251,7 +1246,7 @@
 
                         switch (alt15) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:767:14: S
+                    	    // CSS.g:767:14: S
                     	    {
                     	    S33=(Token)match(input,S,FOLLOW_S_in_atstatement423);  
                     	    stream_S.add(S33);
@@ -1268,14 +1263,14 @@
                     LCURLY34=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_atstatement426);  
                     stream_LCURLY.add(LCURLY34);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:767:24: ( any )*
+                    // CSS.g:767:24: ( any )*
                     loop16:
                     do {
                         int alt16=2;
                         alt16 = dfa16.predict(input);
                         switch (alt16) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:767:24: any
+                    	    // CSS.g:767:24: any
                     	    {
                     	    pushFollow(FOLLOW_any_in_atstatement428);
                     	    any35=any();
@@ -1303,9 +1298,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 767:36: -> INVALID_STATEMENT
@@ -1344,7 +1338,7 @@
     };
 
     // $ANTLR start "inlineset"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:775:1: inlineset : ( pseudo ( S )* ( COMMA ( S )* pseudo ( S )* )* )? LCURLY declarations RCURLY -> ^( RULE ( pseudo )* declarations ) ;
+    // CSS.g:775:1: inlineset : ( pseudo ( S )* ( COMMA ( S )* pseudo ( S )* )* )? LCURLY declarations RCURLY -> ^( RULE ( pseudo )* declarations ) ;
     public final CSSParser.inlineset_return inlineset() throws RecognitionException {
         CSSParser.inlineset_return retval = new CSSParser.inlineset_return();
         retval.start = input.LT(1);
@@ -1377,10 +1371,10 @@
         RewriteRuleSubtreeStream stream_pseudo=new RewriteRuleSubtreeStream(adaptor,"rule pseudo");
         RewriteRuleSubtreeStream stream_declarations=new RewriteRuleSubtreeStream(adaptor,"rule declarations");
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:778:2: ( ( pseudo ( S )* ( COMMA ( S )* pseudo ( S )* )* )? LCURLY declarations RCURLY -> ^( RULE ( pseudo )* declarations ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:778:4: ( pseudo ( S )* ( COMMA ( S )* pseudo ( S )* )* )? LCURLY declarations RCURLY
+            // CSS.g:778:2: ( ( pseudo ( S )* ( COMMA ( S )* pseudo ( S )* )* )? LCURLY declarations RCURLY -> ^( RULE ( pseudo )* declarations ) )
+            // CSS.g:778:4: ( pseudo ( S )* ( COMMA ( S )* pseudo ( S )* )* )? LCURLY declarations RCURLY
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:778:4: ( pseudo ( S )* ( COMMA ( S )* pseudo ( S )* )* )?
+            // CSS.g:778:4: ( pseudo ( S )* ( COMMA ( S )* pseudo ( S )* )* )?
             int alt22=2;
             int LA22_0 = input.LA(1);
 
@@ -1389,7 +1383,7 @@
             }
             switch (alt22) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:778:5: pseudo ( S )* ( COMMA ( S )* pseudo ( S )* )*
+                    // CSS.g:778:5: pseudo ( S )* ( COMMA ( S )* pseudo ( S )* )*
                     {
                     pushFollow(FOLLOW_pseudo_in_inlineset456);
                     pseudo37=pseudo();
@@ -1397,7 +1391,7 @@
                     state._fsp--;
 
                     stream_pseudo.add(pseudo37.getTree());
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:778:12: ( S )*
+                    // CSS.g:778:12: ( S )*
                     loop18:
                     do {
                         int alt18=2;
@@ -1410,7 +1404,7 @@
 
                         switch (alt18) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:778:12: S
+                    	    // CSS.g:778:12: S
                     	    {
                     	    S38=(Token)match(input,S,FOLLOW_S_in_inlineset458);  
                     	    stream_S.add(S38);
@@ -1424,7 +1418,7 @@
                         }
                     } while (true);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:778:15: ( COMMA ( S )* pseudo ( S )* )*
+                    // CSS.g:778:15: ( COMMA ( S )* pseudo ( S )* )*
                     loop21:
                     do {
                         int alt21=2;
@@ -1437,12 +1431,12 @@
 
                         switch (alt21) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:778:16: COMMA ( S )* pseudo ( S )*
+                    	    // CSS.g:778:16: COMMA ( S )* pseudo ( S )*
                     	    {
                     	    COMMA39=(Token)match(input,COMMA,FOLLOW_COMMA_in_inlineset462);  
                     	    stream_COMMA.add(COMMA39);
 
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:778:22: ( S )*
+                    	    // CSS.g:778:22: ( S )*
                     	    loop19:
                     	    do {
                     	        int alt19=2;
@@ -1455,7 +1449,7 @@
 
                     	        switch (alt19) {
                     	    	case 1 :
-                    	    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:778:22: S
+                    	    	    // CSS.g:778:22: S
                     	    	    {
                     	    	    S40=(Token)match(input,S,FOLLOW_S_in_inlineset464);  
                     	    	    stream_S.add(S40);
@@ -1475,7 +1469,7 @@
                     	    state._fsp--;
 
                     	    stream_pseudo.add(pseudo41.getTree());
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:778:32: ( S )*
+                    	    // CSS.g:778:32: ( S )*
                     	    loop20:
                     	    do {
                     	        int alt20=2;
@@ -1488,7 +1482,7 @@
 
                     	        switch (alt20) {
                     	    	case 1 :
-                    	    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:778:32: S
+                    	    	    // CSS.g:778:32: S
                     	    	    {
                     	    	    S42=(Token)match(input,S,FOLLOW_S_in_inlineset469);  
                     	    	    stream_S.add(S42);
@@ -1537,19 +1531,18 @@
             // rule labels: retval
             // token list labels: 
             // rule list labels: 
-            // wildcard labels: 
             retval.tree = root_0;
-            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
             root_0 = (Object)adaptor.nil();
             // 782:4: -> ^( RULE ( pseudo )* declarations )
             {
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:782:7: ^( RULE ( pseudo )* declarations )
+                // CSS.g:782:7: ^( RULE ( pseudo )* declarations )
                 {
                 Object root_1 = (Object)adaptor.nil();
                 root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RULE, "RULE"), root_1);
 
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:782:14: ( pseudo )*
+                // CSS.g:782:14: ( pseudo )*
                 while ( stream_pseudo.hasNext() ) {
                     adaptor.addChild(root_1, stream_pseudo.nextTree());
 
@@ -1589,7 +1582,7 @@
     };
 
     // $ANTLR start "media"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:785:1: media : IDENT ( S )* ( COMMA ( S )* IDENT ( S )* )* -> ( IDENT )+ ;
+    // CSS.g:785:1: media : IDENT ( S )* ( COMMA ( S )* IDENT ( S )* )* -> ( IDENT )+ ;
     public final CSSParser.media_return media() throws RecognitionException {
         CSSParser.media_return retval = new CSSParser.media_return();
         retval.start = input.LT(1);
@@ -1614,13 +1607,13 @@
         RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:786:2: ( IDENT ( S )* ( COMMA ( S )* IDENT ( S )* )* -> ( IDENT )+ )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:786:4: IDENT ( S )* ( COMMA ( S )* IDENT ( S )* )*
+            // CSS.g:786:2: ( IDENT ( S )* ( COMMA ( S )* IDENT ( S )* )* -> ( IDENT )+ )
+            // CSS.g:786:4: IDENT ( S )* ( COMMA ( S )* IDENT ( S )* )*
             {
             IDENT46=(Token)match(input,IDENT,FOLLOW_IDENT_in_media520);  
             stream_IDENT.add(IDENT46);
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:786:10: ( S )*
+            // CSS.g:786:10: ( S )*
             loop23:
             do {
                 int alt23=2;
@@ -1633,7 +1626,7 @@
 
                 switch (alt23) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:786:10: S
+            	    // CSS.g:786:10: S
             	    {
             	    S47=(Token)match(input,S,FOLLOW_S_in_media522);  
             	    stream_S.add(S47);
@@ -1647,7 +1640,7 @@
                 }
             } while (true);
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:786:13: ( COMMA ( S )* IDENT ( S )* )*
+            // CSS.g:786:13: ( COMMA ( S )* IDENT ( S )* )*
             loop26:
             do {
                 int alt26=2;
@@ -1660,12 +1653,12 @@
 
                 switch (alt26) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:786:14: COMMA ( S )* IDENT ( S )*
+            	    // CSS.g:786:14: COMMA ( S )* IDENT ( S )*
             	    {
             	    COMMA48=(Token)match(input,COMMA,FOLLOW_COMMA_in_media526);  
             	    stream_COMMA.add(COMMA48);
 
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:786:20: ( S )*
+            	    // CSS.g:786:20: ( S )*
             	    loop24:
             	    do {
             	        int alt24=2;
@@ -1678,7 +1671,7 @@
 
             	        switch (alt24) {
             	    	case 1 :
-            	    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:786:20: S
+            	    	    // CSS.g:786:20: S
             	    	    {
             	    	    S49=(Token)match(input,S,FOLLOW_S_in_media528);  
             	    	    stream_S.add(S49);
@@ -1695,7 +1688,7 @@
             	    IDENT50=(Token)match(input,IDENT,FOLLOW_IDENT_in_media531);  
             	    stream_IDENT.add(IDENT50);
 
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:786:29: ( S )*
+            	    // CSS.g:786:29: ( S )*
             	    loop25:
             	    do {
             	        int alt25=2;
@@ -1708,7 +1701,7 @@
 
             	        switch (alt25) {
             	    	case 1 :
-            	    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:786:29: S
+            	    	    // CSS.g:786:29: S
             	    	    {
             	    	    S51=(Token)match(input,S,FOLLOW_S_in_media533);  
             	    	    stream_S.add(S51);
@@ -1739,9 +1732,8 @@
             // rule labels: retval
             // token list labels: 
             // rule list labels: 
-            // wildcard labels: 
             retval.tree = root_0;
-            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
             root_0 = (Object)adaptor.nil();
             // 787:3: -> ( IDENT )+
@@ -1784,7 +1776,7 @@
     };
 
     // $ANTLR start "ruleset"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:790:1: ruleset : ( combined_selector ( COMMA ( S )* combined_selector )* LCURLY ( S )* declarations RCURLY -> ^( RULE ( combined_selector )+ declarations ) | norule -> INVALID_STATEMENT );
+    // CSS.g:790:1: ruleset : ( combined_selector ( COMMA ( S )* combined_selector )* LCURLY ( S )* declarations RCURLY -> ^( RULE ( combined_selector )+ declarations ) | norule -> INVALID_STATEMENT );
     public final CSSParser.ruleset_return ruleset() throws RecognitionException {
         CSSParser.ruleset_return retval = new CSSParser.ruleset_return();
         retval.start = input.LT(1);
@@ -1818,12 +1810,12 @@
         RewriteRuleSubtreeStream stream_norule=new RewriteRuleSubtreeStream(adaptor,"rule norule");
         RewriteRuleSubtreeStream stream_declarations=new RewriteRuleSubtreeStream(adaptor,"rule declarations");
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:791:2: ( combined_selector ( COMMA ( S )* combined_selector )* LCURLY ( S )* declarations RCURLY -> ^( RULE ( combined_selector )+ declarations ) | norule -> INVALID_STATEMENT )
+            // CSS.g:791:2: ( combined_selector ( COMMA ( S )* combined_selector )* LCURLY ( S )* declarations RCURLY -> ^( RULE ( combined_selector )+ declarations ) | norule -> INVALID_STATEMENT )
             int alt30=2;
             alt30 = dfa30.predict(input);
             switch (alt30) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:791:4: combined_selector ( COMMA ( S )* combined_selector )* LCURLY ( S )* declarations RCURLY
+                    // CSS.g:791:4: combined_selector ( COMMA ( S )* combined_selector )* LCURLY ( S )* declarations RCURLY
                     {
                     pushFollow(FOLLOW_combined_selector_in_ruleset558);
                     combined_selector52=combined_selector();
@@ -1831,7 +1823,7 @@
                     state._fsp--;
 
                     stream_combined_selector.add(combined_selector52.getTree());
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:791:22: ( COMMA ( S )* combined_selector )*
+                    // CSS.g:791:22: ( COMMA ( S )* combined_selector )*
                     loop28:
                     do {
                         int alt28=2;
@@ -1844,12 +1836,12 @@
 
                         switch (alt28) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:791:23: COMMA ( S )* combined_selector
+                    	    // CSS.g:791:23: COMMA ( S )* combined_selector
                     	    {
                     	    COMMA53=(Token)match(input,COMMA,FOLLOW_COMMA_in_ruleset561);  
                     	    stream_COMMA.add(COMMA53);
 
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:791:29: ( S )*
+                    	    // CSS.g:791:29: ( S )*
                     	    loop27:
                     	    do {
                     	        int alt27=2;
@@ -1862,7 +1854,7 @@
 
                     	        switch (alt27) {
                     	    	case 1 :
-                    	    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:791:29: S
+                    	    	    // CSS.g:791:29: S
                     	    	    {
                     	    	    S54=(Token)match(input,S,FOLLOW_S_in_ruleset563);  
                     	    	    stream_S.add(S54);
@@ -1894,14 +1886,14 @@
                     LCURLY56=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_ruleset574);  
                     stream_LCURLY.add(LCURLY56);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:792:11: ( S )*
+                    // CSS.g:792:11: ( S )*
                     loop29:
                     do {
                         int alt29=2;
                         alt29 = dfa29.predict(input);
                         switch (alt29) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:792:11: S
+                    	    // CSS.g:792:11: S
                     	    {
                     	    S57=(Token)match(input,S,FOLLOW_S_in_ruleset576);  
                     	    stream_S.add(S57);
@@ -1932,14 +1924,13 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 795:4: -> ^( RULE ( combined_selector )+ declarations )
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:795:7: ^( RULE ( combined_selector )+ declarations )
+                        // CSS.g:795:7: ^( RULE ( combined_selector )+ declarations )
                         {
                         Object root_1 = (Object)adaptor.nil();
                         root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RULE, "RULE"), root_1);
@@ -1963,7 +1954,7 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:796:4: norule
+                    // CSS.g:796:4: norule
                     {
                     pushFollow(FOLLOW_norule_in_ruleset608);
                     norule60=norule();
@@ -1979,9 +1970,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 796:11: -> INVALID_STATEMENT
@@ -2020,7 +2010,7 @@
     };
 
     // $ANTLR start "declarations"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:804:1: declarations : ( declaration )? ( SEMICOLON ( S )* ( declaration )? )* -> ^( SET ( declaration )* ) ;
+    // CSS.g:804:1: declarations : ( declaration )? ( SEMICOLON ( S )* ( declaration )? )* -> ^( SET ( declaration )* ) ;
     public final CSSParser.declarations_return declarations() throws RecognitionException {
         CSSParser.declarations_return retval = new CSSParser.declarations_return();
         retval.start = input.LT(1);
@@ -2040,15 +2030,15 @@
         RewriteRuleTokenStream stream_S=new RewriteRuleTokenStream(adaptor,"token S");
         RewriteRuleSubtreeStream stream_declaration=new RewriteRuleSubtreeStream(adaptor,"rule declaration");
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:805:2: ( ( declaration )? ( SEMICOLON ( S )* ( declaration )? )* -> ^( SET ( declaration )* ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:805:4: ( declaration )? ( SEMICOLON ( S )* ( declaration )? )*
+            // CSS.g:805:2: ( ( declaration )? ( SEMICOLON ( S )* ( declaration )? )* -> ^( SET ( declaration )* ) )
+            // CSS.g:805:4: ( declaration )? ( SEMICOLON ( S )* ( declaration )? )*
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:805:4: ( declaration )?
+            // CSS.g:805:4: ( declaration )?
             int alt31=2;
             alt31 = dfa31.predict(input);
             switch (alt31) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:805:4: declaration
+                    // CSS.g:805:4: declaration
                     {
                     pushFollow(FOLLOW_declaration_in_declarations630);
                     declaration61=declaration();
@@ -2062,7 +2052,7 @@
 
             }
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:805:17: ( SEMICOLON ( S )* ( declaration )? )*
+            // CSS.g:805:17: ( SEMICOLON ( S )* ( declaration )? )*
             loop34:
             do {
                 int alt34=2;
@@ -2075,19 +2065,19 @@
 
                 switch (alt34) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:805:18: SEMICOLON ( S )* ( declaration )?
+            	    // CSS.g:805:18: SEMICOLON ( S )* ( declaration )?
             	    {
             	    SEMICOLON62=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_declarations634);  
             	    stream_SEMICOLON.add(SEMICOLON62);
 
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:805:28: ( S )*
+            	    // CSS.g:805:28: ( S )*
             	    loop32:
             	    do {
             	        int alt32=2;
             	        alt32 = dfa32.predict(input);
             	        switch (alt32) {
             	    	case 1 :
-            	    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:805:28: S
+            	    	    // CSS.g:805:28: S
             	    	    {
             	    	    S63=(Token)match(input,S,FOLLOW_S_in_declarations636);  
             	    	    stream_S.add(S63);
@@ -2101,12 +2091,12 @@
             	        }
             	    } while (true);
 
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:805:31: ( declaration )?
+            	    // CSS.g:805:31: ( declaration )?
             	    int alt33=2;
             	    alt33 = dfa33.predict(input);
             	    switch (alt33) {
             	        case 1 :
-            	            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:805:31: declaration
+            	            // CSS.g:805:31: declaration
             	            {
             	            pushFollow(FOLLOW_declaration_in_declarations639);
             	            declaration64=declaration();
@@ -2137,19 +2127,18 @@
             // rule labels: retval
             // token list labels: 
             // rule list labels: 
-            // wildcard labels: 
             retval.tree = root_0;
-            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
             root_0 = (Object)adaptor.nil();
             // 806:4: -> ^( SET ( declaration )* )
             {
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:806:7: ^( SET ( declaration )* )
+                // CSS.g:806:7: ^( SET ( declaration )* )
                 {
                 Object root_1 = (Object)adaptor.nil();
                 root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SET, "SET"), root_1);
 
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:806:13: ( declaration )*
+                // CSS.g:806:13: ( declaration )*
                 while ( stream_declaration.hasNext() ) {
                     adaptor.addChild(root_1, stream_declaration.nextTree());
 
@@ -2188,7 +2177,7 @@
     };
 
     // $ANTLR start "declaration"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:809:1: declaration : ( property COLON ( S )* terms ( important )? -> ^( DECLARATION ( important )? property terms ) | noprop ( any )* -> INVALID_DECLARATION );
+    // CSS.g:809:1: declaration : ( property COLON ( S )* terms ( important )? -> ^( DECLARATION ( important )? property terms ) | noprop ( any )* -> INVALID_DECLARATION );
     public final CSSParser.declaration_return declaration() throws RecognitionException {
         CSSParser.declaration_return retval = new CSSParser.declaration_return();
         retval.start = input.LT(1);
@@ -2222,12 +2211,12 @@
           log.trace("Decl begin: " + begin);
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:814:2: ( property COLON ( S )* terms ( important )? -> ^( DECLARATION ( important )? property terms ) | noprop ( any )* -> INVALID_DECLARATION )
+            // CSS.g:814:2: ( property COLON ( S )* terms ( important )? -> ^( DECLARATION ( important )? property terms ) | noprop ( any )* -> INVALID_DECLARATION )
             int alt38=2;
             alt38 = dfa38.predict(input);
             switch (alt38) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:814:4: property COLON ( S )* terms ( important )?
+                    // CSS.g:814:4: property COLON ( S )* terms ( important )?
                     {
                     pushFollow(FOLLOW_property_in_declaration671);
                     property65=property();
@@ -2238,14 +2227,14 @@
                     COLON66=(Token)match(input,COLON,FOLLOW_COLON_in_declaration673);  
                     stream_COLON.add(COLON66);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:814:19: ( S )*
+                    // CSS.g:814:19: ( S )*
                     loop35:
                     do {
                         int alt35=2;
                         alt35 = dfa35.predict(input);
                         switch (alt35) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:814:19: S
+                    	    // CSS.g:814:19: S
                     	    {
                     	    S67=(Token)match(input,S,FOLLOW_S_in_declaration675);  
                     	    stream_S.add(S67);
@@ -2265,7 +2254,7 @@
                     state._fsp--;
 
                     stream_terms.add(terms68.getTree());
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:814:28: ( important )?
+                    // CSS.g:814:28: ( important )?
                     int alt36=2;
                     int LA36_0 = input.LA(1);
 
@@ -2274,7 +2263,7 @@
                     }
                     switch (alt36) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:814:28: important
+                            // CSS.g:814:28: important
                             {
                             pushFollow(FOLLOW_important_in_declaration680);
                             important69=important();
@@ -2291,24 +2280,23 @@
 
 
                     // AST REWRITE
-                    // elements: important, terms, property
+                    // elements: property, important, terms
                     // token labels: 
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 814:39: -> ^( DECLARATION ( important )? property terms )
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:814:42: ^( DECLARATION ( important )? property terms )
+                        // CSS.g:814:42: ^( DECLARATION ( important )? property terms )
                         {
                         Object root_1 = (Object)adaptor.nil();
                         root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DECLARATION, "DECLARATION"), root_1);
 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:814:56: ( important )?
+                        // CSS.g:814:56: ( important )?
                         if ( stream_important.hasNext() ) {
                             adaptor.addChild(root_1, stream_important.nextTree());
 
@@ -2326,7 +2314,7 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:815:4: noprop ( any )*
+                    // CSS.g:815:4: noprop ( any )*
                     {
                     pushFollow(FOLLOW_noprop_in_declaration699);
                     noprop70=noprop();
@@ -2334,14 +2322,14 @@
                     state._fsp--;
 
                     stream_noprop.add(noprop70.getTree());
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:815:11: ( any )*
+                    // CSS.g:815:11: ( any )*
                     loop37:
                     do {
                         int alt37=2;
                         alt37 = dfa37.predict(input);
                         switch (alt37) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:815:11: any
+                    	    // CSS.g:815:11: any
                     	    {
                     	    pushFollow(FOLLOW_any_in_declaration701);
                     	    any71=any();
@@ -2366,9 +2354,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 815:16: -> INVALID_DECLARATION
@@ -2407,7 +2394,7 @@
     };
 
     // $ANTLR start "important"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:823:1: important : EXCLAMATION ( S )* 'important' ( S )* -> IMPORTANT ;
+    // CSS.g:823:1: important : EXCLAMATION ( S )* 'important' ( S )* -> IMPORTANT ;
     public final CSSParser.important_return important() throws RecognitionException {
         CSSParser.important_return retval = new CSSParser.important_return();
         retval.start = input.LT(1);
@@ -2428,13 +2415,13 @@
         RewriteRuleTokenStream stream_89=new RewriteRuleTokenStream(adaptor,"token 89");
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:824:3: ( EXCLAMATION ( S )* 'important' ( S )* -> IMPORTANT )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:824:5: EXCLAMATION ( S )* 'important' ( S )*
+            // CSS.g:824:3: ( EXCLAMATION ( S )* 'important' ( S )* -> IMPORTANT )
+            // CSS.g:824:5: EXCLAMATION ( S )* 'important' ( S )*
             {
             EXCLAMATION72=(Token)match(input,EXCLAMATION,FOLLOW_EXCLAMATION_in_important727);  
             stream_EXCLAMATION.add(EXCLAMATION72);
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:824:17: ( S )*
+            // CSS.g:824:17: ( S )*
             loop39:
             do {
                 int alt39=2;
@@ -2447,7 +2434,7 @@
 
                 switch (alt39) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:824:17: S
+            	    // CSS.g:824:17: S
             	    {
             	    S73=(Token)match(input,S,FOLLOW_S_in_important729);  
             	    stream_S.add(S73);
@@ -2464,7 +2451,7 @@
             string_literal74=(Token)match(input,89,FOLLOW_89_in_important732);  
             stream_89.add(string_literal74);
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:824:32: ( S )*
+            // CSS.g:824:32: ( S )*
             loop40:
             do {
                 int alt40=2;
@@ -2477,7 +2464,7 @@
 
                 switch (alt40) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:824:32: S
+            	    // CSS.g:824:32: S
             	    {
             	    S75=(Token)match(input,S,FOLLOW_S_in_important734);  
             	    stream_S.add(S75);
@@ -2499,9 +2486,8 @@
             // rule labels: retval
             // token list labels: 
             // rule list labels: 
-            // wildcard labels: 
             retval.tree = root_0;
-            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
             root_0 = (Object)adaptor.nil();
             // 824:35: -> IMPORTANT
@@ -2537,7 +2523,7 @@
     };
 
     // $ANTLR start "property"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:831:1: property : ( MINUS )? IDENT ( S )* -> ( MINUS )? IDENT ;
+    // CSS.g:831:1: property : ( MINUS )? IDENT ( S )* -> ( MINUS )? IDENT ;
     public final CSSParser.property_return property() throws RecognitionException {
         CSSParser.property_return retval = new CSSParser.property_return();
         retval.start = input.LT(1);
@@ -2556,10 +2542,10 @@
         RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:832:2: ( ( MINUS )? IDENT ( S )* -> ( MINUS )? IDENT )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:832:4: ( MINUS )? IDENT ( S )*
+            // CSS.g:832:2: ( ( MINUS )? IDENT ( S )* -> ( MINUS )? IDENT )
+            // CSS.g:832:4: ( MINUS )? IDENT ( S )*
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:832:4: ( MINUS )?
+            // CSS.g:832:4: ( MINUS )?
             int alt41=2;
             int LA41_0 = input.LA(1);
 
@@ -2568,7 +2554,7 @@
             }
             switch (alt41) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:832:4: MINUS
+                    // CSS.g:832:4: MINUS
                     {
                     MINUS76=(Token)match(input,MINUS,FOLLOW_MINUS_in_property763);  
                     stream_MINUS.add(MINUS76);
@@ -2582,7 +2568,7 @@
             IDENT77=(Token)match(input,IDENT,FOLLOW_IDENT_in_property766);  
             stream_IDENT.add(IDENT77);
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:832:17: ( S )*
+            // CSS.g:832:17: ( S )*
             loop42:
             do {
                 int alt42=2;
@@ -2595,7 +2581,7 @@
 
                 switch (alt42) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:832:17: S
+            	    // CSS.g:832:17: S
             	    {
             	    S78=(Token)match(input,S,FOLLOW_S_in_property768);  
             	    stream_S.add(S78);
@@ -2617,14 +2603,13 @@
             // rule labels: retval
             // token list labels: 
             // rule list labels: 
-            // wildcard labels: 
             retval.tree = root_0;
-            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
             root_0 = (Object)adaptor.nil();
             // 832:20: -> ( MINUS )? IDENT
             {
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:832:23: ( MINUS )?
+                // CSS.g:832:23: ( MINUS )?
                 if ( stream_MINUS.hasNext() ) {
                     adaptor.addChild(root_0, stream_MINUS.nextNode());
 
@@ -2661,7 +2646,7 @@
     };
 
     // $ANTLR start "terms"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:835:1: terms : ( term )+ -> ^( VALUE ( term )+ ) ;
+    // CSS.g:835:1: terms : ( term )+ -> ^( VALUE ( term )+ ) ;
     public final CSSParser.terms_return terms() throws RecognitionException {
         CSSParser.terms_return retval = new CSSParser.terms_return();
         retval.start = input.LT(1);
@@ -2673,10 +2658,10 @@
 
         RewriteRuleSubtreeStream stream_term=new RewriteRuleSubtreeStream(adaptor,"rule term");
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:836:2: ( ( term )+ -> ^( VALUE ( term )+ ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:836:4: ( term )+
+            // CSS.g:836:2: ( ( term )+ -> ^( VALUE ( term )+ ) )
+            // CSS.g:836:4: ( term )+
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:836:4: ( term )+
+            // CSS.g:836:4: ( term )+
             int cnt43=0;
             loop43:
             do {
@@ -2684,7 +2669,7 @@
                 alt43 = dfa43.predict(input);
                 switch (alt43) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:836:4: term
+            	    // CSS.g:836:4: term
             	    {
             	    pushFollow(FOLLOW_term_in_terms796);
             	    term79=term();
@@ -2713,14 +2698,13 @@
             // rule labels: retval
             // token list labels: 
             // rule list labels: 
-            // wildcard labels: 
             retval.tree = root_0;
-            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
             root_0 = (Object)adaptor.nil();
             // 837:2: -> ^( VALUE ( term )+ )
             {
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:837:5: ^( VALUE ( term )+ )
+                // CSS.g:837:5: ^( VALUE ( term )+ )
                 {
                 Object root_1 = (Object)adaptor.nil();
                 root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VALUE, "VALUE"), root_1);
@@ -2775,7 +2759,7 @@
     };
 
     // $ANTLR start "term"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:853:1: term : ( valuepart -> valuepart | LCURLY ( S )* ( any | SEMICOLON ( S )* )* RCURLY -> CURLYBLOCK | ATKEYWORD ( S )* -> ATKEYWORD );
+    // CSS.g:853:1: term : ( valuepart -> valuepart | LCURLY ( S )* ( any | SEMICOLON ( S )* )* RCURLY -> CURLYBLOCK | ATKEYWORD ( S )* -> ATKEYWORD );
     public final CSSParser.term_return term() throws RecognitionException {
         CSSParser.term_return retval = new CSSParser.term_return();
         retval.start = input.LT(1);
@@ -2809,12 +2793,12 @@
         RewriteRuleSubtreeStream stream_valuepart=new RewriteRuleSubtreeStream(adaptor,"rule valuepart");
         RewriteRuleSubtreeStream stream_any=new RewriteRuleSubtreeStream(adaptor,"rule any");
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:854:5: ( valuepart -> valuepart | LCURLY ( S )* ( any | SEMICOLON ( S )* )* RCURLY -> CURLYBLOCK | ATKEYWORD ( S )* -> ATKEYWORD )
+            // CSS.g:854:5: ( valuepart -> valuepart | LCURLY ( S )* ( any | SEMICOLON ( S )* )* RCURLY -> CURLYBLOCK | ATKEYWORD ( S )* -> ATKEYWORD )
             int alt48=3;
             alt48 = dfa48.predict(input);
             switch (alt48) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:854:7: valuepart
+                    // CSS.g:854:7: valuepart
                     {
                     pushFollow(FOLLOW_valuepart_in_term829);
                     valuepart80=valuepart();
@@ -2830,9 +2814,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 854:17: -> valuepart
@@ -2845,19 +2828,19 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:855:7: LCURLY ( S )* ( any | SEMICOLON ( S )* )* RCURLY
+                    // CSS.g:855:7: LCURLY ( S )* ( any | SEMICOLON ( S )* )* RCURLY
                     {
                     LCURLY81=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_term841);  
                     stream_LCURLY.add(LCURLY81);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:855:14: ( S )*
+                    // CSS.g:855:14: ( S )*
                     loop44:
                     do {
                         int alt44=2;
                         alt44 = dfa44.predict(input);
                         switch (alt44) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:855:14: S
+                    	    // CSS.g:855:14: S
                     	    {
                     	    S82=(Token)match(input,S,FOLLOW_S_in_term843);  
                     	    stream_S.add(S82);
@@ -2871,14 +2854,14 @@
                         }
                     } while (true);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:855:17: ( any | SEMICOLON ( S )* )*
+                    // CSS.g:855:17: ( any | SEMICOLON ( S )* )*
                     loop46:
                     do {
                         int alt46=3;
                         alt46 = dfa46.predict(input);
                         switch (alt46) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:855:18: any
+                    	    // CSS.g:855:18: any
                     	    {
                     	    pushFollow(FOLLOW_any_in_term847);
                     	    any83=any();
@@ -2890,19 +2873,19 @@
                     	    }
                     	    break;
                     	case 2 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:855:24: SEMICOLON ( S )*
+                    	    // CSS.g:855:24: SEMICOLON ( S )*
                     	    {
                     	    SEMICOLON84=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_term851);  
                     	    stream_SEMICOLON.add(SEMICOLON84);
 
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:855:34: ( S )*
+                    	    // CSS.g:855:34: ( S )*
                     	    loop45:
                     	    do {
                     	        int alt45=2;
                     	        alt45 = dfa45.predict(input);
                     	        switch (alt45) {
                     	    	case 1 :
-                    	    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:855:34: S
+                    	    	    // CSS.g:855:34: S
                     	    	    {
                     	    	    S85=(Token)match(input,S,FOLLOW_S_in_term853);  
                     	    	    stream_S.add(S85);
@@ -2936,9 +2919,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 855:46: -> CURLYBLOCK
@@ -2951,19 +2933,19 @@
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:856:7: ATKEYWORD ( S )*
+                    // CSS.g:856:7: ATKEYWORD ( S )*
                     {
                     ATKEYWORD87=(Token)match(input,ATKEYWORD,FOLLOW_ATKEYWORD_in_term870);  
                     stream_ATKEYWORD.add(ATKEYWORD87);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:856:17: ( S )*
+                    // CSS.g:856:17: ( S )*
                     loop47:
                     do {
                         int alt47=2;
                         alt47 = dfa47.predict(input);
                         switch (alt47) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:856:17: S
+                    	    // CSS.g:856:17: S
                     	    {
                     	    S88=(Token)match(input,S,FOLLOW_S_in_term872);  
                     	    stream_S.add(S88);
@@ -2985,9 +2967,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 856:20: -> ATKEYWORD
@@ -3025,7 +3006,7 @@
     };
 
     // $ANTLR start "funct"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:859:1: funct : ( EXPRESSION -> EXPRESSION | FUNCTION ( S )* ( terms )? RPAREN -> ^( FUNCTION ( terms )? ) );
+    // CSS.g:859:1: funct : ( EXPRESSION -> EXPRESSION | FUNCTION ( S )* ( terms )? RPAREN -> ^( FUNCTION ( terms )? ) );
     public final CSSParser.funct_return funct() throws RecognitionException {
         CSSParser.funct_return retval = new CSSParser.funct_return();
         retval.start = input.LT(1);
@@ -3052,7 +3033,7 @@
         	functLevel++;
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:867:3: ( EXPRESSION -> EXPRESSION | FUNCTION ( S )* ( terms )? RPAREN -> ^( FUNCTION ( terms )? ) )
+            // CSS.g:867:3: ( EXPRESSION -> EXPRESSION | FUNCTION ( S )* ( terms )? RPAREN -> ^( FUNCTION ( terms )? ) )
             int alt51=2;
             int LA51_0 = input.LA(1);
 
@@ -3070,7 +3051,7 @@
             }
             switch (alt51) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:867:5: EXPRESSION
+                    // CSS.g:867:5: EXPRESSION
                     {
                     EXPRESSION89=(Token)match(input,EXPRESSION,FOLLOW_EXPRESSION_in_funct905);  
                     stream_EXPRESSION.add(EXPRESSION89);
@@ -3083,9 +3064,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 867:16: -> EXPRESSION
@@ -3098,19 +3078,19 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:868:4: FUNCTION ( S )* ( terms )? RPAREN
+                    // CSS.g:868:4: FUNCTION ( S )* ( terms )? RPAREN
                     {
                     FUNCTION90=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_funct914);  
                     stream_FUNCTION.add(FUNCTION90);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:868:13: ( S )*
+                    // CSS.g:868:13: ( S )*
                     loop49:
                     do {
                         int alt49=2;
                         alt49 = dfa49.predict(input);
                         switch (alt49) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:868:13: S
+                    	    // CSS.g:868:13: S
                     	    {
                     	    S91=(Token)match(input,S,FOLLOW_S_in_funct916);  
                     	    stream_S.add(S91);
@@ -3124,12 +3104,12 @@
                         }
                     } while (true);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:868:16: ( terms )?
+                    // CSS.g:868:16: ( terms )?
                     int alt50=2;
                     alt50 = dfa50.predict(input);
                     switch (alt50) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:868:16: terms
+                            // CSS.g:868:16: terms
                             {
                             pushFollow(FOLLOW_terms_in_funct919);
                             terms92=terms();
@@ -3154,19 +3134,18 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 868:30: -> ^( FUNCTION ( terms )? )
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:868:33: ^( FUNCTION ( terms )? )
+                        // CSS.g:868:33: ^( FUNCTION ( terms )? )
                         {
                         Object root_1 = (Object)adaptor.nil();
                         root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:868:44: ( terms )?
+                        // CSS.g:868:44: ( terms )?
                         if ( stream_terms.hasNext() ) {
                             adaptor.addChild(root_1, stream_terms.nextTree());
 
@@ -3210,7 +3189,7 @@
     };
 
     // $ANTLR start "valuepart"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:871:1: valuepart : ( ( MINUS )? IDENT -> ( MINUS )? IDENT | CLASSKEYWORD -> CLASSKEYWORD | ( MINUS )? NUMBER -> ( MINUS )? NUMBER | ( MINUS )? PERCENTAGE -> ( MINUS )? PERCENTAGE | ( MINUS )? DIMENSION -> ( MINUS )? DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | PLUS -> PLUS | ASTERISK -> ASTERISK | ( MINUS )? funct -> ( MINUS )? funct | DASHMATCH -> DASHMATCH | LPAREN ( valuepart )* RPAREN -> ^( PARENBLOCK ( valuepart )* ) | LBRACE ( valuepart )* RBRACE -> ^( BRACEBLOCK ( valuepart )* ) ) ( S )* ;
+    // CSS.g:871:1: valuepart : ( ( MINUS )? IDENT -> ( MINUS )? IDENT | CLASSKEYWORD -> CLASSKEYWORD | ( MINUS )? NUMBER -> ( MINUS )? NUMBER | ( MINUS )? PERCENTAGE -> ( MINUS )? PERCENTAGE | ( MINUS )? DIMENSION -> ( MINUS )? DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | PLUS -> PLUS | ASTERISK -> ASTERISK | ( MINUS )? funct -> ( MINUS )? funct | DASHMATCH -> DASHMATCH | LPAREN ( valuepart )* RPAREN -> ^( PARENBLOCK ( valuepart )* ) | LBRACE ( valuepart )* RBRACE -> ^( BRACEBLOCK ( valuepart )* ) ) ( S )* ;
     public final CSSParser.valuepart_return valuepart() throws RecognitionException {
         CSSParser.valuepart_return retval = new CSSParser.valuepart_return();
         retval.start = input.LT(1);
@@ -3316,17 +3295,17 @@
         RewriteRuleSubtreeStream stream_string=new RewriteRuleSubtreeStream(adaptor,"rule string");
         RewriteRuleSubtreeStream stream_funct=new RewriteRuleSubtreeStream(adaptor,"rule funct");
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:873:5: ( ( ( MINUS )? IDENT -> ( MINUS )? IDENT | CLASSKEYWORD -> CLASSKEYWORD | ( MINUS )? NUMBER -> ( MINUS )? NUMBER | ( MINUS )? PERCENTAGE -> ( MINUS )? PERCENTAGE | ( MINUS )? DIMENSION -> ( MINUS )? DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | PLUS -> PLUS | ASTERISK -> ASTERISK | ( MINUS )? funct -> ( MINUS )? funct | DASHMATCH -> DASHMATCH | LPAREN ( valuepart )* RPAREN -> ^( PARENBLOCK ( valuepart )* ) | LBRACE ( valuepart )* RBRACE -> ^( BRACEBLOCK ( valuepart )* ) ) ( S )* )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:873:7: ( ( MINUS )? IDENT -> ( MINUS )? IDENT | CLASSKEYWORD -> CLASSKEYWORD | ( MINUS )? NUMBER -> ( MINUS )? NUMBER | ( MINUS )? PERCENTAGE -> ( MINUS )? PERCENTAGE | ( MINUS )? DIMENSION -> ( MINUS )? DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | PLUS -> PLUS | ASTERISK -> ASTERISK | ( MINUS )? funct -> ( MINUS )? funct | DASHMATCH -> DASHMATCH | LPAREN ( valuepart )* RPAREN -> ^( PARENBLOCK ( valuepart )* ) | LBRACE ( valuepart )* RBRACE -> ^( BRACEBLOCK ( valuepart )* ) ) ( S )*
+            // CSS.g:873:5: ( ( ( MINUS )? IDENT -> ( MINUS )? IDENT | CLASSKEYWORD -> CLASSKEYWORD | ( MINUS )? NUMBER -> ( MINUS )? NUMBER | ( MINUS )? PERCENTAGE -> ( MINUS )? PERCENTAGE | ( MINUS )? DIMENSION -> ( MINUS )? DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | PLUS -> PLUS | ASTERISK -> ASTERISK | ( MINUS )? funct -> ( MINUS )? funct | DASHMATCH -> DASHMATCH | LPAREN ( valuepart )* RPAREN -> ^( PARENBLOCK ( valuepart )* ) | LBRACE ( valuepart )* RBRACE -> ^( BRACEBLOCK ( valuepart )* ) ) ( S )* )
+            // CSS.g:873:7: ( ( MINUS )? IDENT -> ( MINUS )? IDENT | CLASSKEYWORD -> CLASSKEYWORD | ( MINUS )? NUMBER -> ( MINUS )? NUMBER | ( MINUS )? PERCENTAGE -> ( MINUS )? PERCENTAGE | ( MINUS )? DIMENSION -> ( MINUS )? DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | PLUS -> PLUS | ASTERISK -> ASTERISK | ( MINUS )? funct -> ( MINUS )? funct | DASHMATCH -> DASHMATCH | LPAREN ( valuepart )* RPAREN -> ^( PARENBLOCK ( valuepart )* ) | LBRACE ( valuepart )* RBRACE -> ^( BRACEBLOCK ( valuepart )* ) ) ( S )*
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:873:7: ( ( MINUS )? IDENT -> ( MINUS )? IDENT | CLASSKEYWORD -> CLASSKEYWORD | ( MINUS )? NUMBER -> ( MINUS )? NUMBER | ( MINUS )? PERCENTAGE -> ( MINUS )? PERCENTAGE | ( MINUS )? DIMENSION -> ( MINUS )? DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | PLUS -> PLUS | ASTERISK -> ASTERISK | ( MINUS )? funct -> ( MINUS )? funct | DASHMATCH -> DASHMATCH | LPAREN ( valuepart )* RPAREN -> ^( PARENBLOCK ( valuepart )* ) | LBRACE ( valuepart )* RBRACE -> ^( BRACEBLOCK ( valuepart )* ) )
+            // CSS.g:873:7: ( ( MINUS )? IDENT -> ( MINUS )? IDENT | CLASSKEYWORD -> CLASSKEYWORD | ( MINUS )? NUMBER -> ( MINUS )? NUMBER | ( MINUS )? PERCENTAGE -> ( MINUS )? PERCENTAGE | ( MINUS )? DIMENSION -> ( MINUS )? DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | PLUS -> PLUS | ASTERISK -> ASTERISK | ( MINUS )? funct -> ( MINUS )? funct | DASHMATCH -> DASHMATCH | LPAREN ( valuepart )* RPAREN -> ^( PARENBLOCK ( valuepart )* ) | LBRACE ( valuepart )* RBRACE -> ^( BRACEBLOCK ( valuepart )* ) )
             int alt59=24;
             alt59 = dfa59.predict(input);
             switch (alt59) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:873:9: ( MINUS )? IDENT
+                    // CSS.g:873:9: ( MINUS )? IDENT
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:873:9: ( MINUS )?
+                    // CSS.g:873:9: ( MINUS )?
                     int alt52=2;
                     int LA52_0 = input.LA(1);
 
@@ -3335,7 +3314,7 @@
                     }
                     switch (alt52) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:873:9: MINUS
+                            // CSS.g:873:9: MINUS
                             {
                             MINUS94=(Token)match(input,MINUS,FOLLOW_MINUS_in_valuepart949);  
                             stream_MINUS.add(MINUS94);
@@ -3357,14 +3336,13 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 873:22: -> ( MINUS )? IDENT
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:873:25: ( MINUS )?
+                        // CSS.g:873:25: ( MINUS )?
                         if ( stream_MINUS.hasNext() ) {
                             adaptor.addChild(root_0, stream_MINUS.nextNode());
 
@@ -3378,7 +3356,7 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:874:9: CLASSKEYWORD
+                    // CSS.g:874:9: CLASSKEYWORD
                     {
                     CLASSKEYWORD96=(Token)match(input,CLASSKEYWORD,FOLLOW_CLASSKEYWORD_in_valuepart969);  
                     stream_CLASSKEYWORD.add(CLASSKEYWORD96);
@@ -3391,9 +3369,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 874:22: -> CLASSKEYWORD
@@ -3406,9 +3383,9 @@
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:875:9: ( MINUS )? NUMBER
+                    // CSS.g:875:9: ( MINUS )? NUMBER
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:875:9: ( MINUS )?
+                    // CSS.g:875:9: ( MINUS )?
                     int alt53=2;
                     int LA53_0 = input.LA(1);
 
@@ -3417,7 +3394,7 @@
                     }
                     switch (alt53) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:875:9: MINUS
+                            // CSS.g:875:9: MINUS
                             {
                             MINUS97=(Token)match(input,MINUS,FOLLOW_MINUS_in_valuepart983);  
                             stream_MINUS.add(MINUS97);
@@ -3434,19 +3411,18 @@
 
 
                     // AST REWRITE
-                    // elements: NUMBER, MINUS
+                    // elements: MINUS, NUMBER
                     // token labels: 
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 875:23: -> ( MINUS )? NUMBER
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:875:26: ( MINUS )?
+                        // CSS.g:875:26: ( MINUS )?
                         if ( stream_MINUS.hasNext() ) {
                             adaptor.addChild(root_0, stream_MINUS.nextNode());
 
@@ -3460,9 +3436,9 @@
                     }
                     break;
                 case 4 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:876:9: ( MINUS )? PERCENTAGE
+                    // CSS.g:876:9: ( MINUS )? PERCENTAGE
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:876:9: ( MINUS )?
+                    // CSS.g:876:9: ( MINUS )?
                     int alt54=2;
                     int LA54_0 = input.LA(1);
 
@@ -3471,7 +3447,7 @@
                     }
                     switch (alt54) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:876:9: MINUS
+                            // CSS.g:876:9: MINUS
                             {
                             MINUS99=(Token)match(input,MINUS,FOLLOW_MINUS_in_valuepart1003);  
                             stream_MINUS.add(MINUS99);
@@ -3488,19 +3464,18 @@
 
 
                     // AST REWRITE
-                    // elements: MINUS, PERCENTAGE
+                    // elements: PERCENTAGE, MINUS
                     // token labels: 
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 876:27: -> ( MINUS )? PERCENTAGE
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:876:30: ( MINUS )?
+                        // CSS.g:876:30: ( MINUS )?
                         if ( stream_MINUS.hasNext() ) {
                             adaptor.addChild(root_0, stream_MINUS.nextNode());
 
@@ -3514,9 +3489,9 @@
                     }
                     break;
                 case 5 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:877:9: ( MINUS )? DIMENSION
+                    // CSS.g:877:9: ( MINUS )? DIMENSION
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:877:9: ( MINUS )?
+                    // CSS.g:877:9: ( MINUS )?
                     int alt55=2;
                     int LA55_0 = input.LA(1);
 
@@ -3525,7 +3500,7 @@
                     }
                     switch (alt55) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:877:9: MINUS
+                            // CSS.g:877:9: MINUS
                             {
                             MINUS101=(Token)match(input,MINUS,FOLLOW_MINUS_in_valuepart1023);  
                             stream_MINUS.add(MINUS101);
@@ -3547,14 +3522,13 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 877:26: -> ( MINUS )? DIMENSION
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:877:29: ( MINUS )?
+                        // CSS.g:877:29: ( MINUS )?
                         if ( stream_MINUS.hasNext() ) {
                             adaptor.addChild(root_0, stream_MINUS.nextNode());
 
@@ -3568,7 +3542,7 @@
                     }
                     break;
                 case 6 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:878:9: string
+                    // CSS.g:878:9: string
                     {
                     pushFollow(FOLLOW_string_in_valuepart1043);
                     string103=string();
@@ -3584,9 +3558,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 878:16: -> string
@@ -3599,7 +3572,7 @@
                     }
                     break;
                 case 7 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:879:9: URI
+                    // CSS.g:879:9: URI
                     {
                     URI104=(Token)match(input,URI,FOLLOW_URI_in_valuepart1057);  
                     stream_URI.add(URI104);
@@ -3612,9 +3585,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 879:16: -> URI
@@ -3627,7 +3599,7 @@
                     }
                     break;
                 case 8 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:880:9: HASH
+                    // CSS.g:880:9: HASH
                     {
                     HASH105=(Token)match(input,HASH,FOLLOW_HASH_in_valuepart1074);  
                     stream_HASH.add(HASH105);
@@ -3640,9 +3612,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 880:14: -> HASH
@@ -3655,7 +3626,7 @@
                     }
                     break;
                 case 9 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:881:9: UNIRANGE
+                    // CSS.g:881:9: UNIRANGE
                     {
                     UNIRANGE106=(Token)match(input,UNIRANGE,FOLLOW_UNIRANGE_in_valuepart1088);  
                     stream_UNIRANGE.add(UNIRANGE106);
@@ -3668,9 +3639,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 881:18: -> UNIRANGE
@@ -3683,7 +3653,7 @@
                     }
                     break;
                 case 10 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:882:9: INCLUDES
+                    // CSS.g:882:9: INCLUDES
                     {
                     INCLUDES107=(Token)match(input,INCLUDES,FOLLOW_INCLUDES_in_valuepart1102);  
                     stream_INCLUDES.add(INCLUDES107);
@@ -3696,9 +3666,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 882:18: -> INCLUDES
@@ -3711,7 +3680,7 @@
                     }
                     break;
                 case 11 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:883:9: COLON
+                    // CSS.g:883:9: COLON
                     {
                     COLON108=(Token)match(input,COLON,FOLLOW_COLON_in_valuepart1116);  
                     stream_COLON.add(COLON108);
@@ -3724,9 +3693,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 883:15: -> COLON
@@ -3739,7 +3707,7 @@
                     }
                     break;
                 case 12 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:884:9: COMMA
+                    // CSS.g:884:9: COMMA
                     {
                     COMMA109=(Token)match(input,COMMA,FOLLOW_COMMA_in_valuepart1130);  
                     stream_COMMA.add(COMMA109);
@@ -3752,9 +3720,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 884:15: -> COMMA
@@ -3767,7 +3734,7 @@
                     }
                     break;
                 case 13 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:885:9: GREATER
+                    // CSS.g:885:9: GREATER
                     {
                     GREATER110=(Token)match(input,GREATER,FOLLOW_GREATER_in_valuepart1144);  
                     stream_GREATER.add(GREATER110);
@@ -3780,9 +3747,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 885:17: -> GREATER
@@ -3795,7 +3761,7 @@
                     }
                     break;
                 case 14 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:886:9: LESS
+                    // CSS.g:886:9: LESS
                     {
                     LESS111=(Token)match(input,LESS,FOLLOW_LESS_in_valuepart1158);  
                     stream_LESS.add(LESS111);
@@ -3808,9 +3774,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 886:14: -> LESS
@@ -3823,7 +3788,7 @@
                     }
                     break;
                 case 15 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:887:9: QUESTION
+                    // CSS.g:887:9: QUESTION
                     {
                     QUESTION112=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_valuepart1172);  
                     stream_QUESTION.add(QUESTION112);
@@ -3836,9 +3801,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 887:18: -> QUESTION
@@ -3851,7 +3815,7 @@
                     }
                     break;
                 case 16 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:888:9: PERCENT
+                    // CSS.g:888:9: PERCENT
                     {
                     PERCENT113=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_valuepart1186);  
                     stream_PERCENT.add(PERCENT113);
@@ -3864,9 +3828,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 888:17: -> PERCENT
@@ -3879,7 +3842,7 @@
                     }
                     break;
                 case 17 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:889:9: EQUALS
+                    // CSS.g:889:9: EQUALS
                     {
                     EQUALS114=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_valuepart1200);  
                     stream_EQUALS.add(EQUALS114);
@@ -3892,9 +3855,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 889:16: -> EQUALS
@@ -3907,7 +3869,7 @@
                     }
                     break;
                 case 18 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:890:9: SLASH
+                    // CSS.g:890:9: SLASH
                     {
                     SLASH115=(Token)match(input,SLASH,FOLLOW_SLASH_in_valuepart1214);  
                     stream_SLASH.add(SLASH115);
@@ -3920,9 +3882,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 890:15: -> SLASH
@@ -3935,7 +3896,7 @@
                     }
                     break;
                 case 19 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:891:8: PLUS
+                    // CSS.g:891:8: PLUS
                     {
                     PLUS116=(Token)match(input,PLUS,FOLLOW_PLUS_in_valuepart1227);  
                     stream_PLUS.add(PLUS116);
@@ -3948,9 +3909,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 891:13: -> PLUS
@@ -3963,7 +3923,7 @@
                     }
                     break;
                 case 20 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:892:8: ASTERISK
+                    // CSS.g:892:8: ASTERISK
                     {
                     ASTERISK117=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_valuepart1240);  
                     stream_ASTERISK.add(ASTERISK117);
@@ -3976,9 +3936,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 892:17: -> ASTERISK
@@ -3991,9 +3950,9 @@
                     }
                     break;
                 case 21 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:893:9: ( MINUS )? funct
+                    // CSS.g:893:9: ( MINUS )? funct
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:893:9: ( MINUS )?
+                    // CSS.g:893:9: ( MINUS )?
                     int alt56=2;
                     int LA56_0 = input.LA(1);
 
@@ -4002,7 +3961,7 @@
                     }
                     switch (alt56) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:893:9: MINUS
+                            // CSS.g:893:9: MINUS
                             {
                             MINUS118=(Token)match(input,MINUS,FOLLOW_MINUS_in_valuepart1257);  
                             stream_MINUS.add(MINUS118);
@@ -4022,19 +3981,18 @@
 
 
                     // AST REWRITE
-                    // elements: funct, MINUS
+                    // elements: MINUS, funct
                     // token labels: 
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 893:22: -> ( MINUS )? funct
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:893:25: ( MINUS )?
+                        // CSS.g:893:25: ( MINUS )?
                         if ( stream_MINUS.hasNext() ) {
                             adaptor.addChild(root_0, stream_MINUS.nextNode());
 
@@ -4048,7 +4006,7 @@
                     }
                     break;
                 case 22 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:894:9: DASHMATCH
+                    // CSS.g:894:9: DASHMATCH
                     {
                     DASHMATCH120=(Token)match(input,DASHMATCH,FOLLOW_DASHMATCH_in_valuepart1278);  
                     stream_DASHMATCH.add(DASHMATCH120);
@@ -4061,9 +4019,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 894:19: -> DASHMATCH
@@ -4076,19 +4033,19 @@
                     }
                     break;
                 case 23 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:895:9: LPAREN ( valuepart )* RPAREN
+                    // CSS.g:895:9: LPAREN ( valuepart )* RPAREN
                     {
                     LPAREN121=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_valuepart1292);  
                     stream_LPAREN.add(LPAREN121);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:895:16: ( valuepart )*
+                    // CSS.g:895:16: ( valuepart )*
                     loop57:
                     do {
                         int alt57=2;
                         alt57 = dfa57.predict(input);
                         switch (alt57) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:895:16: valuepart
+                    	    // CSS.g:895:16: valuepart
                     	    {
                     	    pushFollow(FOLLOW_valuepart_in_valuepart1294);
                     	    valuepart122=valuepart();
@@ -4116,19 +4073,18 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 895:34: -> ^( PARENBLOCK ( valuepart )* )
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:895:37: ^( PARENBLOCK ( valuepart )* )
+                        // CSS.g:895:37: ^( PARENBLOCK ( valuepart )* )
                         {
                         Object root_1 = (Object)adaptor.nil();
                         root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARENBLOCK, "PARENBLOCK"), root_1);
 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:895:50: ( valuepart )*
+                        // CSS.g:895:50: ( valuepart )*
                         while ( stream_valuepart.hasNext() ) {
                             adaptor.addChild(root_1, stream_valuepart.nextTree());
 
@@ -4144,19 +4100,19 @@
                     }
                     break;
                 case 24 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:896:9: LBRACE ( valuepart )* RBRACE
+                    // CSS.g:896:9: LBRACE ( valuepart )* RBRACE
                     {
                     LBRACE124=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_valuepart1316);  
                     stream_LBRACE.add(LBRACE124);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:896:16: ( valuepart )*
+                    // CSS.g:896:16: ( valuepart )*
                     loop58:
                     do {
                         int alt58=2;
                         alt58 = dfa58.predict(input);
                         switch (alt58) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:896:16: valuepart
+                    	    // CSS.g:896:16: valuepart
                     	    {
                     	    pushFollow(FOLLOW_valuepart_in_valuepart1318);
                     	    valuepart125=valuepart();
@@ -4184,19 +4140,18 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 896:34: -> ^( BRACEBLOCK ( valuepart )* )
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:896:37: ^( BRACEBLOCK ( valuepart )* )
+                        // CSS.g:896:37: ^( BRACEBLOCK ( valuepart )* )
                         {
                         Object root_1 = (Object)adaptor.nil();
                         root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BRACEBLOCK, "BRACEBLOCK"), root_1);
 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:896:50: ( valuepart )*
+                        // CSS.g:896:50: ( valuepart )*
                         while ( stream_valuepart.hasNext() ) {
                             adaptor.addChild(root_1, stream_valuepart.nextTree());
 
@@ -4214,14 +4169,14 @@
 
             }
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:897:8: ( S )*
+            // CSS.g:897:8: ( S )*
             loop60:
             do {
                 int alt60=2;
                 alt60 = dfa60.predict(input);
                 switch (alt60) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:897:8: S
+            	    // CSS.g:897:8: S
             	    {
             	    S127=(Token)match(input,S,FOLLOW_S_in_valuepart1339);  
             	    stream_S.add(S127);
@@ -4262,7 +4217,7 @@
     };
 
     // $ANTLR start "combined_selector"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:900:1: combined_selector : selector ( ( combinator ) selector )* ;
+    // CSS.g:900:1: combined_selector : selector ( ( combinator ) selector )* ;
     public final CSSParser.combined_selector_return combined_selector() throws RecognitionException {
         CSSParser.combined_selector_return retval = new CSSParser.combined_selector_return();
         retval.start = input.LT(1);
@@ -4278,8 +4233,8 @@
 
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:901:2: ( selector ( ( combinator ) selector )* )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:901:4: selector ( ( combinator ) selector )*
+            // CSS.g:901:2: ( selector ( ( combinator ) selector )* )
+            // CSS.g:901:4: selector ( ( combinator ) selector )*
             {
             root_0 = (Object)adaptor.nil();
 
@@ -4289,7 +4244,7 @@
             state._fsp--;
 
             adaptor.addChild(root_0, selector128.getTree());
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:901:13: ( ( combinator ) selector )*
+            // CSS.g:901:13: ( ( combinator ) selector )*
             loop61:
             do {
                 int alt61=2;
@@ -4302,10 +4257,10 @@
 
                 switch (alt61) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:901:14: ( combinator ) selector
+            	    // CSS.g:901:14: ( combinator ) selector
             	    {
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:901:14: ( combinator )
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:901:15: combinator
+            	    // CSS.g:901:14: ( combinator )
+            	    // CSS.g:901:15: combinator
             	    {
             	    pushFollow(FOLLOW_combinator_in_combined_selector1360);
             	    combinator129=combinator();
@@ -4359,7 +4314,7 @@
     };
 
     // $ANTLR start "combinator"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:909:1: combinator : ( GREATER ( S )* -> CHILD | PLUS ( S )* -> ADJACENT | S -> DESCENDANT );
+    // CSS.g:909:1: combinator : ( GREATER ( S )* -> CHILD | PLUS ( S )* -> ADJACENT | S -> DESCENDANT );
     public final CSSParser.combinator_return combinator() throws RecognitionException {
         CSSParser.combinator_return retval = new CSSParser.combinator_return();
         retval.start = input.LT(1);
@@ -4382,7 +4337,7 @@
         RewriteRuleTokenStream stream_S=new RewriteRuleTokenStream(adaptor,"token S");
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:910:2: ( GREATER ( S )* -> CHILD | PLUS ( S )* -> ADJACENT | S -> DESCENDANT )
+            // CSS.g:910:2: ( GREATER ( S )* -> CHILD | PLUS ( S )* -> ADJACENT | S -> DESCENDANT )
             int alt64=3;
             switch ( input.LA(1) ) {
             case GREATER:
@@ -4409,12 +4364,12 @@
 
             switch (alt64) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:910:4: GREATER ( S )*
+                    // CSS.g:910:4: GREATER ( S )*
                     {
                     GREATER131=(Token)match(input,GREATER,FOLLOW_GREATER_in_combinator1383);  
                     stream_GREATER.add(GREATER131);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:910:12: ( S )*
+                    // CSS.g:910:12: ( S )*
                     loop62:
                     do {
                         int alt62=2;
@@ -4427,7 +4382,7 @@
 
                         switch (alt62) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:910:12: S
+                    	    // CSS.g:910:12: S
                     	    {
                     	    S132=(Token)match(input,S,FOLLOW_S_in_combinator1385);  
                     	    stream_S.add(S132);
@@ -4449,9 +4404,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 910:15: -> CHILD
@@ -4464,12 +4418,12 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:911:4: PLUS ( S )*
+                    // CSS.g:911:4: PLUS ( S )*
                     {
                     PLUS133=(Token)match(input,PLUS,FOLLOW_PLUS_in_combinator1395);  
                     stream_PLUS.add(PLUS133);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:911:9: ( S )*
+                    // CSS.g:911:9: ( S )*
                     loop63:
                     do {
                         int alt63=2;
@@ -4482,7 +4436,7 @@
 
                         switch (alt63) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:911:9: S
+                    	    // CSS.g:911:9: S
                     	    {
                     	    S134=(Token)match(input,S,FOLLOW_S_in_combinator1397);  
                     	    stream_S.add(S134);
@@ -4504,9 +4458,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 911:12: -> ADJACENT
@@ -4519,7 +4472,7 @@
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:912:4: S
+                    // CSS.g:912:4: S
                     {
                     S135=(Token)match(input,S,FOLLOW_S_in_combinator1407);  
                     stream_S.add(S135);
@@ -4532,9 +4485,8 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 912:6: -> DESCENDANT
@@ -4572,7 +4524,7 @@
     };
 
     // $ANTLR start "selector"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:915:1: selector : ( ( IDENT | ASTERISK ) ( selpart )* ( S )* -> ^( SELECTOR ^( ELEMENT ( IDENT )? ) ( selpart )* ) | ( selpart )+ ( S )* -> ^( SELECTOR ( selpart )+ ) );
+    // CSS.g:915:1: selector : ( ( IDENT | ASTERISK ) ( selpart )* ( S )* -> ^( SELECTOR ^( ELEMENT ( IDENT )? ) ( selpart )* ) | ( selpart )+ ( S )* -> ^( SELECTOR ( selpart )+ ) );
     public final CSSParser.selector_return selector() throws RecognitionException {
         CSSParser.selector_return retval = new CSSParser.selector_return();
         retval.start = input.LT(1);
@@ -4597,7 +4549,7 @@
         RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
         RewriteRuleSubtreeStream stream_selpart=new RewriteRuleSubtreeStream(adaptor,"rule selpart");
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:916:5: ( ( IDENT | ASTERISK ) ( selpart )* ( S )* -> ^( SELECTOR ^( ELEMENT ( IDENT )? ) ( selpart )* ) | ( selpart )+ ( S )* -> ^( SELECTOR ( selpart )+ ) )
+            // CSS.g:916:5: ( ( IDENT | ASTERISK ) ( selpart )* ( S )* -> ^( SELECTOR ^( ELEMENT ( IDENT )? ) ( selpart )* ) | ( selpart )+ ( S )* -> ^( SELECTOR ( selpart )+ ) )
             int alt70=2;
             int LA70_0 = input.LA(1);
 
@@ -4615,9 +4567,9 @@
             }
             switch (alt70) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:916:7: ( IDENT | ASTERISK ) ( selpart )* ( S )*
+                    // CSS.g:916:7: ( IDENT | ASTERISK ) ( selpart )* ( S )*
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:916:7: ( IDENT | ASTERISK )
+                    // CSS.g:916:7: ( IDENT | ASTERISK )
                     int alt65=2;
                     int LA65_0 = input.LA(1);
 
@@ -4635,7 +4587,7 @@
                     }
                     switch (alt65) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:916:8: IDENT
+                            // CSS.g:916:8: IDENT
                             {
                             IDENT136=(Token)match(input,IDENT,FOLLOW_IDENT_in_selector1426);  
                             stream_IDENT.add(IDENT136);
@@ -4644,7 +4596,7 @@
                             }
                             break;
                         case 2 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:916:16: ASTERISK
+                            // CSS.g:916:16: ASTERISK
                             {
                             ASTERISK137=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_selector1430);  
                             stream_ASTERISK.add(ASTERISK137);
@@ -4655,14 +4607,14 @@
 
                     }
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:916:27: ( selpart )*
+                    // CSS.g:916:27: ( selpart )*
                     loop66:
                     do {
                         int alt66=2;
                         alt66 = dfa66.predict(input);
                         switch (alt66) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:916:27: selpart
+                    	    // CSS.g:916:27: selpart
                     	    {
                     	    pushFollow(FOLLOW_selpart_in_selector1434);
                     	    selpart138=selpart();
@@ -4679,14 +4631,14 @@
                         }
                     } while (true);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:916:36: ( S )*
+                    // CSS.g:916:36: ( S )*
                     loop67:
                     do {
                         int alt67=2;
                         alt67 = dfa67.predict(input);
                         switch (alt67) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:916:36: S
+                    	    // CSS.g:916:36: S
                     	    {
                     	    S139=(Token)match(input,S,FOLLOW_S_in_selector1437);  
                     	    stream_S.add(S139);
@@ -4703,29 +4655,28 @@
 
 
                     // AST REWRITE
-                    // elements: selpart, IDENT
+                    // elements: IDENT, selpart
                     // token labels: 
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 917:6: -> ^( SELECTOR ^( ELEMENT ( IDENT )? ) ( selpart )* )
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:917:9: ^( SELECTOR ^( ELEMENT ( IDENT )? ) ( selpart )* )
+                        // CSS.g:917:9: ^( SELECTOR ^( ELEMENT ( IDENT )? ) ( selpart )* )
                         {
                         Object root_1 = (Object)adaptor.nil();
                         root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_1);
 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:917:20: ^( ELEMENT ( IDENT )? )
+                        // CSS.g:917:20: ^( ELEMENT ( IDENT )? )
                         {
                         Object root_2 = (Object)adaptor.nil();
                         root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(ELEMENT, "ELEMENT"), root_2);
 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:917:30: ( IDENT )?
+                        // CSS.g:917:30: ( IDENT )?
                         if ( stream_IDENT.hasNext() ) {
                             adaptor.addChild(root_2, stream_IDENT.nextNode());
 
@@ -4734,7 +4685,7 @@
 
                         adaptor.addChild(root_1, root_2);
                         }
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:917:38: ( selpart )*
+                        // CSS.g:917:38: ( selpart )*
                         while ( stream_selpart.hasNext() ) {
                             adaptor.addChild(root_1, stream_selpart.nextTree());
 
@@ -4750,9 +4701,9 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:918:7: ( selpart )+ ( S )*
+                    // CSS.g:918:7: ( selpart )+ ( S )*
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:918:7: ( selpart )+
+                    // CSS.g:918:7: ( selpart )+
                     int cnt68=0;
                     loop68:
                     do {
@@ -4760,7 +4711,7 @@
                         alt68 = dfa68.predict(input);
                         switch (alt68) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:918:7: selpart
+                    	    // CSS.g:918:7: selpart
                     	    {
                     	    pushFollow(FOLLOW_selpart_in_selector1467);
                     	    selpart140=selpart();
@@ -4781,14 +4732,14 @@
                         cnt68++;
                     } while (true);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:918:16: ( S )*
+                    // CSS.g:918:16: ( S )*
                     loop69:
                     do {
                         int alt69=2;
                         alt69 = dfa69.predict(input);
                         switch (alt69) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:918:16: S
+                    	    // CSS.g:918:16: S
                     	    {
                     	    S141=(Token)match(input,S,FOLLOW_S_in_selector1470);  
                     	    stream_S.add(S141);
@@ -4810,14 +4761,13 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 919:9: -> ^( SELECTOR ( selpart )+ )
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:919:12: ^( SELECTOR ( selpart )+ )
+                        // CSS.g:919:12: ^( SELECTOR ( selpart )+ )
                         {
                         Object root_1 = (Object)adaptor.nil();
                         root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_1);
@@ -4864,7 +4814,7 @@
     };
 
     // $ANTLR start "selpart"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:925:1: selpart : ( HASH | CLASSKEYWORD | LBRACE ( S )* attribute RBRACE -> ^( ATTRIBUTE attribute ) | pseudo | INVALID_SELPART );
+    // CSS.g:925:1: selpart : ( HASH | CLASSKEYWORD | LBRACE ( S )* attribute RBRACE -> ^( ATTRIBUTE attribute ) | pseudo | INVALID_SELPART );
     public final CSSParser.selpart_return selpart() throws RecognitionException {
         CSSParser.selpart_return retval = new CSSParser.selpart_return();
         retval.start = input.LT(1);
@@ -4893,7 +4843,7 @@
         RewriteRuleTokenStream stream_LBRACE=new RewriteRuleTokenStream(adaptor,"token LBRACE");
         RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:926:5: ( HASH | CLASSKEYWORD | LBRACE ( S )* attribute RBRACE -> ^( ATTRIBUTE attribute ) | pseudo | INVALID_SELPART )
+            // CSS.g:926:5: ( HASH | CLASSKEYWORD | LBRACE ( S )* attribute RBRACE -> ^( ATTRIBUTE attribute ) | pseudo | INVALID_SELPART )
             int alt72=5;
             switch ( input.LA(1) ) {
             case HASH:
@@ -4930,7 +4880,7 @@
 
             switch (alt72) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:926:8: HASH
+                    // CSS.g:926:8: HASH
                     {
                     root_0 = (Object)adaptor.nil();
 
@@ -4942,7 +4892,7 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:927:7: CLASSKEYWORD
+                    // CSS.g:927:7: CLASSKEYWORD
                     {
                     root_0 = (Object)adaptor.nil();
 
@@ -4954,12 +4904,12 @@
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:928:6: LBRACE ( S )* attribute RBRACE
+                    // CSS.g:928:6: LBRACE ( S )* attribute RBRACE
                     {
                     LBRACE144=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_selpart1532);  
                     stream_LBRACE.add(LBRACE144);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:928:13: ( S )*
+                    // CSS.g:928:13: ( S )*
                     loop71:
                     do {
                         int alt71=2;
@@ -4972,7 +4922,7 @@
 
                         switch (alt71) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:928:13: S
+                    	    // CSS.g:928:13: S
                     	    {
                     	    S145=(Token)match(input,S,FOLLOW_S_in_selpart1534);  
                     	    stream_S.add(S145);
@@ -5003,14 +4953,13 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
                     // 928:33: -> ^( ATTRIBUTE attribute )
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:928:36: ^( ATTRIBUTE attribute )
+                        // CSS.g:928:36: ^( ATTRIBUTE attribute )
                         {
                         Object root_1 = (Object)adaptor.nil();
                         root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ATTRIBUTE, "ATTRIBUTE"), root_1);
@@ -5026,7 +4975,7 @@
                     }
                     break;
                 case 4 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:929:7: pseudo
+                    // CSS.g:929:7: pseudo
                     {
                     root_0 = (Object)adaptor.nil();
 
@@ -5040,7 +4989,7 @@
                     }
                     break;
                 case 5 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:930:7: INVALID_SELPART
+                    // CSS.g:930:7: INVALID_SELPART
                     {
                     root_0 = (Object)adaptor.nil();
 
@@ -5076,7 +5025,7 @@
     };
 
     // $ANTLR start "attribute"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:936:1: attribute : IDENT ( S )* ( ( EQUALS | INCLUDES | DASHMATCH ) ( S )* ( IDENT | string ) ( S )* )? ;
+    // CSS.g:936:1: attribute : IDENT ( S )* ( ( EQUALS | INCLUDES | DASHMATCH ) ( S )* ( IDENT | string ) ( S )* )? ;
     public final CSSParser.attribute_return attribute() throws RecognitionException {
         CSSParser.attribute_return retval = new CSSParser.attribute_return();
         retval.start = input.LT(1);
@@ -5100,8 +5049,8 @@
         Object S156_tree=null;
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:937:2: ( IDENT ( S )* ( ( EQUALS | INCLUDES | DASHMATCH ) ( S )* ( IDENT | string ) ( S )* )? )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:937:4: IDENT ( S )* ( ( EQUALS | INCLUDES | DASHMATCH ) ( S )* ( IDENT | string ) ( S )* )?
+            // CSS.g:937:2: ( IDENT ( S )* ( ( EQUALS | INCLUDES | DASHMATCH ) ( S )* ( IDENT | string ) ( S )* )? )
+            // CSS.g:937:4: IDENT ( S )* ( ( EQUALS | INCLUDES | DASHMATCH ) ( S )* ( IDENT | string ) ( S )* )?
             {
             root_0 = (Object)adaptor.nil();
 
@@ -5109,7 +5058,7 @@
             IDENT150_tree = (Object)adaptor.create(IDENT150);
             adaptor.addChild(root_0, IDENT150_tree);
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:937:10: ( S )*
+            // CSS.g:937:10: ( S )*
             loop73:
             do {
                 int alt73=2;
@@ -5122,7 +5071,7 @@
 
                 switch (alt73) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:937:10: S
+            	    // CSS.g:937:10: S
             	    {
             	    S151=(Token)match(input,S,FOLLOW_S_in_attribute1589); 
             	    S151_tree = (Object)adaptor.create(S151);
@@ -5137,7 +5086,7 @@
                 }
             } while (true);
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:938:4: ( ( EQUALS | INCLUDES | DASHMATCH ) ( S )* ( IDENT | string ) ( S )* )?
+            // CSS.g:938:4: ( ( EQUALS | INCLUDES | DASHMATCH ) ( S )* ( IDENT | string ) ( S )* )?
             int alt77=2;
             int LA77_0 = input.LA(1);
 
@@ -5146,7 +5095,7 @@
             }
             switch (alt77) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:938:5: ( EQUALS | INCLUDES | DASHMATCH ) ( S )* ( IDENT | string ) ( S )*
+                    // CSS.g:938:5: ( EQUALS | INCLUDES | DASHMATCH ) ( S )* ( IDENT | string ) ( S )*
                     {
                     set152=(Token)input.LT(1);
                     if ( input.LA(1)==INCLUDES||input.LA(1)==EQUALS||input.LA(1)==DASHMATCH ) {
@@ -5159,7 +5108,7 @@
                         throw mse;
                     }
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:938:37: ( S )*
+                    // CSS.g:938:37: ( S )*
                     loop74:
                     do {
                         int alt74=2;
@@ -5172,7 +5121,7 @@
 
                         switch (alt74) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:938:37: S
+                    	    // CSS.g:938:37: S
                     	    {
                     	    S153=(Token)match(input,S,FOLLOW_S_in_attribute1608); 
                     	    S153_tree = (Object)adaptor.create(S153);
@@ -5187,7 +5136,7 @@
                         }
                     } while (true);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:938:40: ( IDENT | string )
+                    // CSS.g:938:40: ( IDENT | string )
                     int alt75=2;
                     int LA75_0 = input.LA(1);
 
@@ -5205,7 +5154,7 @@
                     }
                     switch (alt75) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:938:41: IDENT
+                            // CSS.g:938:41: IDENT
                             {
                             IDENT154=(Token)match(input,IDENT,FOLLOW_IDENT_in_attribute1612); 
                             IDENT154_tree = (Object)adaptor.create(IDENT154);
@@ -5215,7 +5164,7 @@
                             }
                             break;
                         case 2 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:938:49: string
+                            // CSS.g:938:49: string
                             {
                             pushFollow(FOLLOW_string_in_attribute1616);
                             string155=string();
@@ -5229,7 +5178,7 @@
 
                     }
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:938:57: ( S )*
+                    // CSS.g:938:57: ( S )*
                     loop76:
                     do {
                         int alt76=2;
@@ -5242,7 +5191,7 @@
 
                         switch (alt76) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:938:57: S
+                    	    // CSS.g:938:57: S
                     	    {
                     	    S156=(Token)match(input,S,FOLLOW_S_in_attribute1619); 
                     	    S156_tree = (Object)adaptor.create(S156);
@@ -5290,156 +5239,151 @@
     };
 
     // $ANTLR start "pseudo"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:941:1: pseudo : COLON ( COLON )? ( IDENT | FUNCTION ( S )* IDENT ( S )* RPAREN ) -> ^( PSEUDO ( FUNCTION )? IDENT ) ;
+    // CSS.g:941:1: pseudo : pseudocolon ( IDENT | FUNCTION ( IDENT | NUMBER ) RPAREN ) ;
     public final CSSParser.pseudo_return pseudo() throws RecognitionException {
         CSSParser.pseudo_return retval = new CSSParser.pseudo_return();
         retval.start = input.LT(1);
 
         Object root_0 = null;
 
-        Token COLON157=null;
-        Token COLON158=null;
-        Token IDENT159=null;
-        Token FUNCTION160=null;
-        Token S161=null;
-        Token IDENT162=null;
-        Token S163=null;
-        Token RPAREN164=null;
+        Token IDENT158=null;
+        Token FUNCTION159=null;
+        Token set160=null;
+        Token RPAREN161=null;
+        CSSParser.pseudocolon_return pseudocolon157 = null;
 
-        Object COLON157_tree=null;
-        Object COLON158_tree=null;
-        Object IDENT159_tree=null;
-        Object FUNCTION160_tree=null;
-        Object S161_tree=null;
-        Object IDENT162_tree=null;
-        Object S163_tree=null;
-        Object RPAREN164_tree=null;
-        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
-        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
-        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
-        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
-        RewriteRuleTokenStream stream_S=new RewriteRuleTokenStream(adaptor,"token S");
 
+        Object IDENT158_tree=null;
+        Object FUNCTION159_tree=null;
+        Object set160_tree=null;
+        Object RPAREN161_tree=null;
+
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:942:2: ( COLON ( COLON )? ( IDENT | FUNCTION ( S )* IDENT ( S )* RPAREN ) -> ^( PSEUDO ( FUNCTION )? IDENT ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:942:4: COLON ( COLON )? ( IDENT | FUNCTION ( S )* IDENT ( S )* RPAREN )
+            // CSS.g:942:2: ( pseudocolon ( IDENT | FUNCTION ( IDENT | NUMBER ) RPAREN ) )
+            // CSS.g:942:4: pseudocolon ( IDENT | FUNCTION ( IDENT | NUMBER ) RPAREN )
             {
-            COLON157=(Token)match(input,COLON,FOLLOW_COLON_in_pseudo1633);  
-            stream_COLON.add(COLON157);
+            root_0 = (Object)adaptor.nil();
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:942:10: ( COLON )?
+            pushFollow(FOLLOW_pseudocolon_in_pseudo1633);
+            pseudocolon157=pseudocolon();
+
+            state._fsp--;
+
+            root_0 = (Object)adaptor.becomeRoot(pseudocolon157.getTree(), root_0);
+            // CSS.g:942:17: ( IDENT | FUNCTION ( IDENT | NUMBER ) RPAREN )
             int alt78=2;
             int LA78_0 = input.LA(1);
 
-            if ( (LA78_0==COLON) ) {
+            if ( (LA78_0==IDENT) ) {
                 alt78=1;
             }
-            switch (alt78) {
-                case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:942:10: COLON
-                    {
-                    COLON158=(Token)match(input,COLON,FOLLOW_COLON_in_pseudo1635);  
-                    stream_COLON.add(COLON158);
-
-
-                    }
-                    break;
-
+            else if ( (LA78_0==FUNCTION) ) {
+                alt78=2;
             }
-
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:942:17: ( IDENT | FUNCTION ( S )* IDENT ( S )* RPAREN )
-            int alt81=2;
-            int LA81_0 = input.LA(1);
-
-            if ( (LA81_0==IDENT) ) {
-                alt81=1;
-            }
-            else if ( (LA81_0==FUNCTION) ) {
-                alt81=2;
-            }
             else {
                 NoViableAltException nvae =
-                    new NoViableAltException("", 81, 0, input);
+                    new NoViableAltException("", 78, 0, input);
 
                 throw nvae;
             }
-            switch (alt81) {
+            switch (alt78) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:942:18: IDENT
+                    // CSS.g:942:18: IDENT
                     {
-                    IDENT159=(Token)match(input,IDENT,FOLLOW_IDENT_in_pseudo1639);  
-                    stream_IDENT.add(IDENT159);
+                    IDENT158=(Token)match(input,IDENT,FOLLOW_IDENT_in_pseudo1637); 
+                    IDENT158_tree = (Object)adaptor.create(IDENT158);
+                    adaptor.addChild(root_0, IDENT158_tree);
 
 
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:942:26: FUNCTION ( S )* IDENT ( S )* RPAREN
+                    // CSS.g:942:26: FUNCTION ( IDENT | NUMBER ) RPAREN
                     {
-                    FUNCTION160=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_pseudo1643);  
-                    stream_FUNCTION.add(FUNCTION160);
+                    FUNCTION159=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_pseudo1641); 
+                    FUNCTION159_tree = (Object)adaptor.create(FUNCTION159);
+                    adaptor.addChild(root_0, FUNCTION159_tree);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:942:35: ( S )*
-                    loop79:
-                    do {
-                        int alt79=2;
-                        int LA79_0 = input.LA(1);
+                    set160=(Token)input.LT(1);
+                    if ( input.LA(1)==IDENT||input.LA(1)==NUMBER ) {
+                        input.consume();
+                        adaptor.addChild(root_0, (Object)adaptor.create(set160));
+                        state.errorRecovery=false;
+                    }
+                    else {
+                        MismatchedSetException mse = new MismatchedSetException(null,input);
+                        throw mse;
+                    }
 
-                        if ( (LA79_0==S) ) {
-                            alt79=1;
-                        }
+                    RPAREN161=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pseudo1651); 
 
+                    }
+                    break;
 
-                        switch (alt79) {
-                    	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:942:35: S
-                    	    {
-                    	    S161=(Token)match(input,S,FOLLOW_S_in_pseudo1645);  
-                    	    stream_S.add(S161);
+            }
 
 
-                    	    }
-                    	    break;
+            }
 
-                    	default :
-                    	    break loop79;
-                        }
-                    } while (true);
+            retval.stop = input.LT(-1);
 
-                    IDENT162=(Token)match(input,IDENT,FOLLOW_IDENT_in_pseudo1649);  
-                    stream_IDENT.add(IDENT162);
+            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
+            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:942:45: ( S )*
-                    loop80:
-                    do {
-                        int alt80=2;
-                        int LA80_0 = input.LA(1);
+        }
+        catch (RecognitionException re) {
 
-                        if ( (LA80_0==S) ) {
-                            alt80=1;
-                        }
+                 retval.tree = invalidFallback(CSSLexer.INVALID_SELPART, "INVALID_SELPART", re);
+              
+        }
+        finally {
+        }
+        return retval;
+    }
+    // $ANTLR end "pseudo"
 
+    public static class pseudocolon_return extends ParserRuleReturnScope {
+        Object tree;
+        public Object getTree() { return tree; }
+    };
 
-                        switch (alt80) {
-                    	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:942:45: S
-                    	    {
-                    	    S163=(Token)match(input,S,FOLLOW_S_in_pseudo1651);  
-                    	    stream_S.add(S163);
+    // $ANTLR start "pseudocolon"
+    // CSS.g:948:1: pseudocolon : COLON ( COLON )? -> PSEUDO ;
+    public final CSSParser.pseudocolon_return pseudocolon() throws RecognitionException {
+        CSSParser.pseudocolon_return retval = new CSSParser.pseudocolon_return();
+        retval.start = input.LT(1);
 
+        Object root_0 = null;
 
-                    	    }
-                    	    break;
+        Token COLON162=null;
+        Token COLON163=null;
 
-                    	default :
-                    	    break loop80;
-                        }
-                    } while (true);
+        Object COLON162_tree=null;
+        Object COLON163_tree=null;
+        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
 
-                    RPAREN164=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_pseudo1654);  
-                    stream_RPAREN.add(RPAREN164);
+        try {
+            // CSS.g:949:2: ( COLON ( COLON )? -> PSEUDO )
+            // CSS.g:949:4: COLON ( COLON )?
+            {
+            COLON162=(Token)match(input,COLON,FOLLOW_COLON_in_pseudocolon1672);  
+            stream_COLON.add(COLON162);
 
+            // CSS.g:949:10: ( COLON )?
+            int alt79=2;
+            int LA79_0 = input.LA(1);
 
+            if ( (LA79_0==COLON) ) {
+                alt79=1;
+            }
+            switch (alt79) {
+                case 1 :
+                    // CSS.g:949:10: COLON
+                    {
+                    COLON163=(Token)match(input,COLON,FOLLOW_COLON_in_pseudocolon1674);  
+                    stream_COLON.add(COLON163);
+
+
                     }
                     break;
 
@@ -5448,34 +5392,19 @@
 
 
             // AST REWRITE
-            // elements: IDENT, FUNCTION
+            // elements: 
             // token labels: 
             // rule labels: retval
             // token list labels: 
             // rule list labels: 
-            // wildcard labels: 
             retval.tree = root_0;
-            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
             root_0 = (Object)adaptor.nil();
-            // 943:3: -> ^( PSEUDO ( FUNCTION )? IDENT )
+            // 949:17: -> PSEUDO
             {
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:943:6: ^( PSEUDO ( FUNCTION )? IDENT )
-                {
-                Object root_1 = (Object)adaptor.nil();
-                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PSEUDO, "PSEUDO"), root_1);
+                adaptor.addChild(root_0, (Object)adaptor.create(PSEUDO, "PSEUDO"));
 
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:943:15: ( FUNCTION )?
-                if ( stream_FUNCTION.hasNext() ) {
-                    adaptor.addChild(root_1, stream_FUNCTION.nextNode());
-
-                }
-                stream_FUNCTION.reset();
-                adaptor.addChild(root_1, stream_IDENT.nextNode());
-
-                adaptor.addChild(root_0, root_1);
-                }
-
             }
 
             retval.tree = root_0;
@@ -5488,15 +5417,16 @@
 
         }
         catch (RecognitionException re) {
+            reportError(re);
+            recover(input,re);
+    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);
 
-                 retval.tree = invalidFallback(CSSLexer.INVALID_SELPART, "INVALID_SELPART", re);
-              
         }
         finally {
         }
         return retval;
     }
-    // $ANTLR end "pseudo"
+    // $ANTLR end "pseudocolon"
 
     public static class string_return extends ParserRuleReturnScope {
         Object tree;
@@ -5504,27 +5434,27 @@
     };
 
     // $ANTLR start "string"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:949:1: string : ( STRING | INVALID_STRING );
+    // CSS.g:952:1: string : ( STRING | INVALID_STRING );
     public final CSSParser.string_return string() throws RecognitionException {
         CSSParser.string_return retval = new CSSParser.string_return();
         retval.start = input.LT(1);
 
         Object root_0 = null;
 
-        Token set165=null;
+        Token set164=null;
 
-        Object set165_tree=null;
+        Object set164_tree=null;
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:950:2: ( STRING | INVALID_STRING )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:
+            // CSS.g:953:2: ( STRING | INVALID_STRING )
+            // CSS.g:
             {
             root_0 = (Object)adaptor.nil();
 
-            set165=(Token)input.LT(1);
+            set164=(Token)input.LT(1);
             if ( input.LA(1)==INVALID_STRING||input.LA(1)==STRING ) {
                 input.consume();
-                adaptor.addChild(root_0, (Object)adaptor.create(set165));
+                adaptor.addChild(root_0, (Object)adaptor.create(set164));
                 state.errorRecovery=false;
             }
             else {
@@ -5559,82 +5489,82 @@
     };
 
     // $ANTLR start "any"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:955:1: any : ( IDENT -> IDENT | CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | ASTERISK -> ASTERISK | FUNCTION ( S )* ( any )* RPAREN -> ^( FUNCTION ( any )* ) | DASHMATCH -> DASHMATCH | LPAREN ( any )* RPAREN -> ^( PARENBLOCK ( any )* ) | LBRACE ( any )* RBRACE -> ^( BRACEBLOCK ( any )* ) ) ( S )* ;
+    // CSS.g:958:1: any : ( IDENT -> IDENT | CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | ASTERISK -> ASTERISK | FUNCTION ( S )* ( any )* RPAREN -> ^( FUNCTION ( any )* ) | DASHMATCH -> DASHMATCH | LPAREN ( any )* RPAREN -> ^( PARENBLOCK ( any )* ) | LBRACE ( any )* RBRACE -> ^( BRACEBLOCK ( any )* ) ) ( S )* ;
     public final CSSParser.any_return any() throws RecognitionException {
         CSSParser.any_return retval = new CSSParser.any_return();
         retval.start = input.LT(1);
 
         Object root_0 = null;
 
-        Token IDENT166=null;
-        Token CLASSKEYWORD167=null;
-        Token NUMBER168=null;
-        Token PERCENTAGE169=null;
-        Token DIMENSION170=null;
-        Token URI172=null;
-        Token HASH173=null;
-        Token UNIRANGE174=null;
-        Token INCLUDES175=null;
-        Token COLON176=null;
-        Token COMMA177=null;
-        Token GREATER178=null;
-        Token LESS179=null;
-        Token QUESTION180=null;
-        Token PERCENT181=null;
-        Token EQUALS182=null;
-        Token SLASH183=null;
-        Token EXCLAMATION184=null;
-        Token MINUS185=null;
-        Token PLUS186=null;
-        Token ASTERISK187=null;
-        Token FUNCTION188=null;
-        Token S189=null;
-        Token RPAREN191=null;
-        Token DASHMATCH192=null;
-        Token LPAREN193=null;
-        Token RPAREN195=null;
-        Token LBRACE196=null;
-        Token RBRACE198=null;
-        Token S199=null;
-        CSSParser.string_return string171 = null;
+        Token IDENT165=null;
+        Token CLASSKEYWORD166=null;
+        Token NUMBER167=null;
+        Token PERCENTAGE168=null;
+        Token DIMENSION169=null;
+        Token URI171=null;
+        Token HASH172=null;
+        Token UNIRANGE173=null;
+        Token INCLUDES174=null;
+        Token COLON175=null;
+        Token COMMA176=null;
+        Token GREATER177=null;
+        Token LESS178=null;
+        Token QUESTION179=null;
+        Token PERCENT180=null;
+        Token EQUALS181=null;
+        Token SLASH182=null;
+        Token EXCLAMATION183=null;
+        Token MINUS184=null;
+        Token PLUS185=null;
+        Token ASTERISK186=null;
+        Token FUNCTION187=null;
+        Token S188=null;
+        Token RPAREN190=null;
+        Token DASHMATCH191=null;
+        Token LPAREN192=null;
+        Token RPAREN194=null;
+        Token LBRACE195=null;
+        Token RBRACE197=null;
+        Token S198=null;
+        CSSParser.string_return string170 = null;
 
-        CSSParser.any_return any190 = null;
+        CSSParser.any_return any189 = null;
 
-        CSSParser.any_return any194 = null;
+        CSSParser.any_return any193 = null;
 
-        CSSParser.any_return any197 = null;
+        CSSParser.any_return any196 = null;
 
 
-        Object IDENT166_tree=null;
-        Object CLASSKEYWORD167_tree=null;
-        Object NUMBER168_tree=null;
-        Object PERCENTAGE169_tree=null;
-        Object DIMENSION170_tree=null;
-        Object URI172_tree=null;
-        Object HASH173_tree=null;
-        Object UNIRANGE174_tree=null;
-        Object INCLUDES175_tree=null;
-        Object COLON176_tree=null;
-        Object COMMA177_tree=null;
-        Object GREATER178_tree=null;
-        Object LESS179_tree=null;
-        Object QUESTION180_tree=null;
-        Object PERCENT181_tree=null;
-        Object EQUALS182_tree=null;
-        Object SLASH183_tree=null;
-        Object EXCLAMATION184_tree=null;
-        Object MINUS185_tree=null;
-        Object PLUS186_tree=null;
-        Object ASTERISK187_tree=null;
-        Object FUNCTION188_tree=null;
-        Object S189_tree=null;
-        Object RPAREN191_tree=null;
-        Object DASHMATCH192_tree=null;
-        Object LPAREN193_tree=null;
-        Object RPAREN195_tree=null;
-        Object LBRACE196_tree=null;
-        Object RBRACE198_tree=null;
-        Object S199_tree=null;
+        Object IDENT165_tree=null;
+        Object CLASSKEYWORD166_tree=null;
+        Object NUMBER167_tree=null;
+        Object PERCENTAGE168_tree=null;
+        Object DIMENSION169_tree=null;
+        Object URI171_tree=null;
+        Object HASH172_tree=null;
+        Object UNIRANGE173_tree=null;
+        Object INCLUDES174_tree=null;
+        Object COLON175_tree=null;
+        Object COMMA176_tree=null;
+        Object GREATER177_tree=null;
+        Object LESS178_tree=null;
+        Object QUESTION179_tree=null;
+        Object PERCENT180_tree=null;
+        Object EQUALS181_tree=null;
+        Object SLASH182_tree=null;
+        Object EXCLAMATION183_tree=null;
+        Object MINUS184_tree=null;
+        Object PLUS185_tree=null;
+        Object ASTERISK186_tree=null;
+        Object FUNCTION187_tree=null;
+        Object S188_tree=null;
+        Object RPAREN190_tree=null;
+        Object DASHMATCH191_tree=null;
+        Object LPAREN192_tree=null;
+        Object RPAREN194_tree=null;
+        Object LBRACE195_tree=null;
+        Object RBRACE197_tree=null;
+        Object S198_tree=null;
         RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
         RewriteRuleTokenStream stream_PERCENT=new RewriteRuleTokenStream(adaptor,"token PERCENT");
         RewriteRuleTokenStream stream_RBRACE=new RewriteRuleTokenStream(adaptor,"token RBRACE");
@@ -5666,18 +5596,18 @@
         RewriteRuleSubtreeStream stream_string=new RewriteRuleSubtreeStream(adaptor,"rule string");
         RewriteRuleSubtreeStream stream_any=new RewriteRuleSubtreeStream(adaptor,"rule any");
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:956:2: ( ( IDENT -> IDENT | CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | ASTERISK -> ASTERISK | FUNCTION ( S )* ( any )* RPAREN -> ^( FUNCTION ( any )* ) | DASHMATCH -> DASHMATCH | LPAREN ( any )* RPAREN -> ^( PARENBLOCK ( any )* ) | LBRACE ( any )* RBRACE -> ^( BRACEBLOCK ( any )* ) ) ( S )* )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:956:4: ( IDENT -> IDENT | CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | ASTERISK -> ASTERISK | FUNCTION ( S )* ( any )* RPAREN -> ^( FUNCTION ( any )* ) | DASHMATCH -> DASHMATCH | LPAREN ( any )* RPAREN -> ^( PARENBLOCK ( any )* ) | LBRACE ( any )* RBRACE -> ^( BRACEBLOCK ( any )* ) ) ( S )*
+            // CSS.g:959:2: ( ( IDENT -> IDENT | CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | ASTERISK -> ASTERISK | FUNCTION ( S )* ( any )* RPAREN -> ^( FUNCTION ( any )* ) | DASHMATCH -> DASHMATCH | LPAREN ( any )* RPAREN -> ^( PARENBLOCK ( any )* ) | LBRACE ( any )* RBRACE -> ^( BRACEBLOCK ( any )* ) ) ( S )* )
+            // CSS.g:959:4: ( IDENT -> IDENT | CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | ASTERISK -> ASTERISK | FUNCTION ( S )* ( any )* RPAREN -> ^( FUNCTION ( any )* ) | DASHMATCH -> DASHMATCH | LPAREN ( any )* RPAREN -> ^( PARENBLOCK ( any )* ) | LBRACE ( any )* RBRACE -> ^( BRACEBLOCK ( any )* ) ) ( S )*
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:956:4: ( IDENT -> IDENT | CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | ASTERISK -> ASTERISK | FUNCTION ( S )* ( any )* RPAREN -> ^( FUNCTION ( any )* ) | DASHMATCH -> DASHMATCH | LPAREN ( any )* RPAREN -> ^( PARENBLOCK ( any )* ) | LBRACE ( any )* RBRACE -> ^( BRACEBLOCK ( any )* ) )
-            int alt86=26;
-            alt86 = dfa86.predict(input);
-            switch (alt86) {
+            // CSS.g:959:4: ( IDENT -> IDENT | CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | ASTERISK -> ASTERISK | FUNCTION ( S )* ( any )* RPAREN -> ^( FUNCTION ( any )* ) | DASHMATCH -> DASHMATCH | LPAREN ( any )* RPAREN -> ^( PARENBLOCK ( any )* ) | LBRACE ( any )* RBRACE -> ^( BRACEBLOCK ( any )* ) )
+            int alt84=26;
+            alt84 = dfa84.predict(input);
+            switch (alt84) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:956:6: IDENT
+                    // CSS.g:959:6: IDENT
                     {
-                    IDENT166=(Token)match(input,IDENT,FOLLOW_IDENT_in_any1708);  
-                    stream_IDENT.add(IDENT166);
+                    IDENT165=(Token)match(input,IDENT,FOLLOW_IDENT_in_any1711);  
+                    stream_IDENT.add(IDENT165);
 
 
 
@@ -5687,12 +5617,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 956:12: -> IDENT
+                    // 959:12: -> IDENT
                     {
                         adaptor.addChild(root_0, stream_IDENT.nextNode());
 
@@ -5702,10 +5631,10 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:957:6: CLASSKEYWORD
+                    // CSS.g:960:6: CLASSKEYWORD
                     {
-                    CLASSKEYWORD167=(Token)match(input,CLASSKEYWORD,FOLLOW_CLASSKEYWORD_in_any1719);  
-                    stream_CLASSKEYWORD.add(CLASSKEYWORD167);
+                    CLASSKEYWORD166=(Token)match(input,CLASSKEYWORD,FOLLOW_CLASSKEYWORD_in_any1722);  
+                    stream_CLASSKEYWORD.add(CLASSKEYWORD166);
 
 
 
@@ -5715,12 +5644,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 957:19: -> CLASSKEYWORD
+                    // 960:19: -> CLASSKEYWORD
                     {
                         adaptor.addChild(root_0, stream_CLASSKEYWORD.nextNode());
 
@@ -5730,10 +5658,10 @@
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:958:6: NUMBER
+                    // CSS.g:961:6: NUMBER
                     {
-                    NUMBER168=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_any1730);  
-                    stream_NUMBER.add(NUMBER168);
+                    NUMBER167=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_any1733);  
+                    stream_NUMBER.add(NUMBER167);
 
 
 
@@ -5743,12 +5671,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 958:13: -> NUMBER
+                    // 961:13: -> NUMBER
                     {
                         adaptor.addChild(root_0, stream_NUMBER.nextNode());
 
@@ -5758,10 +5685,10 @@
                     }
                     break;
                 case 4 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:959:6: PERCENTAGE
+                    // CSS.g:962:6: PERCENTAGE
                     {
-                    PERCENTAGE169=(Token)match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_any1741);  
-                    stream_PERCENTAGE.add(PERCENTAGE169);
+                    PERCENTAGE168=(Token)match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_any1744);  
+                    stream_PERCENTAGE.add(PERCENTAGE168);
 
 
 
@@ -5771,12 +5698,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 959:17: -> PERCENTAGE
+                    // 962:17: -> PERCENTAGE
                     {
                         adaptor.addChild(root_0, stream_PERCENTAGE.nextNode());
 
@@ -5786,10 +5712,10 @@
                     }
                     break;
                 case 5 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:960:6: DIMENSION
+                    // CSS.g:963:6: DIMENSION
                     {
-                    DIMENSION170=(Token)match(input,DIMENSION,FOLLOW_DIMENSION_in_any1751);  
-                    stream_DIMENSION.add(DIMENSION170);
+                    DIMENSION169=(Token)match(input,DIMENSION,FOLLOW_DIMENSION_in_any1754);  
+                    stream_DIMENSION.add(DIMENSION169);
 
 
 
@@ -5799,12 +5725,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 960:16: -> DIMENSION
+                    // 963:16: -> DIMENSION
                     {
                         adaptor.addChild(root_0, stream_DIMENSION.nextNode());
 
@@ -5814,14 +5739,14 @@
                     }
                     break;
                 case 6 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:961:6: string
+                    // CSS.g:964:6: string
                     {
-                    pushFollow(FOLLOW_string_in_any1762);
-                    string171=string();
+                    pushFollow(FOLLOW_string_in_any1765);
+                    string170=string();
 
                     state._fsp--;
 
-                    stream_string.add(string171.getTree());
+                    stream_string.add(string170.getTree());
 
 
                     // AST REWRITE
@@ -5830,12 +5755,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 961:13: -> string
+                    // 964:13: -> string
                     {
                         adaptor.addChild(root_0, stream_string.nextTree());
 
@@ -5845,10 +5769,10 @@
                     }
                     break;
                 case 7 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:962:9: URI
+                    // CSS.g:965:9: URI
                     {
-                    URI172=(Token)match(input,URI,FOLLOW_URI_in_any1776);  
-                    stream_URI.add(URI172);
+                    URI171=(Token)match(input,URI,FOLLOW_URI_in_any1779);  
+                    stream_URI.add(URI171);
 
 
 
@@ -5858,12 +5782,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 962:16: -> URI
+                    // 965:16: -> URI
                     {
                         adaptor.addChild(root_0, stream_URI.nextNode());
 
@@ -5873,10 +5796,10 @@
                     }
                     break;
                 case 8 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:963:9: HASH
+                    // CSS.g:966:9: HASH
                     {
-                    HASH173=(Token)match(input,HASH,FOLLOW_HASH_in_any1793);  
-                    stream_HASH.add(HASH173);
+                    HASH172=(Token)match(input,HASH,FOLLOW_HASH_in_any1796);  
+                    stream_HASH.add(HASH172);
 
 
 
@@ -5886,12 +5809,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 963:14: -> HASH
+                    // 966:14: -> HASH
                     {
                         adaptor.addChild(root_0, stream_HASH.nextNode());
 
@@ -5901,10 +5823,10 @@
                     }
                     break;
                 case 9 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:964:9: UNIRANGE
+                    // CSS.g:967:9: UNIRANGE
                     {
-                    UNIRANGE174=(Token)match(input,UNIRANGE,FOLLOW_UNIRANGE_in_any1807);  
-                    stream_UNIRANGE.add(UNIRANGE174);
+                    UNIRANGE173=(Token)match(input,UNIRANGE,FOLLOW_UNIRANGE_in_any1810);  
+                    stream_UNIRANGE.add(UNIRANGE173);
 
 
 
@@ -5914,12 +5836,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 964:18: -> UNIRANGE
+                    // 967:18: -> UNIRANGE
                     {
                         adaptor.addChild(root_0, stream_UNIRANGE.nextNode());
 
@@ -5929,10 +5850,10 @@
                     }
                     break;
                 case 10 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:965:9: INCLUDES
+                    // CSS.g:968:9: INCLUDES
                     {
-                    INCLUDES175=(Token)match(input,INCLUDES,FOLLOW_INCLUDES_in_any1821);  
-                    stream_INCLUDES.add(INCLUDES175);
+                    INCLUDES174=(Token)match(input,INCLUDES,FOLLOW_INCLUDES_in_any1824);  
+                    stream_INCLUDES.add(INCLUDES174);
 
 
 
@@ -5942,12 +5863,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 965:18: -> INCLUDES
+                    // 968:18: -> INCLUDES
                     {
                         adaptor.addChild(root_0, stream_INCLUDES.nextNode());
 
@@ -5957,10 +5877,10 @@
                     }
                     break;
                 case 11 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:966:9: COLON
+                    // CSS.g:969:9: COLON
                     {
-                    COLON176=(Token)match(input,COLON,FOLLOW_COLON_in_any1835);  
-                    stream_COLON.add(COLON176);
+                    COLON175=(Token)match(input,COLON,FOLLOW_COLON_in_any1838);  
+                    stream_COLON.add(COLON175);
 
 
 
@@ -5970,12 +5890,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 966:15: -> COLON
+                    // 969:15: -> COLON
                     {
                         adaptor.addChild(root_0, stream_COLON.nextNode());
 
@@ -5985,10 +5904,10 @@
                     }
                     break;
                 case 12 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:967:9: COMMA
+                    // CSS.g:970:9: COMMA
                     {
-                    COMMA177=(Token)match(input,COMMA,FOLLOW_COMMA_in_any1849);  
-                    stream_COMMA.add(COMMA177);
+                    COMMA176=(Token)match(input,COMMA,FOLLOW_COMMA_in_any1852);  
+                    stream_COMMA.add(COMMA176);
 
 
 
@@ -5998,12 +5917,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 967:15: -> COMMA
+                    // 970:15: -> COMMA
                     {
                         adaptor.addChild(root_0, stream_COMMA.nextNode());
 
@@ -6013,10 +5931,10 @@
                     }
                     break;
                 case 13 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:968:9: GREATER
+                    // CSS.g:971:9: GREATER
                     {
-                    GREATER178=(Token)match(input,GREATER,FOLLOW_GREATER_in_any1863);  
-                    stream_GREATER.add(GREATER178);
+                    GREATER177=(Token)match(input,GREATER,FOLLOW_GREATER_in_any1866);  
+                    stream_GREATER.add(GREATER177);
 
 
 
@@ -6026,12 +5944,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 968:17: -> GREATER
+                    // 971:17: -> GREATER
                     {
                         adaptor.addChild(root_0, stream_GREATER.nextNode());
 
@@ -6041,10 +5958,10 @@
                     }
                     break;
                 case 14 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:969:9: LESS
+                    // CSS.g:972:9: LESS
                     {
-                    LESS179=(Token)match(input,LESS,FOLLOW_LESS_in_any1877);  
-                    stream_LESS.add(LESS179);
+                    LESS178=(Token)match(input,LESS,FOLLOW_LESS_in_any1880);  
+                    stream_LESS.add(LESS178);
 
 
 
@@ -6054,12 +5971,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 969:14: -> LESS
+                    // 972:14: -> LESS
                     {
                         adaptor.addChild(root_0, stream_LESS.nextNode());
 
@@ -6069,10 +5985,10 @@
                     }
                     break;
                 case 15 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:970:9: QUESTION
+                    // CSS.g:973:9: QUESTION
                     {
-                    QUESTION180=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_any1891);  
-                    stream_QUESTION.add(QUESTION180);
+                    QUESTION179=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_any1894);  
+                    stream_QUESTION.add(QUESTION179);
 
 
 
@@ -6082,12 +5998,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 970:18: -> QUESTION
+                    // 973:18: -> QUESTION
                     {
                         adaptor.addChild(root_0, stream_QUESTION.nextNode());
 
@@ -6097,10 +6012,10 @@
                     }
                     break;
                 case 16 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:971:9: PERCENT
+                    // CSS.g:974:9: PERCENT
                     {
-                    PERCENT181=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_any1905);  
-                    stream_PERCENT.add(PERCENT181);
+                    PERCENT180=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_any1908);  
+                    stream_PERCENT.add(PERCENT180);
 
 
 
@@ -6110,12 +6025,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 971:17: -> PERCENT
+                    // 974:17: -> PERCENT
                     {
                         adaptor.addChild(root_0, stream_PERCENT.nextNode());
 
@@ -6125,10 +6039,10 @@
                     }
                     break;
                 case 17 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:972:9: EQUALS
+                    // CSS.g:975:9: EQUALS
                     {
-                    EQUALS182=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_any1919);  
-                    stream_EQUALS.add(EQUALS182);
+                    EQUALS181=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_any1922);  
+                    stream_EQUALS.add(EQUALS181);
 
 
 
@@ -6138,12 +6052,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 972:16: -> EQUALS
+                    // 975:16: -> EQUALS
                     {
                         adaptor.addChild(root_0, stream_EQUALS.nextNode());
 
@@ -6153,10 +6066,10 @@
                     }
                     break;
                 case 18 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:973:9: SLASH
+                    // CSS.g:976:9: SLASH
                     {
-                    SLASH183=(Token)match(input,SLASH,FOLLOW_SLASH_in_any1933);  
-                    stream_SLASH.add(SLASH183);
+                    SLASH182=(Token)match(input,SLASH,FOLLOW_SLASH_in_any1936);  
+                    stream_SLASH.add(SLASH182);
 
 
 
@@ -6166,12 +6079,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 973:15: -> SLASH
+                    // 976:15: -> SLASH
                     {
                         adaptor.addChild(root_0, stream_SLASH.nextNode());
 
@@ -6181,10 +6093,10 @@
                     }
                     break;
                 case 19 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:974:9: EXCLAMATION
+                    // CSS.g:977:9: EXCLAMATION
                     {
-                    EXCLAMATION184=(Token)match(input,EXCLAMATION,FOLLOW_EXCLAMATION_in_any1947);  
-                    stream_EXCLAMATION.add(EXCLAMATION184);
+                    EXCLAMATION183=(Token)match(input,EXCLAMATION,FOLLOW_EXCLAMATION_in_any1950);  
+                    stream_EXCLAMATION.add(EXCLAMATION183);
 
 
 
@@ -6194,12 +6106,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 974:21: -> EXCLAMATION
+                    // 977:21: -> EXCLAMATION
                     {
                         adaptor.addChild(root_0, stream_EXCLAMATION.nextNode());
 
@@ -6209,10 +6120,10 @@
                     }
                     break;
                 case 20 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:975:6: MINUS
+                    // CSS.g:978:6: MINUS
                     {
-                    MINUS185=(Token)match(input,MINUS,FOLLOW_MINUS_in_any1958);  
-                    stream_MINUS.add(MINUS185);
+                    MINUS184=(Token)match(input,MINUS,FOLLOW_MINUS_in_any1961);  
+                    stream_MINUS.add(MINUS184);
 
 
 
@@ -6222,12 +6133,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 975:12: -> MINUS
+                    // 978:12: -> MINUS
                     {
                         adaptor.addChild(root_0, stream_MINUS.nextNode());
 
@@ -6237,10 +6147,10 @@
                     }
                     break;
                 case 21 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:976:6: PLUS
+                    // CSS.g:979:6: PLUS
                     {
-                    PLUS186=(Token)match(input,PLUS,FOLLOW_PLUS_in_any1969);  
-                    stream_PLUS.add(PLUS186);
+                    PLUS185=(Token)match(input,PLUS,FOLLOW_PLUS_in_any1972);  
+                    stream_PLUS.add(PLUS185);
 
 
 
@@ -6250,12 +6160,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 976:11: -> PLUS
+                    // 979:11: -> PLUS
                     {
                         adaptor.addChild(root_0, stream_PLUS.nextNode());
 
@@ -6265,10 +6174,10 @@
                     }
                     break;
                 case 22 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:977:6: ASTERISK
+                    // CSS.g:980:6: ASTERISK
                     {
-                    ASTERISK187=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_any1980);  
-                    stream_ASTERISK.add(ASTERISK187);
+                    ASTERISK186=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_any1983);  
+                    stream_ASTERISK.add(ASTERISK186);
 
 
 
@@ -6278,12 +6187,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 977:15: -> ASTERISK
+                    // 980:15: -> ASTERISK
                     {
                         adaptor.addChild(root_0, stream_ASTERISK.nextNode());
 
@@ -6293,58 +6201,58 @@
                     }
                     break;
                 case 23 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:978:9: FUNCTION ( S )* ( any )* RPAREN
+                    // CSS.g:981:9: FUNCTION ( S )* ( any )* RPAREN
                     {
-                    FUNCTION188=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_any1997);  
-                    stream_FUNCTION.add(FUNCTION188);
+                    FUNCTION187=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_any2000);  
+                    stream_FUNCTION.add(FUNCTION187);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:978:18: ( S )*
-                    loop82:
+                    // CSS.g:981:18: ( S )*
+                    loop80:
                     do {
-                        int alt82=2;
-                        alt82 = dfa82.predict(input);
-                        switch (alt82) {
+                        int alt80=2;
+                        alt80 = dfa80.predict(input);
+                        switch (alt80) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:978:18: S
+                    	    // CSS.g:981:18: S
                     	    {
-                    	    S189=(Token)match(input,S,FOLLOW_S_in_any1999);  
-                    	    stream_S.add(S189);
+                    	    S188=(Token)match(input,S,FOLLOW_S_in_any2002);  
+                    	    stream_S.add(S188);
 
 
                     	    }
                     	    break;
 
                     	default :
-                    	    break loop82;
+                    	    break loop80;
                         }
                     } while (true);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:978:21: ( any )*
-                    loop83:
+                    // CSS.g:981:21: ( any )*
+                    loop81:
                     do {
-                        int alt83=2;
-                        alt83 = dfa83.predict(input);
-                        switch (alt83) {
+                        int alt81=2;
+                        alt81 = dfa81.predict(input);
+                        switch (alt81) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:978:21: any
+                    	    // CSS.g:981:21: any
                     	    {
-                    	    pushFollow(FOLLOW_any_in_any2002);
-                    	    any190=any();
+                    	    pushFollow(FOLLOW_any_in_any2005);
+                    	    any189=any();
 
                     	    state._fsp--;
 
-                    	    stream_any.add(any190.getTree());
+                    	    stream_any.add(any189.getTree());
 
                     	    }
                     	    break;
 
                     	default :
-                    	    break loop83;
+                    	    break loop81;
                         }
                     } while (true);
 
-                    RPAREN191=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_any2005);  
-                    stream_RPAREN.add(RPAREN191);
+                    RPAREN190=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_any2008);  
+                    stream_RPAREN.add(RPAREN190);
 
 
 
@@ -6354,19 +6262,18 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 978:33: -> ^( FUNCTION ( any )* )
+                    // 981:33: -> ^( FUNCTION ( any )* )
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:978:36: ^( FUNCTION ( any )* )
+                        // CSS.g:981:36: ^( FUNCTION ( any )* )
                         {
                         Object root_1 = (Object)adaptor.nil();
                         root_1 = (Object)adaptor.becomeRoot(stream_FUNCTION.nextNode(), root_1);
 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:978:47: ( any )*
+                        // CSS.g:981:47: ( any )*
                         while ( stream_any.hasNext() ) {
                             adaptor.addChild(root_1, stream_any.nextTree());
 
@@ -6382,10 +6289,10 @@
                     }
                     break;
                 case 24 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:979:9: DASHMATCH
+                    // CSS.g:982:9: DASHMATCH
                     {
-                    DASHMATCH192=(Token)match(input,DASHMATCH,FOLLOW_DASHMATCH_in_any2025);  
-                    stream_DASHMATCH.add(DASHMATCH192);
+                    DASHMATCH191=(Token)match(input,DASHMATCH,FOLLOW_DASHMATCH_in_any2028);  
+                    stream_DASHMATCH.add(DASHMATCH191);
 
 
 
@@ -6395,12 +6302,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 979:19: -> DASHMATCH
+                    // 982:19: -> DASHMATCH
                     {
                         adaptor.addChild(root_0, stream_DASHMATCH.nextNode());
 
@@ -6410,37 +6316,37 @@
                     }
                     break;
                 case 25 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:980:9: LPAREN ( any )* RPAREN
+                    // CSS.g:983:9: LPAREN ( any )* RPAREN
                     {
-                    LPAREN193=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_any2039);  
-                    stream_LPAREN.add(LPAREN193);
+                    LPAREN192=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_any2042);  
+                    stream_LPAREN.add(LPAREN192);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:980:16: ( any )*
-                    loop84:
+                    // CSS.g:983:16: ( any )*
+                    loop82:
                     do {
-                        int alt84=2;
-                        alt84 = dfa84.predict(input);
-                        switch (alt84) {
+                        int alt82=2;
+                        alt82 = dfa82.predict(input);
+                        switch (alt82) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:980:16: any
+                    	    // CSS.g:983:16: any
                     	    {
-                    	    pushFollow(FOLLOW_any_in_any2041);
-                    	    any194=any();
+                    	    pushFollow(FOLLOW_any_in_any2044);
+                    	    any193=any();
 
                     	    state._fsp--;
 
-                    	    stream_any.add(any194.getTree());
+                    	    stream_any.add(any193.getTree());
 
                     	    }
                     	    break;
 
                     	default :
-                    	    break loop84;
+                    	    break loop82;
                         }
                     } while (true);
 
-                    RPAREN195=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_any2044);  
-                    stream_RPAREN.add(RPAREN195);
+                    RPAREN194=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_any2047);  
+                    stream_RPAREN.add(RPAREN194);
 
 
 
@@ -6450,19 +6356,18 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 980:28: -> ^( PARENBLOCK ( any )* )
+                    // 983:28: -> ^( PARENBLOCK ( any )* )
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:980:31: ^( PARENBLOCK ( any )* )
+                        // CSS.g:983:31: ^( PARENBLOCK ( any )* )
                         {
                         Object root_1 = (Object)adaptor.nil();
                         root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARENBLOCK, "PARENBLOCK"), root_1);
 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:980:44: ( any )*
+                        // CSS.g:983:44: ( any )*
                         while ( stream_any.hasNext() ) {
                             adaptor.addChild(root_1, stream_any.nextTree());
 
@@ -6478,37 +6383,37 @@
                     }
                     break;
                 case 26 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:981:9: LBRACE ( any )* RBRACE
+                    // CSS.g:984:9: LBRACE ( any )* RBRACE
                     {
-                    LBRACE196=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_any2063);  
-                    stream_LBRACE.add(LBRACE196);
+                    LBRACE195=(Token)match(input,LBRACE,FOLLOW_LBRACE_in_any2066);  
+                    stream_LBRACE.add(LBRACE195);
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:981:16: ( any )*
-                    loop85:
+                    // CSS.g:984:16: ( any )*
+                    loop83:
                     do {
-                        int alt85=2;
-                        alt85 = dfa85.predict(input);
-                        switch (alt85) {
+                        int alt83=2;
+                        alt83 = dfa83.predict(input);
+                        switch (alt83) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:981:16: any
+                    	    // CSS.g:984:16: any
                     	    {
-                    	    pushFollow(FOLLOW_any_in_any2065);
-                    	    any197=any();
+                    	    pushFollow(FOLLOW_any_in_any2068);
+                    	    any196=any();
 
                     	    state._fsp--;
 
-                    	    stream_any.add(any197.getTree());
+                    	    stream_any.add(any196.getTree());
 
                     	    }
                     	    break;
 
                     	default :
-                    	    break loop85;
+                    	    break loop83;
                         }
                     } while (true);
 
-                    RBRACE198=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_any2068);  
-                    stream_RBRACE.add(RBRACE198);
+                    RBRACE197=(Token)match(input,RBRACE,FOLLOW_RBRACE_in_any2071);  
+                    stream_RBRACE.add(RBRACE197);
 
 
 
@@ -6518,19 +6423,18 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 981:28: -> ^( BRACEBLOCK ( any )* )
+                    // 984:28: -> ^( BRACEBLOCK ( any )* )
                     {
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:981:31: ^( BRACEBLOCK ( any )* )
+                        // CSS.g:984:31: ^( BRACEBLOCK ( any )* )
                         {
                         Object root_1 = (Object)adaptor.nil();
                         root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BRACEBLOCK, "BRACEBLOCK"), root_1);
 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:981:44: ( any )*
+                        // CSS.g:984:44: ( any )*
                         while ( stream_any.hasNext() ) {
                             adaptor.addChild(root_1, stream_any.nextTree());
 
@@ -6548,24 +6452,24 @@
 
             }
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:982:8: ( S )*
-            loop87:
+            // CSS.g:985:8: ( S )*
+            loop85:
             do {
-                int alt87=2;
-                alt87 = dfa87.predict(input);
-                switch (alt87) {
+                int alt85=2;
+                alt85 = dfa85.predict(input);
+                switch (alt85) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:982:8: S
+            	    // CSS.g:985:8: S
             	    {
-            	    S199=(Token)match(input,S,FOLLOW_S_in_any2086);  
-            	    stream_S.add(S199);
+            	    S198=(Token)match(input,S,FOLLOW_S_in_any2089);  
+            	    stream_S.add(S198);
 
 
             	    }
             	    break;
 
             	default :
-            	    break loop87;
+            	    break loop85;
                 }
             } while (true);
 
@@ -6596,47 +6500,47 @@
     };
 
     // $ANTLR start "nostatement"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:984:1: nostatement : ( RCURLY -> RCURLY | SEMICOLON -> SEMICOLON ) ;
+    // CSS.g:987:1: nostatement : ( RCURLY -> RCURLY | SEMICOLON -> SEMICOLON ) ;
     public final CSSParser.nostatement_return nostatement() throws RecognitionException {
         CSSParser.nostatement_return retval = new CSSParser.nostatement_return();
         retval.start = input.LT(1);
 
         Object root_0 = null;
 
-        Token RCURLY200=null;
-        Token SEMICOLON201=null;
+        Token RCURLY199=null;
+        Token SEMICOLON200=null;
 
-        Object RCURLY200_tree=null;
-        Object SEMICOLON201_tree=null;
+        Object RCURLY199_tree=null;
+        Object SEMICOLON200_tree=null;
         RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
         RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:986:3: ( ( RCURLY -> RCURLY | SEMICOLON -> SEMICOLON ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:986:5: ( RCURLY -> RCURLY | SEMICOLON -> SEMICOLON )
+            // CSS.g:989:3: ( ( RCURLY -> RCURLY | SEMICOLON -> SEMICOLON ) )
+            // CSS.g:989:5: ( RCURLY -> RCURLY | SEMICOLON -> SEMICOLON )
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:986:5: ( RCURLY -> RCURLY | SEMICOLON -> SEMICOLON )
-            int alt88=2;
-            int LA88_0 = input.LA(1);
+            // CSS.g:989:5: ( RCURLY -> RCURLY | SEMICOLON -> SEMICOLON )
+            int alt86=2;
+            int LA86_0 = input.LA(1);
 
-            if ( (LA88_0==RCURLY) ) {
-                alt88=1;
+            if ( (LA86_0==RCURLY) ) {
+                alt86=1;
             }
-            else if ( (LA88_0==SEMICOLON) ) {
-                alt88=2;
+            else if ( (LA86_0==SEMICOLON) ) {
+                alt86=2;
             }
             else {
                 NoViableAltException nvae =
-                    new NoViableAltException("", 88, 0, input);
+                    new NoViableAltException("", 86, 0, input);
 
                 throw nvae;
             }
-            switch (alt88) {
+            switch (alt86) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:986:7: RCURLY
+                    // CSS.g:989:7: RCURLY
                     {
-                    RCURLY200=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_nostatement2101);  
-                    stream_RCURLY.add(RCURLY200);
+                    RCURLY199=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_nostatement2104);  
+                    stream_RCURLY.add(RCURLY199);
 
 
 
@@ -6646,12 +6550,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 986:14: -> RCURLY
+                    // 989:14: -> RCURLY
                     {
                         adaptor.addChild(root_0, stream_RCURLY.nextNode());
 
@@ -6661,10 +6564,10 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:987:7: SEMICOLON
+                    // CSS.g:990:7: SEMICOLON
                     {
-                    SEMICOLON201=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_nostatement2115);  
-                    stream_SEMICOLON.add(SEMICOLON201);
+                    SEMICOLON200=(Token)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_nostatement2118);  
+                    stream_SEMICOLON.add(SEMICOLON200);
 
 
 
@@ -6674,12 +6577,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 987:17: -> SEMICOLON
+                    // 990:17: -> SEMICOLON
                     {
                         adaptor.addChild(root_0, stream_SEMICOLON.nextNode());
 
@@ -6718,50 +6620,50 @@
     };
 
     // $ANTLR start "noprop"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:990:1: noprop : ( CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | PLUS -> PLUS | ASTERISK -> ASTERISK | DASHMATCH -> DASHMATCH | INCLUDES -> INCLUDES | COLON -> COLON | STRING_CHAR -> STRING_CHAR | INVALID_TOKEN -> INVALID_TOKEN ) ( S )* ;
+    // CSS.g:993:1: noprop : ( CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | PLUS -> PLUS | ASTERISK -> ASTERISK | DASHMATCH -> DASHMATCH | INCLUDES -> INCLUDES | COLON -> COLON | STRING_CHAR -> STRING_CHAR | INVALID_TOKEN -> INVALID_TOKEN ) ( S )* ;
     public final CSSParser.noprop_return noprop() throws RecognitionException {
         CSSParser.noprop_return retval = new CSSParser.noprop_return();
         retval.start = input.LT(1);
 
         Object root_0 = null;
 
-        Token CLASSKEYWORD202=null;
-        Token NUMBER203=null;
-        Token COMMA204=null;
-        Token GREATER205=null;
-        Token LESS206=null;
-        Token QUESTION207=null;
-        Token PERCENT208=null;
-        Token EQUALS209=null;
-        Token SLASH210=null;
-        Token EXCLAMATION211=null;
-        Token PLUS212=null;
-        Token ASTERISK213=null;
-        Token DASHMATCH214=null;
-        Token INCLUDES215=null;
-        Token COLON216=null;
-        Token STRING_CHAR217=null;
-        Token INVALID_TOKEN218=null;
-        Token S219=null;
+        Token CLASSKEYWORD201=null;
+        Token NUMBER202=null;
+        Token COMMA203=null;
+        Token GREATER204=null;
+        Token LESS205=null;
+        Token QUESTION206=null;
+        Token PERCENT207=null;
+        Token EQUALS208=null;
+        Token SLASH209=null;
+        Token EXCLAMATION210=null;
+        Token PLUS211=null;
+        Token ASTERISK212=null;
+        Token DASHMATCH213=null;
+        Token INCLUDES214=null;
+        Token COLON215=null;
+        Token STRING_CHAR216=null;
+        Token INVALID_TOKEN217=null;
+        Token S218=null;
 
-        Object CLASSKEYWORD202_tree=null;
-        Object NUMBER203_tree=null;
-        Object COMMA204_tree=null;
-        Object GREATER205_tree=null;
-        Object LESS206_tree=null;
-        Object QUESTION207_tree=null;
-        Object PERCENT208_tree=null;
-        Object EQUALS209_tree=null;
-        Object SLASH210_tree=null;
-        Object EXCLAMATION211_tree=null;
-        Object PLUS212_tree=null;
-        Object ASTERISK213_tree=null;
-        Object DASHMATCH214_tree=null;
-        Object INCLUDES215_tree=null;
-        Object COLON216_tree=null;
-        Object STRING_CHAR217_tree=null;
-        Object INVALID_TOKEN218_tree=null;
-        Object S219_tree=null;
+        Object CLASSKEYWORD201_tree=null;
+        Object NUMBER202_tree=null;
+        Object COMMA203_tree=null;
+        Object GREATER204_tree=null;
+        Object LESS205_tree=null;
+        Object QUESTION206_tree=null;
+        Object PERCENT207_tree=null;
+        Object EQUALS208_tree=null;
+        Object SLASH209_tree=null;
+        Object EXCLAMATION210_tree=null;
+        Object PLUS211_tree=null;
+        Object ASTERISK212_tree=null;
+        Object DASHMATCH213_tree=null;
+        Object INCLUDES214_tree=null;
+        Object COLON215_tree=null;
+        Object STRING_CHAR216_tree=null;
+        Object INVALID_TOKEN217_tree=null;
+        Object S218_tree=null;
         RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
         RewriteRuleTokenStream stream_INCLUDES=new RewriteRuleTokenStream(adaptor,"token INCLUDES");
         RewriteRuleTokenStream stream_STRING_CHAR=new RewriteRuleTokenStream(adaptor,"token STRING_CHAR");
@@ -6782,18 +6684,18 @@
         RewriteRuleTokenStream stream_ASTERISK=new RewriteRuleTokenStream(adaptor,"token ASTERISK");
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:992:2: ( ( CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | PLUS -> PLUS | ASTERISK -> ASTERISK | DASHMATCH -> DASHMATCH | INCLUDES -> INCLUDES | COLON -> COLON | STRING_CHAR -> STRING_CHAR | INVALID_TOKEN -> INVALID_TOKEN ) ( S )* )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:992:4: ( CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | PLUS -> PLUS | ASTERISK -> ASTERISK | DASHMATCH -> DASHMATCH | INCLUDES -> INCLUDES | COLON -> COLON | STRING_CHAR -> STRING_CHAR | INVALID_TOKEN -> INVALID_TOKEN ) ( S )*
+            // CSS.g:995:2: ( ( CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | PLUS -> PLUS | ASTERISK -> ASTERISK | DASHMATCH -> DASHMATCH | INCLUDES -> INCLUDES | COLON -> COLON | STRING_CHAR -> STRING_CHAR | INVALID_TOKEN -> INVALID_TOKEN ) ( S )* )
+            // CSS.g:995:4: ( CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | PLUS -> PLUS | ASTERISK -> ASTERISK | DASHMATCH -> DASHMATCH | INCLUDES -> INCLUDES | COLON -> COLON | STRING_CHAR -> STRING_CHAR | INVALID_TOKEN -> INVALID_TOKEN ) ( S )*
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:992:4: ( CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | PLUS -> PLUS | ASTERISK -> ASTERISK | DASHMATCH -> DASHMATCH | INCLUDES -> INCLUDES | COLON -> COLON | STRING_CHAR -> STRING_CHAR | INVALID_TOKEN -> INVALID_TOKEN )
-            int alt89=17;
-            alt89 = dfa89.predict(input);
-            switch (alt89) {
+            // CSS.g:995:4: ( CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | PLUS -> PLUS | ASTERISK -> ASTERISK | DASHMATCH -> DASHMATCH | INCLUDES -> INCLUDES | COLON -> COLON | STRING_CHAR -> STRING_CHAR | INVALID_TOKEN -> INVALID_TOKEN )
+            int alt87=17;
+            alt87 = dfa87.predict(input);
+            switch (alt87) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:992:6: CLASSKEYWORD
+                    // CSS.g:995:6: CLASSKEYWORD
                     {
-                    CLASSKEYWORD202=(Token)match(input,CLASSKEYWORD,FOLLOW_CLASSKEYWORD_in_noprop2138);  
-                    stream_CLASSKEYWORD.add(CLASSKEYWORD202);
+                    CLASSKEYWORD201=(Token)match(input,CLASSKEYWORD,FOLLOW_CLASSKEYWORD_in_noprop2141);  
+                    stream_CLASSKEYWORD.add(CLASSKEYWORD201);
 
 
 
@@ -6803,12 +6705,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 992:19: -> CLASSKEYWORD
+                    // 995:19: -> CLASSKEYWORD
                     {
                         adaptor.addChild(root_0, stream_CLASSKEYWORD.nextNode());
 
@@ -6818,10 +6719,10 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:993:8: NUMBER
+                    // CSS.g:996:8: NUMBER
                     {
-                    NUMBER203=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_noprop2151);  
-                    stream_NUMBER.add(NUMBER203);
+                    NUMBER202=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_noprop2154);  
+                    stream_NUMBER.add(NUMBER202);
 
 
 
@@ -6831,12 +6732,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 993:15: -> NUMBER
+                    // 996:15: -> NUMBER
                     {
                         adaptor.addChild(root_0, stream_NUMBER.nextNode());
 
@@ -6846,10 +6746,10 @@
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:994:7: COMMA
+                    // CSS.g:997:7: COMMA
                     {
-                    COMMA204=(Token)match(input,COMMA,FOLLOW_COMMA_in_noprop2163);  
-                    stream_COMMA.add(COMMA204);
+                    COMMA203=(Token)match(input,COMMA,FOLLOW_COMMA_in_noprop2166);  
+                    stream_COMMA.add(COMMA203);
 
 
 
@@ -6859,12 +6759,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 994:13: -> COMMA
+                    // 997:13: -> COMMA
                     {
                         adaptor.addChild(root_0, stream_COMMA.nextNode());
 
@@ -6874,10 +6773,10 @@
                     }
                     break;
                 case 4 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:995:7: GREATER
+                    // CSS.g:998:7: GREATER
                     {
-                    GREATER205=(Token)match(input,GREATER,FOLLOW_GREATER_in_noprop2175);  
-                    stream_GREATER.add(GREATER205);
+                    GREATER204=(Token)match(input,GREATER,FOLLOW_GREATER_in_noprop2178);  
+                    stream_GREATER.add(GREATER204);
 
 
 
@@ -6887,12 +6786,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 995:15: -> GREATER
+                    // 998:15: -> GREATER
                     {
                         adaptor.addChild(root_0, stream_GREATER.nextNode());
 
@@ -6902,10 +6800,10 @@
                     }
                     break;
                 case 5 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:996:7: LESS
+                    // CSS.g:999:7: LESS
                     {
-                    LESS206=(Token)match(input,LESS,FOLLOW_LESS_in_noprop2187);  
-                    stream_LESS.add(LESS206);
+                    LESS205=(Token)match(input,LESS,FOLLOW_LESS_in_noprop2190);  
+                    stream_LESS.add(LESS205);
 
 
 
@@ -6915,12 +6813,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 996:12: -> LESS
+                    // 999:12: -> LESS
                     {
                         adaptor.addChild(root_0, stream_LESS.nextNode());
 
@@ -6930,10 +6827,10 @@
                     }
                     break;
                 case 6 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:997:7: QUESTION
+                    // CSS.g:1000:7: QUESTION
                     {
-                    QUESTION207=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_noprop2199);  
-                    stream_QUESTION.add(QUESTION207);
+                    QUESTION206=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_noprop2202);  
+                    stream_QUESTION.add(QUESTION206);
 
 
 
@@ -6943,12 +6840,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 997:16: -> QUESTION
+                    // 1000:16: -> QUESTION
                     {
                         adaptor.addChild(root_0, stream_QUESTION.nextNode());
 
@@ -6958,10 +6854,10 @@
                     }
                     break;
                 case 7 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:998:7: PERCENT
+                    // CSS.g:1001:7: PERCENT
                     {
-                    PERCENT208=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_noprop2211);  
-                    stream_PERCENT.add(PERCENT208);
+                    PERCENT207=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_noprop2214);  
+                    stream_PERCENT.add(PERCENT207);
 
 
 
@@ -6971,12 +6867,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 998:15: -> PERCENT
+                    // 1001:15: -> PERCENT
                     {
                         adaptor.addChild(root_0, stream_PERCENT.nextNode());
 
@@ -6986,10 +6881,10 @@
                     }
                     break;
                 case 8 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:999:7: EQUALS
+                    // CSS.g:1002:7: EQUALS
                     {
-                    EQUALS209=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_noprop2223);  
-                    stream_EQUALS.add(EQUALS209);
+                    EQUALS208=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_noprop2226);  
+                    stream_EQUALS.add(EQUALS208);
 
 
 
@@ -6999,12 +6894,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 999:14: -> EQUALS
+                    // 1002:14: -> EQUALS
                     {
                         adaptor.addChild(root_0, stream_EQUALS.nextNode());
 
@@ -7014,10 +6908,10 @@
                     }
                     break;
                 case 9 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1000:7: SLASH
+                    // CSS.g:1003:7: SLASH
                     {
-                    SLASH210=(Token)match(input,SLASH,FOLLOW_SLASH_in_noprop2235);  
-                    stream_SLASH.add(SLASH210);
+                    SLASH209=(Token)match(input,SLASH,FOLLOW_SLASH_in_noprop2238);  
+                    stream_SLASH.add(SLASH209);
 
 
 
@@ -7027,12 +6921,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1000:13: -> SLASH
+                    // 1003:13: -> SLASH
                     {
                         adaptor.addChild(root_0, stream_SLASH.nextNode());
 
@@ -7042,10 +6935,10 @@
                     }
                     break;
                 case 10 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1001:7: EXCLAMATION
+                    // CSS.g:1004:7: EXCLAMATION
                     {
-                    EXCLAMATION211=(Token)match(input,EXCLAMATION,FOLLOW_EXCLAMATION_in_noprop2247);  
-                    stream_EXCLAMATION.add(EXCLAMATION211);
+                    EXCLAMATION210=(Token)match(input,EXCLAMATION,FOLLOW_EXCLAMATION_in_noprop2250);  
+                    stream_EXCLAMATION.add(EXCLAMATION210);
 
 
 
@@ -7055,12 +6948,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1001:19: -> EXCLAMATION
+                    // 1004:19: -> EXCLAMATION
                     {
                         adaptor.addChild(root_0, stream_EXCLAMATION.nextNode());
 
@@ -7070,10 +6962,10 @@
                     }
                     break;
                 case 11 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1002:7: PLUS
+                    // CSS.g:1005:7: PLUS
                     {
-                    PLUS212=(Token)match(input,PLUS,FOLLOW_PLUS_in_noprop2259);  
-                    stream_PLUS.add(PLUS212);
+                    PLUS211=(Token)match(input,PLUS,FOLLOW_PLUS_in_noprop2262);  
+                    stream_PLUS.add(PLUS211);
 
 
 
@@ -7083,12 +6975,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1002:12: -> PLUS
+                    // 1005:12: -> PLUS
                     {
                         adaptor.addChild(root_0, stream_PLUS.nextNode());
 
@@ -7098,10 +6989,10 @@
                     }
                     break;
                 case 12 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1003:7: ASTERISK
+                    // CSS.g:1006:7: ASTERISK
                     {
-                    ASTERISK213=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_noprop2271);  
-                    stream_ASTERISK.add(ASTERISK213);
+                    ASTERISK212=(Token)match(input,ASTERISK,FOLLOW_ASTERISK_in_noprop2274);  
+                    stream_ASTERISK.add(ASTERISK212);
 
 
 
@@ -7111,12 +7002,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1003:16: -> ASTERISK
+                    // 1006:16: -> ASTERISK
                     {
                         adaptor.addChild(root_0, stream_ASTERISK.nextNode());
 
@@ -7126,10 +7016,10 @@
                     }
                     break;
                 case 13 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1004:7: DASHMATCH
+                    // CSS.g:1007:7: DASHMATCH
                     {
-                    DASHMATCH214=(Token)match(input,DASHMATCH,FOLLOW_DASHMATCH_in_noprop2286);  
-                    stream_DASHMATCH.add(DASHMATCH214);
+                    DASHMATCH213=(Token)match(input,DASHMATCH,FOLLOW_DASHMATCH_in_noprop2289);  
+                    stream_DASHMATCH.add(DASHMATCH213);
 
 
 
@@ -7139,12 +7029,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1004:17: -> DASHMATCH
+                    // 1007:17: -> DASHMATCH
                     {
                         adaptor.addChild(root_0, stream_DASHMATCH.nextNode());
 
@@ -7154,10 +7043,10 @@
                     }
                     break;
                 case 14 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1005:7: INCLUDES
+                    // CSS.g:1008:7: INCLUDES
                     {
-                    INCLUDES215=(Token)match(input,INCLUDES,FOLLOW_INCLUDES_in_noprop2298);  
-                    stream_INCLUDES.add(INCLUDES215);
+                    INCLUDES214=(Token)match(input,INCLUDES,FOLLOW_INCLUDES_in_noprop2301);  
+                    stream_INCLUDES.add(INCLUDES214);
 
 
 
@@ -7167,12 +7056,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1005:16: -> INCLUDES
+                    // 1008:16: -> INCLUDES
                     {
                         adaptor.addChild(root_0, stream_INCLUDES.nextNode());
 
@@ -7182,10 +7070,10 @@
                     }
                     break;
                 case 15 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1006:7: COLON
+                    // CSS.g:1009:7: COLON
                     {
-                    COLON216=(Token)match(input,COLON,FOLLOW_COLON_in_noprop2310);  
-                    stream_COLON.add(COLON216);
+                    COLON215=(Token)match(input,COLON,FOLLOW_COLON_in_noprop2313);  
+                    stream_COLON.add(COLON215);
 
 
 
@@ -7195,12 +7083,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1006:13: -> COLON
+                    // 1009:13: -> COLON
                     {
                         adaptor.addChild(root_0, stream_COLON.nextNode());
 
@@ -7210,10 +7097,10 @@
                     }
                     break;
                 case 16 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1007:7: STRING_CHAR
+                    // CSS.g:1010:7: STRING_CHAR
                     {
-                    STRING_CHAR217=(Token)match(input,STRING_CHAR,FOLLOW_STRING_CHAR_in_noprop2322);  
-                    stream_STRING_CHAR.add(STRING_CHAR217);
+                    STRING_CHAR216=(Token)match(input,STRING_CHAR,FOLLOW_STRING_CHAR_in_noprop2325);  
+                    stream_STRING_CHAR.add(STRING_CHAR216);
 
 
 
@@ -7223,12 +7110,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1007:19: -> STRING_CHAR
+                    // 1010:19: -> STRING_CHAR
                     {
                         adaptor.addChild(root_0, stream_STRING_CHAR.nextNode());
 
@@ -7238,10 +7124,10 @@
                     }
                     break;
                 case 17 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1008:7: INVALID_TOKEN
+                    // CSS.g:1011:7: INVALID_TOKEN
                     {
-                    INVALID_TOKEN218=(Token)match(input,INVALID_TOKEN,FOLLOW_INVALID_TOKEN_in_noprop2334);  
-                    stream_INVALID_TOKEN.add(INVALID_TOKEN218);
+                    INVALID_TOKEN217=(Token)match(input,INVALID_TOKEN,FOLLOW_INVALID_TOKEN_in_noprop2337);  
+                    stream_INVALID_TOKEN.add(INVALID_TOKEN217);
 
 
 
@@ -7251,12 +7137,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1008:21: -> INVALID_TOKEN
+                    // 1011:21: -> INVALID_TOKEN
                     {
                         adaptor.addChild(root_0, stream_INVALID_TOKEN.nextNode());
 
@@ -7268,24 +7153,24 @@
 
             }
 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1009:8: ( S )*
-            loop90:
+            // CSS.g:1012:8: ( S )*
+            loop88:
             do {
-                int alt90=2;
-                alt90 = dfa90.predict(input);
-                switch (alt90) {
+                int alt88=2;
+                alt88 = dfa88.predict(input);
+                switch (alt88) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1009:8: S
+            	    // CSS.g:1012:8: S
             	    {
-            	    S219=(Token)match(input,S,FOLLOW_S_in_noprop2347);  
-            	    stream_S.add(S219);
+            	    S218=(Token)match(input,S,FOLLOW_S_in_noprop2350);  
+            	    stream_S.add(S218);
 
 
             	    }
             	    break;
 
             	default :
-            	    break loop90;
+            	    break loop88;
                 }
             } while (true);
 
@@ -7316,52 +7201,52 @@
     };
 
     // $ANTLR start "norule"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1011:1: norule : ( NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | DASHMATCH -> DASHMATCH | RPAREN -> RPAREN ) ;
+    // CSS.g:1014:1: norule : ( NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | DASHMATCH -> DASHMATCH | RPAREN -> RPAREN ) ;
     public final CSSParser.norule_return norule() throws RecognitionException {
         CSSParser.norule_return retval = new CSSParser.norule_return();
         retval.start = input.LT(1);
 
         Object root_0 = null;
 
-        Token NUMBER220=null;
-        Token PERCENTAGE221=null;
-        Token DIMENSION222=null;
-        Token URI224=null;
-        Token UNIRANGE225=null;
-        Token INCLUDES226=null;
-        Token COMMA227=null;
-        Token GREATER228=null;
-        Token LESS229=null;
-        Token QUESTION230=null;
-        Token PERCENT231=null;
-        Token EQUALS232=null;
-        Token SLASH233=null;
-        Token EXCLAMATION234=null;
-        Token MINUS235=null;
-        Token PLUS236=null;
-        Token DASHMATCH237=null;
-        Token RPAREN238=null;
-        CSSParser.string_return string223 = null;
+        Token NUMBER219=null;
+        Token PERCENTAGE220=null;
+        Token DIMENSION221=null;
+        Token URI223=null;
+        Token UNIRANGE224=null;
+        Token INCLUDES225=null;
+        Token COMMA226=null;
+        Token GREATER227=null;
+        Token LESS228=null;
+        Token QUESTION229=null;
+        Token PERCENT230=null;
+        Token EQUALS231=null;
+        Token SLASH232=null;
+        Token EXCLAMATION233=null;
+        Token MINUS234=null;
+        Token PLUS235=null;
+        Token DASHMATCH236=null;
+        Token RPAREN237=null;
+        CSSParser.string_return string222 = null;
 
 
-        Object NUMBER220_tree=null;
-        Object PERCENTAGE221_tree=null;
-        Object DIMENSION222_tree=null;
-        Object URI224_tree=null;
-        Object UNIRANGE225_tree=null;
-        Object INCLUDES226_tree=null;
-        Object COMMA227_tree=null;
-        Object GREATER228_tree=null;
-        Object LESS229_tree=null;
-        Object QUESTION230_tree=null;
-        Object PERCENT231_tree=null;
-        Object EQUALS232_tree=null;
-        Object SLASH233_tree=null;
-        Object EXCLAMATION234_tree=null;
-        Object MINUS235_tree=null;
-        Object PLUS236_tree=null;
-        Object DASHMATCH237_tree=null;
-        Object RPAREN238_tree=null;
+        Object NUMBER219_tree=null;
+        Object PERCENTAGE220_tree=null;
+        Object DIMENSION221_tree=null;
+        Object URI223_tree=null;
+        Object UNIRANGE224_tree=null;
+        Object INCLUDES225_tree=null;
+        Object COMMA226_tree=null;
+        Object GREATER227_tree=null;
+        Object LESS228_tree=null;
+        Object QUESTION229_tree=null;
+        Object PERCENT230_tree=null;
+        Object EQUALS231_tree=null;
+        Object SLASH232_tree=null;
+        Object EXCLAMATION233_tree=null;
+        Object MINUS234_tree=null;
+        Object PLUS235_tree=null;
+        Object DASHMATCH236_tree=null;
+        Object RPAREN237_tree=null;
         RewriteRuleTokenStream stream_INCLUDES=new RewriteRuleTokenStream(adaptor,"token INCLUDES");
         RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
         RewriteRuleTokenStream stream_GREATER=new RewriteRuleTokenStream(adaptor,"token GREATER");
@@ -7382,18 +7267,18 @@
         RewriteRuleTokenStream stream_URI=new RewriteRuleTokenStream(adaptor,"token URI");
         RewriteRuleSubtreeStream stream_string=new RewriteRuleSubtreeStream(adaptor,"rule string");
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1013:3: ( ( NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | DASHMATCH -> DASHMATCH | RPAREN -> RPAREN ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1013:5: ( NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | DASHMATCH -> DASHMATCH | RPAREN -> RPAREN )
+            // CSS.g:1016:3: ( ( NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | DASHMATCH -> DASHMATCH | RPAREN -> RPAREN ) )
+            // CSS.g:1016:5: ( NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | DASHMATCH -> DASHMATCH | RPAREN -> RPAREN )
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1013:5: ( NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | DASHMATCH -> DASHMATCH | RPAREN -> RPAREN )
-            int alt91=19;
-            alt91 = dfa91.predict(input);
-            switch (alt91) {
+            // CSS.g:1016:5: ( NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | DASHMATCH -> DASHMATCH | RPAREN -> RPAREN )
+            int alt89=19;
+            alt89 = dfa89.predict(input);
+            switch (alt89) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1013:7: NUMBER
+                    // CSS.g:1016:7: NUMBER
                     {
-                    NUMBER220=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_norule2362);  
-                    stream_NUMBER.add(NUMBER220);
+                    NUMBER219=(Token)match(input,NUMBER,FOLLOW_NUMBER_in_norule2365);  
+                    stream_NUMBER.add(NUMBER219);
 
 
 
@@ -7403,12 +7288,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1013:14: -> NUMBER
+                    // 1016:14: -> NUMBER
                     {
                         adaptor.addChild(root_0, stream_NUMBER.nextNode());
 
@@ -7418,10 +7302,10 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1014:8: PERCENTAGE
+                    // CSS.g:1017:8: PERCENTAGE
                     {
-                    PERCENTAGE221=(Token)match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_norule2375);  
-                    stream_PERCENTAGE.add(PERCENTAGE221);
+                    PERCENTAGE220=(Token)match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_norule2378);  
+                    stream_PERCENTAGE.add(PERCENTAGE220);
 
 
 
@@ -7431,12 +7315,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1014:19: -> PERCENTAGE
+                    // 1017:19: -> PERCENTAGE
                     {
                         adaptor.addChild(root_0, stream_PERCENTAGE.nextNode());
 
@@ -7446,10 +7329,10 @@
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1015:8: DIMENSION
+                    // CSS.g:1018:8: DIMENSION
                     {
-                    DIMENSION222=(Token)match(input,DIMENSION,FOLLOW_DIMENSION_in_norule2387);  
-                    stream_DIMENSION.add(DIMENSION222);
+                    DIMENSION221=(Token)match(input,DIMENSION,FOLLOW_DIMENSION_in_norule2390);  
+                    stream_DIMENSION.add(DIMENSION221);
 
 
 
@@ -7459,12 +7342,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1015:18: -> DIMENSION
+                    // 1018:18: -> DIMENSION
                     {
                         adaptor.addChild(root_0, stream_DIMENSION.nextNode());
 
@@ -7474,14 +7356,14 @@
                     }
                     break;
                 case 4 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1016:8: string
+                    // CSS.g:1019:8: string
                     {
-                    pushFollow(FOLLOW_string_in_norule2400);
-                    string223=string();
+                    pushFollow(FOLLOW_string_in_norule2403);
+                    string222=string();
 
                     state._fsp--;
 
-                    stream_string.add(string223.getTree());
+                    stream_string.add(string222.getTree());
 
 
                     // AST REWRITE
@@ -7490,12 +7372,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1016:15: -> string
+                    // 1019:15: -> string
                     {
                         adaptor.addChild(root_0, stream_string.nextTree());
 
@@ -7505,10 +7386,10 @@
                     }
                     break;
                 case 5 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1017:9: URI
+                    // CSS.g:1020:9: URI
                     {
-                    URI224=(Token)match(input,URI,FOLLOW_URI_in_norule2414);  
-                    stream_URI.add(URI224);
+                    URI223=(Token)match(input,URI,FOLLOW_URI_in_norule2417);  
+                    stream_URI.add(URI223);
 
 
 
@@ -7518,12 +7399,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1017:16: -> URI
+                    // 1020:16: -> URI
                     {
                         adaptor.addChild(root_0, stream_URI.nextNode());
 
@@ -7533,10 +7413,10 @@
                     }
                     break;
                 case 6 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1018:9: UNIRANGE
+                    // CSS.g:1021:9: UNIRANGE
                     {
-                    UNIRANGE225=(Token)match(input,UNIRANGE,FOLLOW_UNIRANGE_in_norule2431);  
-                    stream_UNIRANGE.add(UNIRANGE225);
+                    UNIRANGE224=(Token)match(input,UNIRANGE,FOLLOW_UNIRANGE_in_norule2434);  
+                    stream_UNIRANGE.add(UNIRANGE224);
 
 
 
@@ -7546,12 +7426,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1018:18: -> UNIRANGE
+                    // 1021:18: -> UNIRANGE
                     {
                         adaptor.addChild(root_0, stream_UNIRANGE.nextNode());
 
@@ -7561,10 +7440,10 @@
                     }
                     break;
                 case 7 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1019:9: INCLUDES
+                    // CSS.g:1022:9: INCLUDES
                     {
-                    INCLUDES226=(Token)match(input,INCLUDES,FOLLOW_INCLUDES_in_norule2445);  
-                    stream_INCLUDES.add(INCLUDES226);
+                    INCLUDES225=(Token)match(input,INCLUDES,FOLLOW_INCLUDES_in_norule2448);  
+                    stream_INCLUDES.add(INCLUDES225);
 
 
 
@@ -7574,12 +7453,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1019:18: -> INCLUDES
+                    // 1022:18: -> INCLUDES
                     {
                         adaptor.addChild(root_0, stream_INCLUDES.nextNode());
 
@@ -7589,10 +7467,10 @@
                     }
                     break;
                 case 8 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1020:9: COMMA
+                    // CSS.g:1023:9: COMMA
                     {
-                    COMMA227=(Token)match(input,COMMA,FOLLOW_COMMA_in_norule2459);  
-                    stream_COMMA.add(COMMA227);
+                    COMMA226=(Token)match(input,COMMA,FOLLOW_COMMA_in_norule2462);  
+                    stream_COMMA.add(COMMA226);
 
 
 
@@ -7602,12 +7480,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1020:15: -> COMMA
+                    // 1023:15: -> COMMA
                     {
                         adaptor.addChild(root_0, stream_COMMA.nextNode());
 
@@ -7617,10 +7494,10 @@
                     }
                     break;
                 case 9 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1021:9: GREATER
+                    // CSS.g:1024:9: GREATER
                     {
-                    GREATER228=(Token)match(input,GREATER,FOLLOW_GREATER_in_norule2473);  
-                    stream_GREATER.add(GREATER228);
+                    GREATER227=(Token)match(input,GREATER,FOLLOW_GREATER_in_norule2476);  
+                    stream_GREATER.add(GREATER227);
 
 
 
@@ -7630,12 +7507,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1021:17: -> GREATER
+                    // 1024:17: -> GREATER
                     {
                         adaptor.addChild(root_0, stream_GREATER.nextNode());
 
@@ -7645,10 +7521,10 @@
                     }
                     break;
                 case 10 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1022:9: LESS
+                    // CSS.g:1025:9: LESS
                     {
-                    LESS229=(Token)match(input,LESS,FOLLOW_LESS_in_norule2487);  
-                    stream_LESS.add(LESS229);
+                    LESS228=(Token)match(input,LESS,FOLLOW_LESS_in_norule2490);  
+                    stream_LESS.add(LESS228);
 
 
 
@@ -7658,12 +7534,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1022:14: -> LESS
+                    // 1025:14: -> LESS
                     {
                         adaptor.addChild(root_0, stream_LESS.nextNode());
 
@@ -7673,10 +7548,10 @@
                     }
                     break;
                 case 11 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1023:9: QUESTION
+                    // CSS.g:1026:9: QUESTION
                     {
-                    QUESTION230=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_norule2501);  
-                    stream_QUESTION.add(QUESTION230);
+                    QUESTION229=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_norule2504);  
+                    stream_QUESTION.add(QUESTION229);
 
 
 
@@ -7686,12 +7561,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1023:18: -> QUESTION
+                    // 1026:18: -> QUESTION
                     {
                         adaptor.addChild(root_0, stream_QUESTION.nextNode());
 
@@ -7701,10 +7575,10 @@
                     }
                     break;
                 case 12 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1024:9: PERCENT
+                    // CSS.g:1027:9: PERCENT
                     {
-                    PERCENT231=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_norule2515);  
-                    stream_PERCENT.add(PERCENT231);
+                    PERCENT230=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_norule2518);  
+                    stream_PERCENT.add(PERCENT230);
 
 
 
@@ -7714,12 +7588,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1024:17: -> PERCENT
+                    // 1027:17: -> PERCENT
                     {
                         adaptor.addChild(root_0, stream_PERCENT.nextNode());
 
@@ -7729,10 +7602,10 @@
                     }
                     break;
                 case 13 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1025:9: EQUALS
+                    // CSS.g:1028:9: EQUALS
                     {
-                    EQUALS232=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_norule2529);  
-                    stream_EQUALS.add(EQUALS232);
+                    EQUALS231=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_norule2532);  
+                    stream_EQUALS.add(EQUALS231);
 
 
 
@@ -7742,12 +7615,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1025:16: -> EQUALS
+                    // 1028:16: -> EQUALS
                     {
                         adaptor.addChild(root_0, stream_EQUALS.nextNode());
 
@@ -7757,10 +7629,10 @@
                     }
                     break;
                 case 14 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1026:9: SLASH
+                    // CSS.g:1029:9: SLASH
                     {
-                    SLASH233=(Token)match(input,SLASH,FOLLOW_SLASH_in_norule2543);  
-                    stream_SLASH.add(SLASH233);
+                    SLASH232=(Token)match(input,SLASH,FOLLOW_SLASH_in_norule2546);  
+                    stream_SLASH.add(SLASH232);
 
 
 
@@ -7770,12 +7642,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1026:15: -> SLASH
+                    // 1029:15: -> SLASH
                     {
                         adaptor.addChild(root_0, stream_SLASH.nextNode());
 
@@ -7785,10 +7656,10 @@
                     }
                     break;
                 case 15 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1027:9: EXCLAMATION
+                    // CSS.g:1030:9: EXCLAMATION
                     {
-                    EXCLAMATION234=(Token)match(input,EXCLAMATION,FOLLOW_EXCLAMATION_in_norule2557);  
-                    stream_EXCLAMATION.add(EXCLAMATION234);
+                    EXCLAMATION233=(Token)match(input,EXCLAMATION,FOLLOW_EXCLAMATION_in_norule2560);  
+                    stream_EXCLAMATION.add(EXCLAMATION233);
 
 
 
@@ -7798,12 +7669,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1027:21: -> EXCLAMATION
+                    // 1030:21: -> EXCLAMATION
                     {
                         adaptor.addChild(root_0, stream_EXCLAMATION.nextNode());
 
@@ -7813,10 +7683,10 @@
                     }
                     break;
                 case 16 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1028:8: MINUS
+                    // CSS.g:1031:8: MINUS
                     {
-                    MINUS235=(Token)match(input,MINUS,FOLLOW_MINUS_in_norule2570);  
-                    stream_MINUS.add(MINUS235);
+                    MINUS234=(Token)match(input,MINUS,FOLLOW_MINUS_in_norule2573);  
+                    stream_MINUS.add(MINUS234);
 
 
 
@@ -7826,12 +7696,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1028:14: -> MINUS
+                    // 1031:14: -> MINUS
                     {
                         adaptor.addChild(root_0, stream_MINUS.nextNode());
 
@@ -7841,10 +7710,10 @@
                     }
                     break;
                 case 17 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1029:8: PLUS
+                    // CSS.g:1032:8: PLUS
                     {
-                    PLUS236=(Token)match(input,PLUS,FOLLOW_PLUS_in_norule2583);  
-                    stream_PLUS.add(PLUS236);
+                    PLUS235=(Token)match(input,PLUS,FOLLOW_PLUS_in_norule2586);  
+                    stream_PLUS.add(PLUS235);
 
 
 
@@ -7854,12 +7723,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1029:13: -> PLUS
+                    // 1032:13: -> PLUS
                     {
                         adaptor.addChild(root_0, stream_PLUS.nextNode());
 
@@ -7869,10 +7737,10 @@
                     }
                     break;
                 case 18 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1030:9: DASHMATCH
+                    // CSS.g:1033:9: DASHMATCH
                     {
-                    DASHMATCH237=(Token)match(input,DASHMATCH,FOLLOW_DASHMATCH_in_norule2597);  
-                    stream_DASHMATCH.add(DASHMATCH237);
+                    DASHMATCH236=(Token)match(input,DASHMATCH,FOLLOW_DASHMATCH_in_norule2600);  
+                    stream_DASHMATCH.add(DASHMATCH236);
 
 
 
@@ -7882,12 +7750,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1030:19: -> DASHMATCH
+                    // 1033:19: -> DASHMATCH
                     {
                         adaptor.addChild(root_0, stream_DASHMATCH.nextNode());
 
@@ -7897,10 +7764,10 @@
                     }
                     break;
                 case 19 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSS.g:1031:9: RPAREN
+                    // CSS.g:1034:9: RPAREN
                     {
-                    RPAREN238=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_norule2611);  
-                    stream_RPAREN.add(RPAREN238);
+                    RPAREN237=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_norule2614);  
+                    stream_RPAREN.add(RPAREN237);
 
 
 
@@ -7910,12 +7777,11 @@
                     // rule labels: retval
                     // token list labels: 
                     // rule list labels: 
-                    // wildcard labels: 
                     retval.tree = root_0;
-                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
+                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
 
                     root_0 = (Object)adaptor.nil();
-                    // 1031:16: -> RPAREN
+                    // 1034:16: -> RPAREN
                     {
                         adaptor.addChild(root_0, stream_RPAREN.nextNode());
 
@@ -7984,15 +7850,15 @@
     protected DFA67 dfa67 = new DFA67(this);
     protected DFA68 dfa68 = new DFA68(this);
     protected DFA69 dfa69 = new DFA69(this);
-    protected DFA86 dfa86 = new DFA86(this);
+    protected DFA84 dfa84 = new DFA84(this);
+    protected DFA80 dfa80 = new DFA80(this);
+    protected DFA81 dfa81 = new DFA81(this);
     protected DFA82 dfa82 = new DFA82(this);
     protected DFA83 dfa83 = new DFA83(this);
-    protected DFA84 dfa84 = new DFA84(this);
     protected DFA85 dfa85 = new DFA85(this);
     protected DFA87 dfa87 = new DFA87(this);
+    protected DFA88 dfa88 = new DFA88(this);
     protected DFA89 dfa89 = new DFA89(this);
-    protected DFA90 dfa90 = new DFA90(this);
-    protected DFA91 dfa91 = new DFA91(this);
     static final String DFA1_eotS =
         "\30\uffff";
     static final String DFA1_eofS =
@@ -8075,8 +7941,7 @@
     static final String DFA3_maxS =
         "\1\107\20\uffff\1\105\42\uffff";
     static final String DFA3_acceptS =
-        "\1\uffff\1\1\24\uffff\1\2\1\uffff\1\1\11\uffff\1\1\13\uffff\1\1"+
-        "\5\uffff";
+        "\1\uffff\1\1\24\uffff\1\2\3\1\32\uffff";
     static final String DFA3_specialS =
         "\64\uffff}>";
     static final String[] DFA3_transitionS = {
@@ -8098,7 +7963,7 @@
             "",
             "",
             "",
-            "\1\1\6\uffff\1\1\5\uffff\1\42\1\30\4\uffff\4\1\1\uffff\1\56"+
+            "\1\1\6\uffff\1\1\5\uffff\1\27\1\30\4\uffff\4\1\1\uffff\1\31"+
             "\1\uffff\23\1\1\uffff\1\1",
             "",
             "",
@@ -10531,21 +10396,21 @@
             return "()* loopback of 918:16: ( S )*";
         }
     }
-    static final String DFA86_eotS =
+    static final String DFA84_eotS =
         "\33\uffff";
-    static final String DFA86_eofS =
+    static final String DFA84_eofS =
         "\33\uffff";
-    static final String DFA86_minS =
+    static final String DFA84_minS =
         "\1\27\32\uffff";
-    static final String DFA86_maxS =
+    static final String DFA84_maxS =
         "\1\105\32\uffff";
-    static final String DFA86_acceptS =
+    static final String DFA84_acceptS =
         "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
         "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
         "\1\32";
-    static final String DFA86_specialS =
+    static final String DFA84_specialS =
         "\33\uffff}>";
-    static final String[] DFA86_transitionS = {
+    static final String[] DFA84_transitionS = {
             "\1\6\14\uffff\1\13\1\1\4\uffff\1\14\1\uffff\1\23\1\24\1\uffff"+
             "\1\27\1\uffff\1\2\1\3\1\4\1\5\1\7\1\10\1\11\1\12\1\15\1\16\1"+
             "\17\1\20\1\21\1\22\1\25\1\26\1\30\1\31\1\32\1\uffff\1\6",
@@ -10577,52 +10442,52 @@
             ""
     };
 
-    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_eotS);
-    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_eofS);
-    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_minS);
-    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_maxS);
-    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_acceptS);
-    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_specialS);
-    static final short[][] DFA86_transition;
+    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
+    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
+    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
+    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
+    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
+    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
+    static final short[][] DFA84_transition;
 
     static {
-        int numStates = DFA86_transitionS.length;
-        DFA86_transition = new short[numStates][];
+        int numStates = DFA84_transitionS.length;
+        DFA84_transition = new short[numStates][];
         for (int i=0; i<numStates; i++) {
-            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_transitionS[i]);
+            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
         }
     }
 
-    class DFA86 extends DFA {
+    class DFA84 extends DFA {
 
-        public DFA86(BaseRecognizer recognizer) {
+        public DFA84(BaseRecognizer recognizer) {
             this.recognizer = recognizer;
-            this.decisionNumber = 86;
-            this.eot = DFA86_eot;
-            this.eof = DFA86_eof;
-            this.min = DFA86_min;
-            this.max = DFA86_max;
-            this.accept = DFA86_accept;
-            this.special = DFA86_special;
-            this.transition = DFA86_transition;
+            this.decisionNumber = 84;
+            this.eot = DFA84_eot;
+            this.eof = DFA84_eof;
+            this.min = DFA84_min;
+            this.max = DFA84_max;
+            this.accept = DFA84_accept;
+            this.special = DFA84_special;
+            this.transition = DFA84_transition;
         }
         public String getDescription() {
-            return "956:4: ( IDENT -> IDENT | CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | ASTERISK -> ASTERISK | FUNCTION ( S )* ( any )* RPAREN -> ^( FUNCTION ( any )* ) | DASHMATCH -> DASHMATCH | LPAREN ( any )* RPAREN -> ^( PARENBLOCK ( any )* ) | LBRACE ( any )* RBRACE -> ^( BRACEBLOCK ( any )* ) )";
+            return "959:4: ( IDENT -> IDENT | CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | HASH -> HASH | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COLON -> COLON | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | ASTERISK -> ASTERISK | FUNCTION ( S )* ( any )* RPAREN -> ^( FUNCTION ( any )* ) | DASHMATCH -> DASHMATCH | LPAREN ( any )* RPAREN -> ^( PARENBLOCK ( any )* ) | LBRACE ( any )* RBRACE -> ^( BRACEBLOCK ( any )* ) )";
         }
     }
-    static final String DFA82_eotS =
+    static final String DFA80_eotS =
         "\35\uffff";
-    static final String DFA82_eofS =
+    static final String DFA80_eofS =
         "\35\uffff";
-    static final String DFA82_minS =
+    static final String DFA80_minS =
         "\1\27\34\uffff";
-    static final String DFA82_maxS =
+    static final String DFA80_maxS =
         "\1\105\34\uffff";
-    static final String DFA82_acceptS =
+    static final String DFA80_acceptS =
         "\1\uffff\1\2\32\uffff\1\1";
-    static final String DFA82_specialS =
+    static final String DFA80_specialS =
         "\35\uffff}>";
-    static final String[] DFA82_transitionS = {
+    static final String[] DFA80_transitionS = {
             "\1\1\6\uffff\1\34\5\uffff\2\1\4\uffff\1\1\1\uffff\2\1\1\uffff"+
             "\25\1\1\uffff\1\1",
             "",
@@ -10655,52 +10520,52 @@
             ""
     };
 
-    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
-    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
-    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
-    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
-    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
-    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
-    static final short[][] DFA82_transition;
+    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
+    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
+    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
+    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
+    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
+    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
+    static final short[][] DFA80_transition;
 
     static {
-        int numStates = DFA82_transitionS.length;
-        DFA82_transition = new short[numStates][];
+        int numStates = DFA80_transitionS.length;
+        DFA80_transition = new short[numStates][];
         for (int i=0; i<numStates; i++) {
-            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
+            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
         }
     }
 
-    class DFA82 extends DFA {
+    class DFA80 extends DFA {
 
-        public DFA82(BaseRecognizer recognizer) {
+        public DFA80(BaseRecognizer recognizer) {
             this.recognizer = recognizer;
-            this.decisionNumber = 82;
-            this.eot = DFA82_eot;
-            this.eof = DFA82_eof;
-            this.min = DFA82_min;
-            this.max = DFA82_max;
-            this.accept = DFA82_accept;
-            this.special = DFA82_special;
-            this.transition = DFA82_transition;
+            this.decisionNumber = 80;
+            this.eot = DFA80_eot;
+            this.eof = DFA80_eof;
+            this.min = DFA80_min;
+            this.max = DFA80_max;
+            this.accept = DFA80_accept;
+            this.special = DFA80_special;
+            this.transition = DFA80_transition;
         }
         public String getDescription() {
-            return "()* loopback of 978:18: ( S )*";
+            return "()* loopback of 981:18: ( S )*";
         }
     }
-    static final String DFA83_eotS =
+    static final String DFA81_eotS =
         "\34\uffff";
-    static final String DFA83_eofS =
+    static final String DFA81_eofS =
         "\34\uffff";
-    static final String DFA83_minS =
+    static final String DFA81_minS =
         "\1\27\33\uffff";
-    static final String DFA83_maxS =
+    static final String DFA81_maxS =
         "\1\105\33\uffff";
-    static final String DFA83_acceptS =
+    static final String DFA81_acceptS =
         "\1\uffff\1\2\1\1\31\uffff";
-    static final String DFA83_specialS =
+    static final String DFA81_specialS =
         "\34\uffff}>";
-    static final String[] DFA83_transitionS = {
+    static final String[] DFA81_transitionS = {
             "\1\2\14\uffff\2\2\4\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\1\23"+
             "\2\1\uffff\1\2",
             "",
@@ -10732,52 +10597,52 @@
             ""
     };
 
-    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
-    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
-    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
-    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
-    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
-    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
-    static final short[][] DFA83_transition;
+    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
+    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
+    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
+    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
+    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
+    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
+    static final short[][] DFA81_transition;
 
     static {
-        int numStates = DFA83_transitionS.length;
-        DFA83_transition = new short[numStates][];
+        int numStates = DFA81_transitionS.length;
+        DFA81_transition = new short[numStates][];
         for (int i=0; i<numStates; i++) {
-            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
+            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
         }
     }
 
-    class DFA83 extends DFA {
+    class DFA81 extends DFA {
 
-        public DFA83(BaseRecognizer recognizer) {
+        public DFA81(BaseRecognizer recognizer) {
             this.recognizer = recognizer;
-            this.decisionNumber = 83;
-            this.eot = DFA83_eot;
-            this.eof = DFA83_eof;
-            this.min = DFA83_min;
-            this.max = DFA83_max;
-            this.accept = DFA83_accept;
-            this.special = DFA83_special;
-            this.transition = DFA83_transition;
+            this.decisionNumber = 81;
+            this.eot = DFA81_eot;
+            this.eof = DFA81_eof;
+            this.min = DFA81_min;
+            this.max = DFA81_max;
+            this.accept = DFA81_accept;
+            this.special = DFA81_special;
+            this.transition = DFA81_transition;
         }
         public String getDescription() {
-            return "()* loopback of 978:21: ( any )*";
+            return "()* loopback of 981:21: ( any )*";
         }
     }
-    static final String DFA84_eotS =
+    static final String DFA82_eotS =
         "\34\uffff";
-    static final String DFA84_eofS =
+    static final String DFA82_eofS =
         "\34\uffff";
-    static final String DFA84_minS =
+    static final String DFA82_minS =
         "\1\27\33\uffff";
-    static final String DFA84_maxS =
+    static final String DFA82_maxS =
         "\1\105\33\uffff";
-    static final String DFA84_acceptS =
+    static final String DFA82_acceptS =
         "\1\uffff\1\2\1\1\31\uffff";
-    static final String DFA84_specialS =
+    static final String DFA82_specialS =
         "\34\uffff}>";
-    static final String[] DFA84_transitionS = {
+    static final String[] DFA82_transitionS = {
             "\1\2\14\uffff\2\2\4\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\1\23"+
             "\2\1\uffff\1\2",
             "",
@@ -10809,52 +10674,52 @@
             ""
     };
 
-    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
-    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
-    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
-    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
-    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
-    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
-    static final short[][] DFA84_transition;
+    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
+    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
+    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
+    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
+    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
+    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
+    static final short[][] DFA82_transition;
 
     static {
-        int numStates = DFA84_transitionS.length;
-        DFA84_transition = new short[numStates][];
+        int numStates = DFA82_transitionS.length;
+        DFA82_transition = new short[numStates][];
         for (int i=0; i<numStates; i++) {
-            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
+            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
         }
     }
 
-    class DFA84 extends DFA {
+    class DFA82 extends DFA {
 
-        public DFA84(BaseRecognizer recognizer) {
+        public DFA82(BaseRecognizer recognizer) {
             this.recognizer = recognizer;
-            this.decisionNumber = 84;
-            this.eot = DFA84_eot;
-            this.eof = DFA84_eof;
-            this.min = DFA84_min;
-            this.max = DFA84_max;
-            this.accept = DFA84_accept;
-            this.special = DFA84_special;
-            this.transition = DFA84_transition;
+            this.decisionNumber = 82;
+            this.eot = DFA82_eot;
+            this.eof = DFA82_eof;
+            this.min = DFA82_min;
+            this.max = DFA82_max;
+            this.accept = DFA82_accept;
+            this.special = DFA82_special;
+            this.transition = DFA82_transition;
         }
         public String getDescription() {
-            return "()* loopback of 980:16: ( any )*";
+            return "()* loopback of 983:16: ( any )*";
         }
     }
-    static final String DFA85_eotS =
+    static final String DFA83_eotS =
         "\34\uffff";
-    static final String DFA85_eofS =
+    static final String DFA83_eofS =
         "\34\uffff";
-    static final String DFA85_minS =
+    static final String DFA83_minS =
         "\1\27\33\uffff";
-    static final String DFA85_maxS =
+    static final String DFA83_maxS =
         "\1\105\33\uffff";
-    static final String DFA85_acceptS =
+    static final String DFA83_acceptS =
         "\1\uffff\1\2\1\1\31\uffff";
-    static final String DFA85_specialS =
+    static final String DFA83_specialS =
         "\34\uffff}>";
-    static final String[] DFA85_transitionS = {
+    static final String[] DFA83_transitionS = {
             "\1\2\14\uffff\2\2\4\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff"+
             "\23\2\1\1\1\2",
             "",
@@ -10886,52 +10751,52 @@
             ""
     };
 
-    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_eotS);
-    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_eofS);
-    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_minS);
-    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_maxS);
-    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_acceptS);
-    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_specialS);
-    static final short[][] DFA85_transition;
+    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
+    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
+    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
+    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
+    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
+    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
+    static final short[][] DFA83_transition;
 
     static {
-        int numStates = DFA85_transitionS.length;
-        DFA85_transition = new short[numStates][];
+        int numStates = DFA83_transitionS.length;
+        DFA83_transition = new short[numStates][];
         for (int i=0; i<numStates; i++) {
-            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_transitionS[i]);
+            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
         }
     }
 
-    class DFA85 extends DFA {
+    class DFA83 extends DFA {
 
-        public DFA85(BaseRecognizer recognizer) {
+        public DFA83(BaseRecognizer recognizer) {
             this.recognizer = recognizer;
-            this.decisionNumber = 85;
-            this.eot = DFA85_eot;
-            this.eof = DFA85_eof;
-            this.min = DFA85_min;
-            this.max = DFA85_max;
-            this.accept = DFA85_accept;
-            this.special = DFA85_special;
-            this.transition = DFA85_transition;
+            this.decisionNumber = 83;
+            this.eot = DFA83_eot;
+            this.eof = DFA83_eof;
+            this.min = DFA83_min;
+            this.max = DFA83_max;
+            this.accept = DFA83_accept;
+            this.special = DFA83_special;
+            this.transition = DFA83_transition;
         }
         public String getDescription() {
-            return "()* loopback of 981:16: ( any )*";
+            return "()* loopback of 984:16: ( any )*";
         }
     }
-    static final String DFA87_eotS =
+    static final String DFA85_eotS =
         "\41\uffff";
-    static final String DFA87_eofS =
+    static final String DFA85_eofS =
         "\1\1\40\uffff";
-    static final String DFA87_minS =
+    static final String DFA85_minS =
         "\1\27\40\uffff";
-    static final String DFA87_maxS =
+    static final String DFA85_maxS =
         "\1\105\40\uffff";
-    static final String DFA87_acceptS =
+    static final String DFA85_acceptS =
         "\1\uffff\1\2\36\uffff\1\1";
-    static final String DFA87_specialS =
+    static final String DFA85_specialS =
         "\41\uffff}>";
-    static final String[] DFA87_transitionS = {
+    static final String[] DFA85_transitionS = {
             "\1\1\6\uffff\1\40\5\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff"+
             "\27\1",
             "",
@@ -10968,53 +10833,53 @@
             ""
     };
 
-    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
-    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
-    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
-    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
-    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
-    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
-    static final short[][] DFA87_transition;
+    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_eotS);
+    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_eofS);
+    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_minS);
+    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_maxS);
+    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_acceptS);
+    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_specialS);
+    static final short[][] DFA85_transition;
 
     static {
-        int numStates = DFA87_transitionS.length;
-        DFA87_transition = new short[numStates][];
+        int numStates = DFA85_transitionS.length;
+        DFA85_transition = new short[numStates][];
         for (int i=0; i<numStates; i++) {
-            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
+            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_transitionS[i]);
         }
     }
 
-    class DFA87 extends DFA {
+    class DFA85 extends DFA {
 
-        public DFA87(BaseRecognizer recognizer) {
+        public DFA85(BaseRecognizer recognizer) {
             this.recognizer = recognizer;
-            this.decisionNumber = 87;
-            this.eot = DFA87_eot;
-            this.eof = DFA87_eof;
-            this.min = DFA87_min;
-            this.max = DFA87_max;
-            this.accept = DFA87_accept;
-            this.special = DFA87_special;
-            this.transition = DFA87_transition;
+            this.decisionNumber = 85;
+            this.eot = DFA85_eot;
+            this.eof = DFA85_eof;
+            this.min = DFA85_min;
+            this.max = DFA85_max;
+            this.accept = DFA85_accept;
+            this.special = DFA85_special;
+            this.transition = DFA85_transition;
         }
         public String getDescription() {
-            return "()* loopback of 982:8: ( S )*";
+            return "()* loopback of 985:8: ( S )*";
         }
     }
-    static final String DFA89_eotS =
+    static final String DFA87_eotS =
         "\22\uffff";
-    static final String DFA89_eofS =
+    static final String DFA87_eofS =
         "\22\uffff";
-    static final String DFA89_minS =
+    static final String DFA87_minS =
         "\1\44\21\uffff";
-    static final String DFA89_maxS =
+    static final String DFA87_maxS =
         "\1\107\21\uffff";
-    static final String DFA89_acceptS =
+    static final String DFA87_acceptS =
         "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
         "\15\1\16\1\17\1\20\1\21";
-    static final String DFA89_specialS =
+    static final String DFA87_specialS =
         "\22\uffff}>";
-    static final String[] DFA89_transitionS = {
+    static final String[] DFA87_transitionS = {
             "\1\17\5\uffff\1\3\1\uffff\1\12\4\uffff\1\1\1\2\5\uffff\1\16"+
             "\1\4\1\5\1\6\1\7\1\10\1\11\1\13\1\14\1\15\4\uffff\1\20\1\21",
             "",
@@ -11036,52 +10901,52 @@
             ""
     };
 
-    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
-    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
-    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
-    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
-    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
-    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
-    static final short[][] DFA89_transition;
+    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
+    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
+    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
+    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
+    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
+    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
+    static final short[][] DFA87_transition;
 
     static {
-        int numStates = DFA89_transitionS.length;
-        DFA89_transition = new short[numStates][];
+        int numStates = DFA87_transitionS.length;
+        DFA87_transition = new short[numStates][];
         for (int i=0; i<numStates; i++) {
-            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
+            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
         }
     }
 
-    class DFA89 extends DFA {
+    class DFA87 extends DFA {
 
-        public DFA89(BaseRecognizer recognizer) {
+        public DFA87(BaseRecognizer recognizer) {
             this.recognizer = recognizer;
-            this.decisionNumber = 89;
-            this.eot = DFA89_eot;
-            this.eof = DFA89_eof;
-            this.min = DFA89_min;
-            this.max = DFA89_max;
-            this.accept = DFA89_accept;
-            this.special = DFA89_special;
-            this.transition = DFA89_transition;
+            this.decisionNumber = 87;
+            this.eot = DFA87_eot;
+            this.eof = DFA87_eof;
+            this.min = DFA87_min;
+            this.max = DFA87_max;
+            this.accept = DFA87_accept;
+            this.special = DFA87_special;
+            this.transition = DFA87_transition;
         }
         public String getDescription() {
-            return "992:4: ( CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | PLUS -> PLUS | ASTERISK -> ASTERISK | DASHMATCH -> DASHMATCH | INCLUDES -> INCLUDES | COLON -> COLON | STRING_CHAR -> STRING_CHAR | INVALID_TOKEN -> INVALID_TOKEN )";
+            return "995:4: ( CLASSKEYWORD -> CLASSKEYWORD | NUMBER -> NUMBER | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | PLUS -> PLUS | ASTERISK -> ASTERISK | DASHMATCH -> DASHMATCH | INCLUDES -> INCLUDES | COLON -> COLON | STRING_CHAR -> STRING_CHAR | INVALID_TOKEN -> INVALID_TOKEN )";
         }
     }
-    static final String DFA90_eotS =
+    static final String DFA88_eotS =
         "\37\uffff";
-    static final String DFA90_eofS =
+    static final String DFA88_eofS =
         "\1\1\36\uffff";
-    static final String DFA90_minS =
+    static final String DFA88_minS =
         "\1\27\36\uffff";
-    static final String DFA90_maxS =
+    static final String DFA88_maxS =
         "\1\105\36\uffff";
-    static final String DFA90_acceptS =
+    static final String DFA88_acceptS =
         "\1\uffff\1\2\34\uffff\1\1";
-    static final String DFA90_specialS =
+    static final String DFA88_specialS =
         "\37\uffff}>";
-    static final String[] DFA90_transitionS = {
+    static final String[] DFA88_transitionS = {
             "\1\1\6\uffff\1\36\5\uffff\2\1\1\uffff\1\1\2\uffff\4\1\1\uffff"+
             "\1\1\1\uffff\23\1\1\uffff\1\1",
             "",
@@ -11116,53 +10981,53 @@
             ""
     };
 
-    static final short[] DFA90_eot = DFA.unpackEncodedString(DFA90_eotS);
-    static final short[] DFA90_eof = DFA.unpackEncodedString(DFA90_eofS);
-    static final char[] DFA90_min = DFA.unpackEncodedStringToUnsignedChars(DFA90_minS);
-    static final char[] DFA90_max = DFA.unpackEncodedStringToUnsignedChars(DFA90_maxS);
-    static final short[] DFA90_accept = DFA.unpackEncodedString(DFA90_acceptS);
-    static final short[] DFA90_special = DFA.unpackEncodedString(DFA90_specialS);
-    static final short[][] DFA90_transition;
+    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
+    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
+    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
+    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
+    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
+    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
+    static final short[][] DFA88_transition;
 
     static {
-        int numStates = DFA90_transitionS.length;
-        DFA90_transition = new short[numStates][];
+        int numStates = DFA88_transitionS.length;
+        DFA88_transition = new short[numStates][];
         for (int i=0; i<numStates; i++) {
-            DFA90_transition[i] = DFA.unpackEncodedString(DFA90_transitionS[i]);
+            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
         }
     }
 
-    class DFA90 extends DFA {
+    class DFA88 extends DFA {
 
-        public DFA90(BaseRecognizer recognizer) {
+        public DFA88(BaseRecognizer recognizer) {
             this.recognizer = recognizer;
-            this.decisionNumber = 90;
-            this.eot = DFA90_eot;
-            this.eof = DFA90_eof;
-            this.min = DFA90_min;
-            this.max = DFA90_max;
-            this.accept = DFA90_accept;
-            this.special = DFA90_special;
-            this.transition = DFA90_transition;
+            this.decisionNumber = 88;
+            this.eot = DFA88_eot;
+            this.eof = DFA88_eof;
+            this.min = DFA88_min;
+            this.max = DFA88_max;
+            this.accept = DFA88_accept;
+            this.special = DFA88_special;
+            this.transition = DFA88_transition;
         }
         public String getDescription() {
-            return "()* loopback of 1009:8: ( S )*";
+            return "()* loopback of 1012:8: ( S )*";
         }
     }
-    static final String DFA91_eotS =
+    static final String DFA89_eotS =
         "\24\uffff";
-    static final String DFA91_eofS =
+    static final String DFA89_eofS =
         "\24\uffff";
-    static final String DFA91_minS =
+    static final String DFA89_minS =
         "\1\27\23\uffff";
-    static final String DFA91_maxS =
+    static final String DFA89_maxS =
         "\1\105\23\uffff";
-    static final String DFA91_acceptS =
+    static final String DFA89_acceptS =
         "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
         "\15\1\16\1\17\1\20\1\21\1\22\1\23";
-    static final String DFA91_specialS =
+    static final String DFA89_specialS =
         "\24\uffff}>";
-    static final String[] DFA91_transitionS = {
+    static final String[] DFA89_transitionS = {
             "\1\4\22\uffff\1\10\1\uffff\1\17\1\20\2\uffff\1\23\1\uffff\1"+
             "\1\1\2\1\3\1\5\1\uffff\1\6\1\7\1\11\1\12\1\13\1\14\1\15\1\16"+
             "\1\21\1\uffff\1\22\3\uffff\1\4",
@@ -11187,37 +11052,37 @@
             ""
     };
 
-    static final short[] DFA91_eot = DFA.unpackEncodedString(DFA91_eotS);
-    static final short[] DFA91_eof = DFA.unpackEncodedString(DFA91_eofS);
-    static final char[] DFA91_min = DFA.unpackEncodedStringToUnsignedChars(DFA91_minS);
-    static final char[] DFA91_max = DFA.unpackEncodedStringToUnsignedChars(DFA91_maxS);
-    static final short[] DFA91_accept = DFA.unpackEncodedString(DFA91_acceptS);
-    static final short[] DFA91_special = DFA.unpackEncodedString(DFA91_specialS);
-    static final short[][] DFA91_transition;
+    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
+    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
+    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
+    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
+    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
+    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
+    static final short[][] DFA89_transition;
 
     static {
-        int numStates = DFA91_transitionS.length;
-        DFA91_transition = new short[numStates][];
+        int numStates = DFA89_transitionS.length;
+        DFA89_transition = new short[numStates][];
         for (int i=0; i<numStates; i++) {
-            DFA91_transition[i] = DFA.unpackEncodedString(DFA91_transitionS[i]);
+            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
         }
     }
 
-    class DFA91 extends DFA {
+    class DFA89 extends DFA {
 
-        public DFA91(BaseRecognizer recognizer) {
+        public DFA89(BaseRecognizer recognizer) {
             this.recognizer = recognizer;
-            this.decisionNumber = 91;
-            this.eot = DFA91_eot;
-            this.eof = DFA91_eof;
-            this.min = DFA91_min;
-            this.max = DFA91_max;
-            this.accept = DFA91_accept;
-            this.special = DFA91_special;
-            this.transition = DFA91_transition;
+            this.decisionNumber = 89;
+            this.eot = DFA89_eot;
+            this.eof = DFA89_eof;
+            this.min = DFA89_min;
+            this.max = DFA89_max;
+            this.accept = DFA89_accept;
+            this.special = DFA89_special;
+            this.transition = DFA89_transition;
         }
         public String getDescription() {
-            return "1013:5: ( NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | DASHMATCH -> DASHMATCH | RPAREN -> RPAREN )";
+            return "1016:5: ( NUMBER -> NUMBER | PERCENTAGE -> PERCENTAGE | DIMENSION -> DIMENSION | string -> string | URI -> URI | UNIRANGE -> UNIRANGE | INCLUDES -> INCLUDES | COMMA -> COMMA | GREATER -> GREATER | LESS -> LESS | QUESTION -> QUESTION | PERCENT -> PERCENT | EQUALS -> EQUALS | SLASH -> SLASH | EXCLAMATION -> EXCLAMATION | MINUS -> MINUS | PLUS -> PLUS | DASHMATCH -> DASHMATCH | RPAREN -> RPAREN )";
         }
     }
  
@@ -11291,8 +11156,8 @@
     public static final BitSet FOLLOW_S_in_declaration675 = new BitSet(new long[]{0xFFFEE67040800000L,0x000000000000002FL});
     public static final BitSet FOLLOW_terms_in_declaration678 = new BitSet(new long[]{0x0000100000000002L});
     public static final BitSet FOLLOW_important_in_declaration680 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_noprop_in_declaration699 = new BitSet(new long[]{0xFFFEB43000800002L,0x000000000000002FL});
-    public static final BitSet FOLLOW_any_in_declaration701 = new BitSet(new long[]{0xFFFEB43000800002L,0x000000000000002FL});
+    public static final BitSet FOLLOW_noprop_in_declaration699 = new BitSet(new long[]{0xFFFEB4B000800002L,0x000000000000002FL});
+    public static final BitSet FOLLOW_any_in_declaration701 = new BitSet(new long[]{0xFFFEB4B000800002L,0x000000000000002FL});
     public static final BitSet FOLLOW_EXCLAMATION_in_important727 = new BitSet(new long[]{0x0000000040000000L,0x0000000002000000L});
     public static final BitSet FOLLOW_S_in_important729 = new BitSet(new long[]{0x0000000040000000L,0x0000000002000000L});
     public static final BitSet FOLLOW_89_in_important732 = new BitSet(new long[]{0x0000000040000002L});
@@ -11345,12 +11210,12 @@
     public static final BitSet FOLLOW_LPAREN_in_valuepart1292 = new BitSet(new long[]{0xFFFFE43000800000L,0x000000000000002FL});
     public static final BitSet FOLLOW_valuepart_in_valuepart1294 = new BitSet(new long[]{0xFFFFE43000800000L,0x000000000000002FL});
     public static final BitSet FOLLOW_RPAREN_in_valuepart1297 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_LBRACE_in_valuepart1316 = new BitSet(new long[]{0xFFFEE43000800000L,0x000000000000003FL});
-    public static final BitSet FOLLOW_valuepart_in_valuepart1318 = new BitSet(new long[]{0xFFFEE43000800000L,0x000000000000003FL});
+    public static final BitSet FOLLOW_LBRACE_in_valuepart1316 = new BitSet(new long[]{0xFFFFE43000800000L,0x000000000000003FL});
+    public static final BitSet FOLLOW_valuepart_in_valuepart1318 = new BitSet(new long[]{0xFFFFE43000800000L,0x000000000000003FL});
     public static final BitSet FOLLOW_RBRACE_in_valuepart1321 = new BitSet(new long[]{0x0000000040000002L});
     public static final BitSet FOLLOW_S_in_valuepart1339 = new BitSet(new long[]{0x0000000040000002L});
     public static final BitSet FOLLOW_selector_in_combined_selector1356 = new BitSet(new long[]{0x8200000040000002L});
-    public static final BitSet FOLLOW_combinator_in_combined_selector1360 = new BitSet(new long[]{0x0042003002000000L,0x0000000000000009L});
+    public static final BitSet FOLLOW_combinator_in_combined_selector1360 = new BitSet(new long[]{0x0042003042000000L,0x0000000000000009L});
     public static final BitSet FOLLOW_selector_in_combined_selector1363 = new BitSet(new long[]{0x8200000040000002L});
     public static final BitSet FOLLOW_GREATER_in_combinator1383 = new BitSet(new long[]{0x0000000040000002L});
     public static final BitSet FOLLOW_S_in_combinator1385 = new BitSet(new long[]{0x0000000040000002L});
@@ -11378,87 +11243,86 @@
     public static final BitSet FOLLOW_IDENT_in_attribute1612 = new BitSet(new long[]{0x0000000040000002L});
     public static final BitSet FOLLOW_string_in_attribute1616 = new BitSet(new long[]{0x0000000040000002L});
     public static final BitSet FOLLOW_S_in_attribute1619 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_COLON_in_pseudo1633 = new BitSet(new long[]{0x0000803000000000L});
-    public static final BitSet FOLLOW_COLON_in_pseudo1635 = new BitSet(new long[]{0x0000802000000000L});
-    public static final BitSet FOLLOW_IDENT_in_pseudo1639 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_FUNCTION_in_pseudo1643 = new BitSet(new long[]{0x0000002040000000L});
-    public static final BitSet FOLLOW_S_in_pseudo1645 = new BitSet(new long[]{0x0000002040000000L});
-    public static final BitSet FOLLOW_IDENT_in_pseudo1649 = new BitSet(new long[]{0x0001000040000000L});
-    public static final BitSet FOLLOW_S_in_pseudo1651 = new BitSet(new long[]{0x0001000040000000L});
-    public static final BitSet FOLLOW_RPAREN_in_pseudo1654 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_pseudocolon_in_pseudo1633 = new BitSet(new long[]{0x0000802000000000L});
+    public static final BitSet FOLLOW_IDENT_in_pseudo1637 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_FUNCTION_in_pseudo1641 = new BitSet(new long[]{0x0004002000000000L});
+    public static final BitSet FOLLOW_set_in_pseudo1643 = new BitSet(new long[]{0x0001000000000000L});
+    public static final BitSet FOLLOW_RPAREN_in_pseudo1651 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_COLON_in_pseudocolon1672 = new BitSet(new long[]{0x0000001000000002L});
+    public static final BitSet FOLLOW_COLON_in_pseudocolon1674 = new BitSet(new long[]{0x0000000000000002L});
     public static final BitSet FOLLOW_set_in_string0 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_IDENT_in_any1708 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_CLASSKEYWORD_in_any1719 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_NUMBER_in_any1730 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_PERCENTAGE_in_any1741 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_DIMENSION_in_any1751 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_string_in_any1762 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_URI_in_any1776 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_HASH_in_any1793 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_UNIRANGE_in_any1807 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_INCLUDES_in_any1821 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_COLON_in_any1835 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_COMMA_in_any1849 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_GREATER_in_any1863 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_LESS_in_any1877 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_QUESTION_in_any1891 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_PERCENT_in_any1905 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_EQUALS_in_any1919 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_SLASH_in_any1933 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_EXCLAMATION_in_any1947 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_MINUS_in_any1958 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_PLUS_in_any1969 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_ASTERISK_in_any1980 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_FUNCTION_in_any1997 = new BitSet(new long[]{0xFFFFB43040800000L,0x000000000000002FL});
-    public static final BitSet FOLLOW_S_in_any1999 = new BitSet(new long[]{0xFFFFB43040800000L,0x000000000000002FL});
-    public static final BitSet FOLLOW_any_in_any2002 = new BitSet(new long[]{0xFFFFB43000800000L,0x000000000000002FL});
-    public static final BitSet FOLLOW_RPAREN_in_any2005 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_DASHMATCH_in_any2025 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_LPAREN_in_any2039 = new BitSet(new long[]{0xFFFFB43000800000L,0x000000000000002FL});
-    public static final BitSet FOLLOW_any_in_any2041 = new BitSet(new long[]{0xFFFFB43000800000L,0x000000000000002FL});
-    public static final BitSet FOLLOW_RPAREN_in_any2044 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_LBRACE_in_any2063 = new BitSet(new long[]{0xFFFEB43000800000L,0x000000000000003FL});
-    public static final BitSet FOLLOW_any_in_any2065 = new BitSet(new long[]{0xFFFEB43000800000L,0x000000000000003FL});
-    public static final BitSet FOLLOW_RBRACE_in_any2068 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_S_in_any2086 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_RCURLY_in_nostatement2101 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_SEMICOLON_in_nostatement2115 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_CLASSKEYWORD_in_noprop2138 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_NUMBER_in_noprop2151 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_COMMA_in_noprop2163 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_GREATER_in_noprop2175 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_LESS_in_noprop2187 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_QUESTION_in_noprop2199 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_PERCENT_in_noprop2211 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_EQUALS_in_noprop2223 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_SLASH_in_noprop2235 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_EXCLAMATION_in_noprop2247 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_PLUS_in_noprop2259 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_ASTERISK_in_noprop2271 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_DASHMATCH_in_noprop2286 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_INCLUDES_in_noprop2298 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_COLON_in_noprop2310 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_STRING_CHAR_in_noprop2322 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_INVALID_TOKEN_in_noprop2334 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_S_in_noprop2347 = new BitSet(new long[]{0x0000000040000002L});
-    public static final BitSet FOLLOW_NUMBER_in_norule2362 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_PERCENTAGE_in_norule2375 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_DIMENSION_in_norule2387 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_string_in_norule2400 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_URI_in_norule2414 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_UNIRANGE_in_norule2431 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_INCLUDES_in_norule2445 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_COMMA_in_norule2459 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_GREATER_in_norule2473 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_LESS_in_norule2487 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_QUESTION_in_norule2501 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_PERCENT_in_norule2515 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_EQUALS_in_norule2529 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_SLASH_in_norule2543 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_EXCLAMATION_in_norule2557 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_MINUS_in_norule2570 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_PLUS_in_norule2583 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_DASHMATCH_in_norule2597 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_RPAREN_in_norule2611 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_IDENT_in_any1711 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_CLASSKEYWORD_in_any1722 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_NUMBER_in_any1733 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_PERCENTAGE_in_any1744 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_DIMENSION_in_any1754 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_string_in_any1765 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_URI_in_any1779 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_HASH_in_any1796 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_UNIRANGE_in_any1810 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_INCLUDES_in_any1824 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_COLON_in_any1838 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_COMMA_in_any1852 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_GREATER_in_any1866 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_LESS_in_any1880 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_QUESTION_in_any1894 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_PERCENT_in_any1908 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_EQUALS_in_any1922 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_SLASH_in_any1936 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_EXCLAMATION_in_any1950 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_MINUS_in_any1961 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_PLUS_in_any1972 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_ASTERISK_in_any1983 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_FUNCTION_in_any2000 = new BitSet(new long[]{0xFFFFB4B040800000L,0x000000000000002FL});
+    public static final BitSet FOLLOW_S_in_any2002 = new BitSet(new long[]{0xFFFFB4B040800000L,0x000000000000002FL});
+    public static final BitSet FOLLOW_any_in_any2005 = new BitSet(new long[]{0xFFFFB4B000800000L,0x000000000000002FL});
+    public static final BitSet FOLLOW_RPAREN_in_any2008 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_DASHMATCH_in_any2028 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_LPAREN_in_any2042 = new BitSet(new long[]{0xFFFFB4B000800000L,0x000000000000002FL});
+    public static final BitSet FOLLOW_any_in_any2044 = new BitSet(new long[]{0xFFFFB4B000800000L,0x000000000000002FL});
+    public static final BitSet FOLLOW_RPAREN_in_any2047 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_LBRACE_in_any2066 = new BitSet(new long[]{0xFFFEB4B000800000L,0x000000000000003FL});
+    public static final BitSet FOLLOW_any_in_any2068 = new BitSet(new long[]{0xFFFEB4B000800000L,0x000000000000003FL});
+    public static final BitSet FOLLOW_RBRACE_in_any2071 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_S_in_any2089 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_RCURLY_in_nostatement2104 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_SEMICOLON_in_nostatement2118 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_CLASSKEYWORD_in_noprop2141 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_NUMBER_in_noprop2154 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_COMMA_in_noprop2166 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_GREATER_in_noprop2178 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_LESS_in_noprop2190 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_QUESTION_in_noprop2202 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_PERCENT_in_noprop2214 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_EQUALS_in_noprop2226 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_SLASH_in_noprop2238 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_EXCLAMATION_in_noprop2250 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_PLUS_in_noprop2262 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_ASTERISK_in_noprop2274 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_DASHMATCH_in_noprop2289 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_INCLUDES_in_noprop2301 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_COLON_in_noprop2313 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_STRING_CHAR_in_noprop2325 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_INVALID_TOKEN_in_noprop2337 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_S_in_noprop2350 = new BitSet(new long[]{0x0000000040000002L});
+    public static final BitSet FOLLOW_NUMBER_in_norule2365 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_PERCENTAGE_in_norule2378 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_DIMENSION_in_norule2390 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_string_in_norule2403 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_URI_in_norule2417 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_UNIRANGE_in_norule2434 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_INCLUDES_in_norule2448 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_COMMA_in_norule2462 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_GREATER_in_norule2476 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_LESS_in_norule2490 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_QUESTION_in_norule2504 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_PERCENT_in_norule2518 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_EQUALS_in_norule2532 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_SLASH_in_norule2546 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_EXCLAMATION_in_norule2560 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_MINUS_in_norule2573 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_PLUS_in_norule2586 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_DASHMATCH_in_norule2600 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_RPAREN_in_norule2614 = new BitSet(new long[]{0x0000000000000002L});
 
 }
\ No newline at end of file
Index: cz/vutbr/web/csskit/antlr/CSSTreeParser.java
===================================================================
--- cz/vutbr/web/csskit/antlr/CSSTreeParser.java	(revision 656)
+++ cz/vutbr/web/csskit/antlr/CSSTreeParser.java	(working copy)
@@ -1,4 +1,4 @@
-// $ANTLR 3.1.2 /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g 2012-06-04 10:42:29
+// $ANTLR 3.1 CSSTreeParser.g 2012-08-17 12:13:40
 
 package cz.vutbr.web.csskit.antlr;
 
@@ -141,7 +141,7 @@
         
 
     public String[] getTokenNames() { return CSSTreeParser.tokenNames; }
-    public String getGrammarFileName() { return "/home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g"; }
+    public String getGrammarFileName() { return "CSSTreeParser.g"; }
 
 
     	private static Logger log = LoggerFactory.getLogger(CSSTreeParser.class);
@@ -205,7 +205,7 @@
 
 
     // $ANTLR start "inlinestyle"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:99:1: inlinestyle returns [StyleSheet sheet] : ( ^( INLINESTYLE decl= declarations ) | ^( INLINESTYLE (irs= inlineset )+ ) );
+    // CSSTreeParser.g:99:1: inlinestyle returns [StyleSheet sheet] : ( ^( INLINESTYLE decl= declarations ) | ^( INLINESTYLE (irs= inlineset )+ ) );
     public final StyleSheet inlinestyle() throws RecognitionException {
         StyleSheet sheet = null;
 
@@ -219,7 +219,7 @@
         	sheet = this.stylesheet;
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:110:2: ( ^( INLINESTYLE decl= declarations ) | ^( INLINESTYLE (irs= inlineset )+ ) )
+            // CSSTreeParser.g:110:2: ( ^( INLINESTYLE decl= declarations ) | ^( INLINESTYLE (irs= inlineset )+ ) )
             int alt2=2;
             int LA2_0 = input.LA(1);
 
@@ -257,7 +257,7 @@
             }
             switch (alt2) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:110:5: ^( INLINESTYLE decl= declarations )
+                    // CSSTreeParser.g:110:5: ^( INLINESTYLE decl= declarations )
                     {
                     match(input,INLINESTYLE,FOLLOW_INLINESTYLE_in_inlinestyle59); 
 
@@ -279,12 +279,12 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:117:6: ^( INLINESTYLE (irs= inlineset )+ )
+                    // CSSTreeParser.g:117:6: ^( INLINESTYLE (irs= inlineset )+ )
                     {
                     match(input,INLINESTYLE,FOLLOW_INLINESTYLE_in_inlinestyle78); 
 
                     match(input, Token.DOWN, null); 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:118:5: (irs= inlineset )+
+                    // CSSTreeParser.g:118:5: (irs= inlineset )+
                     int cnt1=0;
                     loop1:
                     do {
@@ -298,7 +298,7 @@
 
                         switch (alt1) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:118:6: irs= inlineset
+                    	    // CSSTreeParser.g:118:6: irs= inlineset
                     	    {
                     	    pushFollow(FOLLOW_inlineset_in_inlinestyle88);
                     	    irs=inlineset();
@@ -345,7 +345,7 @@
 
 
     // $ANTLR start "stylesheet"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:122:1: stylesheet returns [StyleSheet sheet] : ^( STYLESHEET (s= statement )* ) ;
+    // CSSTreeParser.g:122:1: stylesheet returns [StyleSheet sheet] : ^( STYLESHEET (s= statement )* ) ;
     public final StyleSheet stylesheet() throws RecognitionException {
         StyleSheet sheet = null;
 
@@ -357,14 +357,14 @@
         	sheet = this.stylesheet;
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:136:2: ( ^( STYLESHEET (s= statement )* ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:136:4: ^( STYLESHEET (s= statement )* )
+            // CSSTreeParser.g:136:2: ( ^( STYLESHEET (s= statement )* ) )
+            // CSSTreeParser.g:136:4: ^( STYLESHEET (s= statement )* )
             {
             match(input,STYLESHEET,FOLLOW_STYLESHEET_in_stylesheet125); 
 
             if ( input.LA(1)==Token.DOWN ) {
                 match(input, Token.DOWN, null); 
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:137:4: (s= statement )*
+                // CSSTreeParser.g:137:4: (s= statement )*
                 loop3:
                 do {
                     int alt3=2;
@@ -377,7 +377,7 @@
 
                     switch (alt3) {
                 	case 1 :
-                	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:137:5: s= statement
+                	    // CSSTreeParser.g:137:5: s= statement
                 	    {
                 	    pushFollow(FOLLOW_statement_in_stylesheet134);
                 	    s=statement();
@@ -425,7 +425,7 @@
 
 
     // $ANTLR start "statement"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:141:1: statement returns [RuleBlock<?> stm] : (rs= ruleset | ats= atstatement | INVALID_STATEMENT );
+    // CSSTreeParser.g:141:1: statement returns [RuleBlock<?> stm] : (rs= ruleset | ats= atstatement | INVALID_STATEMENT );
     public final RuleBlock<?> statement() throws RecognitionException {
         statement_stack.push(new statement_scope());
         RuleBlock<?> stm = null;
@@ -440,7 +440,7 @@
         	((statement_scope)statement_stack.peek()).invalid = false;
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:162:2: (rs= ruleset | ats= atstatement | INVALID_STATEMENT )
+            // CSSTreeParser.g:162:2: (rs= ruleset | ats= atstatement | INVALID_STATEMENT )
             int alt4=3;
             switch ( input.LA(1) ) {
             case RULE:
@@ -472,7 +472,7 @@
 
             switch (alt4) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:162:4: rs= ruleset
+                    // CSSTreeParser.g:162:4: rs= ruleset
                     {
                     pushFollow(FOLLOW_ruleset_in_statement183);
                     rs=ruleset();
@@ -484,7 +484,7 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:163:4: ats= atstatement
+                    // CSSTreeParser.g:163:4: ats= atstatement
                     {
                     pushFollow(FOLLOW_atstatement_in_statement193);
                     ats=atstatement();
@@ -496,7 +496,7 @@
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:164:4: INVALID_STATEMENT
+                    // CSSTreeParser.g:164:4: INVALID_STATEMENT
                     {
                     match(input,INVALID_STATEMENT,FOLLOW_INVALID_STATEMENT_in_statement200); 
                      ((statement_scope)statement_stack.peek()).invalid = true; 
@@ -529,7 +529,7 @@
 
 
     // $ANTLR start "atstatement"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:168:1: atstatement returns [RuleBlock<?> stmnt] : ( CHARSET | INVALID_IMPORT | i= IMPORT | IMPORT_END | ^( PAGE (i= IDENT )? decl= declarations ) | ^( MEDIA (mediaList= media )? (rs= ruleset | INVALID_STATEMENT )* ) );
+    // CSSTreeParser.g:168:1: atstatement returns [RuleBlock<?> stmnt] : ( CHARSET | INVALID_IMPORT | i= IMPORT | IMPORT_END | ^( PAGE (i= IDENT )? decl= declarations ) | ^( MEDIA (mediaList= media )? (rs= ruleset | INVALID_STATEMENT )* ) );
     public final RuleBlock<?> atstatement() throws RecognitionException {
         atstatement_stack.push(new atstatement_scope());
         RuleBlock<?> stmnt = null;
@@ -551,7 +551,7 @@
         	Priority mark = preparator.markPriority();
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:183:2: ( CHARSET | INVALID_IMPORT | i= IMPORT | IMPORT_END | ^( PAGE (i= IDENT )? decl= declarations ) | ^( MEDIA (mediaList= media )? (rs= ruleset | INVALID_STATEMENT )* ) )
+            // CSSTreeParser.g:183:2: ( CHARSET | INVALID_IMPORT | i= IMPORT | IMPORT_END | ^( PAGE (i= IDENT )? decl= declarations ) | ^( MEDIA (mediaList= media )? (rs= ruleset | INVALID_STATEMENT )* ) )
             int alt8=6;
             switch ( input.LA(1) ) {
             case CHARSET:
@@ -593,21 +593,21 @@
 
             switch (alt8) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:183:4: CHARSET
+                    // CSSTreeParser.g:183:4: CHARSET
                     {
                     match(input,CHARSET,FOLLOW_CHARSET_in_atstatement233); 
 
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:184:4: INVALID_IMPORT
+                    // CSSTreeParser.g:184:4: INVALID_IMPORT
                     {
                     match(input,INVALID_IMPORT,FOLLOW_INVALID_IMPORT_in_atstatement239); 
 
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:185:4: i= IMPORT
+                    // CSSTreeParser.g:185:4: i= IMPORT
                     {
                     i=(CommonTree)match(input,IMPORT,FOLLOW_IMPORT_in_atstatement247); 
 
@@ -621,7 +621,7 @@
                     }
                     break;
                 case 4 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:193:4: IMPORT_END
+                    // CSSTreeParser.g:193:4: IMPORT_END
                     {
                     match(input,IMPORT_END,FOLLOW_IMPORT_END_in_atstatement258); 
 
@@ -632,12 +632,12 @@
                     }
                     break;
                 case 5 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:197:4: ^( PAGE (i= IDENT )? decl= declarations )
+                    // CSSTreeParser.g:197:4: ^( PAGE (i= IDENT )? decl= declarations )
                     {
                     match(input,PAGE,FOLLOW_PAGE_in_atstatement266); 
 
                     match(input, Token.DOWN, null); 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:197:11: (i= IDENT )?
+                    // CSSTreeParser.g:197:11: (i= IDENT )?
                     int alt5=2;
                     int LA5_0 = input.LA(1);
 
@@ -646,7 +646,7 @@
                     }
                     switch (alt5) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:197:12: i= IDENT
+                            // CSSTreeParser.g:197:12: i= IDENT
                             {
                             i=(CommonTree)match(input,IDENT,FOLLOW_IDENT_in_atstatement271); 
                              pseudo=extractText(i);
@@ -668,13 +668,13 @@
                     }
                     break;
                 case 6 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:199:4: ^( MEDIA (mediaList= media )? (rs= ruleset | INVALID_STATEMENT )* )
+                    // CSSTreeParser.g:199:4: ^( MEDIA (mediaList= media )? (rs= ruleset | INVALID_STATEMENT )* )
                     {
                     match(input,MEDIA,FOLLOW_MEDIA_in_atstatement289); 
 
                     if ( input.LA(1)==Token.DOWN ) {
                         match(input, Token.DOWN, null); 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:199:12: (mediaList= media )?
+                        // CSSTreeParser.g:199:12: (mediaList= media )?
                         int alt6=2;
                         int LA6_0 = input.LA(1);
 
@@ -683,7 +683,7 @@
                         }
                         switch (alt6) {
                             case 1 :
-                                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:199:13: mediaList= media
+                                // CSSTreeParser.g:199:13: mediaList= media
                                 {
                                 pushFollow(FOLLOW_media_in_atstatement294);
                                 mediaList=media();
@@ -696,7 +696,7 @@
 
                         }
 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:200:4: (rs= ruleset | INVALID_STATEMENT )*
+                        // CSSTreeParser.g:200:4: (rs= ruleset | INVALID_STATEMENT )*
                         loop7:
                         do {
                             int alt7=3;
@@ -712,7 +712,7 @@
 
                             switch (alt7) {
                         	case 1 :
-                        	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:200:7: rs= ruleset
+                        	    // CSSTreeParser.g:200:7: rs= ruleset
                         	    {
                         	    pushFollow(FOLLOW_ruleset_in_atstatement307);
                         	    rs=ruleset();
@@ -732,7 +732,7 @@
                         	    }
                         	    break;
                         	case 2 :
-                        	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:209:8: INVALID_STATEMENT
+                        	    // CSSTreeParser.g:209:8: INVALID_STATEMENT
                         	    {
                         	    match(input,INVALID_STATEMENT,FOLLOW_INVALID_STATEMENT_in_atstatement318); 
                         	     log.debug("Skiping invalid statement in media"); 
@@ -773,7 +773,7 @@
 
 
     // $ANTLR start "media"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:218:1: media returns [List<String> affected] : (i= IDENT )+ ;
+    // CSSTreeParser.g:218:1: media returns [List<String> affected] : (i= IDENT )+ ;
     public final List<String> media() throws RecognitionException {
         List<String> affected = null;
 
@@ -784,10 +784,10 @@
            affected = new ArrayList<String>();
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:227:2: ( (i= IDENT )+ )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:227:4: (i= IDENT )+
+            // CSSTreeParser.g:227:2: ( (i= IDENT )+ )
+            // CSSTreeParser.g:227:4: (i= IDENT )+
             {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:227:4: (i= IDENT )+
+            // CSSTreeParser.g:227:4: (i= IDENT )+
             int cnt9=0;
             loop9:
             do {
@@ -801,7 +801,7 @@
 
                 switch (alt9) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:227:5: i= IDENT
+            	    // CSSTreeParser.g:227:5: i= IDENT
             	    {
             	    i=(CommonTree)match(input,IDENT,FOLLOW_IDENT_in_media373); 
 
@@ -841,7 +841,7 @@
 
 
     // $ANTLR start "inlineset"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:233:1: inlineset returns [RuleBlock<?> is] : ^( RULE (p= pseudo )* decl= declarations ) ;
+    // CSSTreeParser.g:233:1: inlineset returns [RuleBlock<?> is] : ^( RULE (p= pseudo )* decl= declarations ) ;
     public final RuleBlock<?> inlineset() throws RecognitionException {
         RuleBlock<?> is = null;
 
@@ -855,13 +855,13 @@
         	 List<Selector.PseudoPage> pplist = new ArrayList<Selector.PseudoPage>();
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:241:2: ( ^( RULE (p= pseudo )* decl= declarations ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:241:4: ^( RULE (p= pseudo )* decl= declarations )
+            // CSSTreeParser.g:241:2: ( ^( RULE (p= pseudo )* decl= declarations ) )
+            // CSSTreeParser.g:241:4: ^( RULE (p= pseudo )* decl= declarations )
             {
             match(input,RULE,FOLLOW_RULE_in_inlineset408); 
 
             match(input, Token.DOWN, null); 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:241:11: (p= pseudo )*
+            // CSSTreeParser.g:241:11: (p= pseudo )*
             loop10:
             do {
                 int alt10=2;
@@ -874,7 +874,7 @@
 
                 switch (alt10) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:241:12: p= pseudo
+            	    // CSSTreeParser.g:241:12: p= pseudo
             	    {
             	    pushFollow(FOLLOW_pseudo_in_inlineset413);
             	    p=pseudo();
@@ -918,7 +918,7 @@
 
 
     // $ANTLR start "ruleset"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:246:1: ruleset returns [RuleBlock<?> stmnt] : ^( RULE (cs= combined_selector )* decl= declarations ) ;
+    // CSSTreeParser.g:246:1: ruleset returns [RuleBlock<?> stmnt] : ^( RULE (cs= combined_selector )* decl= declarations ) ;
     public final RuleBlock<?> ruleset() throws RecognitionException {
         RuleBlock<?> stmnt = null;
 
@@ -932,13 +932,13 @@
             List<CombinedSelector> cslist = new ArrayList<CombinedSelector>();
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:267:5: ( ^( RULE (cs= combined_selector )* decl= declarations ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:267:7: ^( RULE (cs= combined_selector )* decl= declarations )
+            // CSSTreeParser.g:267:5: ( ^( RULE (cs= combined_selector )* decl= declarations ) )
+            // CSSTreeParser.g:267:7: ^( RULE (cs= combined_selector )* decl= declarations )
             {
             match(input,RULE,FOLLOW_RULE_in_ruleset474); 
 
             match(input, Token.DOWN, null); 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:268:9: (cs= combined_selector )*
+            // CSSTreeParser.g:268:9: (cs= combined_selector )*
             loop11:
             do {
                 int alt11=2;
@@ -951,7 +951,7 @@
 
                 switch (alt11) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:268:10: cs= combined_selector
+            	    // CSSTreeParser.g:268:10: cs= combined_selector
             	    {
             	    pushFollow(FOLLOW_combined_selector_in_ruleset488);
             	    cs=combined_selector();
@@ -1007,7 +1007,7 @@
 
 
     // $ANTLR start "declarations"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:278:1: declarations returns [List<Declaration> decl] : ^( SET (d= declaration )* ) ;
+    // CSSTreeParser.g:278:1: declarations returns [List<Declaration> decl] : ^( SET (d= declaration )* ) ;
     public final List<Declaration> declarations() throws RecognitionException {
         List<Declaration> decl = null;
 
@@ -1019,14 +1019,14 @@
         		  decl = new ArrayList<Declaration>();
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:289:2: ( ^( SET (d= declaration )* ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:289:4: ^( SET (d= declaration )* )
+            // CSSTreeParser.g:289:2: ( ^( SET (d= declaration )* ) )
+            // CSSTreeParser.g:289:4: ^( SET (d= declaration )* )
             {
             match(input,SET,FOLLOW_SET_in_declarations550); 
 
             if ( input.LA(1)==Token.DOWN ) {
                 match(input, Token.DOWN, null); 
-                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:289:10: (d= declaration )*
+                // CSSTreeParser.g:289:10: (d= declaration )*
                 loop12:
                 do {
                     int alt12=2;
@@ -1039,7 +1039,7 @@
 
                     switch (alt12) {
                 	case 1 :
-                	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:289:11: d= declaration
+                	    // CSSTreeParser.g:289:11: d= declaration
                 	    {
                 	    pushFollow(FOLLOW_declaration_in_declarations555);
                 	    d=declaration();
@@ -1089,7 +1089,7 @@
 
 
     // $ANTLR start "declaration"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:299:1: declaration returns [Declaration decl] : ( ^( DECLARATION ( important )? ( INVALID_DIRECTIVE )? property t= terms ) | INVALID_DECLARATION );
+    // CSSTreeParser.g:299:1: declaration returns [Declaration decl] : ( ^( DECLARATION ( important )? ( INVALID_DIRECTIVE )? property t= terms ) | INVALID_DECLARATION );
     public final Declaration declaration() throws RecognitionException {
         declaration_stack.push(new declaration_scope());
         Declaration decl = null;
@@ -1103,7 +1103,7 @@
             ((declaration_scope)declaration_stack.peek()).invalid = false;
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:322:3: ( ^( DECLARATION ( important )? ( INVALID_DIRECTIVE )? property t= terms ) | INVALID_DECLARATION )
+            // CSSTreeParser.g:322:3: ( ^( DECLARATION ( important )? ( INVALID_DIRECTIVE )? property t= terms ) | INVALID_DECLARATION )
             int alt15=2;
             int LA15_0 = input.LA(1);
 
@@ -1121,12 +1121,12 @@
             }
             switch (alt15) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:322:5: ^( DECLARATION ( important )? ( INVALID_DIRECTIVE )? property t= terms )
+                    // CSSTreeParser.g:322:5: ^( DECLARATION ( important )? ( INVALID_DIRECTIVE )? property t= terms )
                     {
                     match(input,DECLARATION,FOLLOW_DECLARATION_in_declaration599); 
 
                     match(input, Token.DOWN, null); 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:323:6: ( important )?
+                    // CSSTreeParser.g:323:6: ( important )?
                     int alt13=2;
                     int LA13_0 = input.LA(1);
 
@@ -1135,7 +1135,7 @@
                     }
                     switch (alt13) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:323:7: important
+                            // CSSTreeParser.g:323:7: important
                             {
                             pushFollow(FOLLOW_important_in_declaration608);
                             important();
@@ -1149,7 +1149,7 @@
 
                     }
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:324:7: ( INVALID_DIRECTIVE )?
+                    // CSSTreeParser.g:324:7: ( INVALID_DIRECTIVE )?
                     int alt14=2;
                     int LA14_0 = input.LA(1);
 
@@ -1158,7 +1158,7 @@
                     }
                     switch (alt14) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:324:8: INVALID_DIRECTIVE
+                            // CSSTreeParser.g:324:8: INVALID_DIRECTIVE
                             {
                             match(input,INVALID_DIRECTIVE,FOLLOW_INVALID_DIRECTIVE_in_declaration621); 
                              ((declaration_scope)declaration_stack.peek()).invalid =true; 
@@ -1185,7 +1185,7 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:328:4: INVALID_DECLARATION
+                    // CSSTreeParser.g:328:4: INVALID_DECLARATION
                     {
                     match(input,INVALID_DECLARATION,FOLLOW_INVALID_DECLARATION_in_declaration664); 
                      ((declaration_scope)declaration_stack.peek()).invalid =true;
@@ -1218,11 +1218,11 @@
 
 
     // $ANTLR start "important"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:331:1: important : IMPORTANT ;
+    // CSSTreeParser.g:331:1: important : IMPORTANT ;
     public final void important() throws RecognitionException {
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:332:5: ( IMPORTANT )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:332:7: IMPORTANT
+            // CSSTreeParser.g:332:5: ( IMPORTANT )
+            // CSSTreeParser.g:332:7: IMPORTANT
             {
             match(input,IMPORTANT,FOLLOW_IMPORTANT_in_important681); 
 
@@ -1241,7 +1241,7 @@
 
 
     // $ANTLR start "property"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:335:1: property : (i= IDENT | MINUS i= IDENT );
+    // CSSTreeParser.g:335:1: property : (i= IDENT | MINUS i= IDENT );
     public final void property() throws RecognitionException {
         CommonTree i=null;
 
@@ -1249,7 +1249,7 @@
             logEnter("property");
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:346:3: (i= IDENT | MINUS i= IDENT )
+            // CSSTreeParser.g:346:3: (i= IDENT | MINUS i= IDENT )
             int alt16=2;
             int LA16_0 = input.LA(1);
 
@@ -1267,7 +1267,7 @@
             }
             switch (alt16) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:346:5: i= IDENT
+                    // CSSTreeParser.g:346:5: i= IDENT
                     {
                     i=(CommonTree)match(input,IDENT,FOLLOW_IDENT_in_property721); 
                      ((declaration_scope)declaration_stack.peek()).d.setProperty(extractText(i)); 
@@ -1275,7 +1275,7 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:347:5: MINUS i= IDENT
+                    // CSSTreeParser.g:347:5: MINUS i= IDENT
                     {
                     match(input,MINUS,FOLLOW_MINUS_in_property729); 
                     i=(CommonTree)match(input,IDENT,FOLLOW_IDENT_in_property735); 
@@ -1311,7 +1311,7 @@
 
 
     // $ANTLR start "terms"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:350:1: terms returns [List<Term<?>> tlist] : ^( VALUE ( term )+ ) ;
+    // CSSTreeParser.g:350:1: terms returns [List<Term<?>> tlist] : ^( VALUE ( term )+ ) ;
     public final List<Term<?>> terms() throws RecognitionException {
         terms_stack.push(new terms_scope());
         List<Term<?>> tlist = null;
@@ -1325,13 +1325,13 @@
             ((terms_scope)terms_stack.peek()).dash = false;
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:373:5: ( ^( VALUE ( term )+ ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:373:7: ^( VALUE ( term )+ )
+            // CSSTreeParser.g:373:5: ( ^( VALUE ( term )+ ) )
+            // CSSTreeParser.g:373:7: ^( VALUE ( term )+ )
             {
             match(input,VALUE,FOLLOW_VALUE_in_terms780); 
 
             match(input, Token.DOWN, null); 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:373:15: ( term )+
+            // CSSTreeParser.g:373:15: ( term )+
             int cnt17=0;
             loop17:
             do {
@@ -1345,7 +1345,7 @@
 
                 switch (alt17) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:373:15: term
+            	    // CSSTreeParser.g:373:15: term
             	    {
             	    pushFollow(FOLLOW_term_in_terms782);
             	    term();
@@ -1388,13 +1388,13 @@
 
 
     // $ANTLR start "term"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:376:1: term : ( valuepart | CURLYBLOCK | ATKEYWORD );
+    // CSSTreeParser.g:376:1: term : ( valuepart | CURLYBLOCK | ATKEYWORD );
     public final void term() throws RecognitionException {
 
           logEnter("term");
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:380:5: ( valuepart | CURLYBLOCK | ATKEYWORD )
+            // CSSTreeParser.g:380:5: ( valuepart | CURLYBLOCK | ATKEYWORD )
             int alt18=3;
             switch ( input.LA(1) ) {
             case PARENBLOCK:
@@ -1447,7 +1447,7 @@
 
             switch (alt18) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:380:7: valuepart
+                    // CSSTreeParser.g:380:7: valuepart
                     {
                     pushFollow(FOLLOW_valuepart_in_term810);
                     valuepart();
@@ -1469,7 +1469,7 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:392:7: CURLYBLOCK
+                    // CSSTreeParser.g:392:7: CURLYBLOCK
                     {
                     match(input,CURLYBLOCK,FOLLOW_CURLYBLOCK_in_term827); 
                      ((declaration_scope)declaration_stack.peek()).invalid = true;
@@ -1477,7 +1477,7 @@
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:393:7: ATKEYWORD
+                    // CSSTreeParser.g:393:7: ATKEYWORD
                     {
                     match(input,ATKEYWORD,FOLLOW_ATKEYWORD_in_term837); 
                      ((declaration_scope)declaration_stack.peek()).invalid = true;
@@ -1499,7 +1499,7 @@
 
 
     // $ANTLR start "valuepart"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:396:1: valuepart : ( ( MINUS )? i= IDENT | CLASSKEYWORD | ( MINUS )? n= NUMBER | ( MINUS )? p= PERCENTAGE | ( MINUS )? d= DIMENSION | s= string | u= URI | h= HASH | UNIRANGE | INCLUDES | COLON | COMMA | GREATER | LESS | QUESTION | PERCENT | EQUALS | SLASH | PLUS | ASTERISK | e= EXPRESSION | ( MINUS )? ^(f= FUNCTION (t= terms )? ) | DASHMATCH | ^( PARENBLOCK ( any )* ) | ^( BRACEBLOCK ( any )* ) );
+    // CSSTreeParser.g:396:1: valuepart : ( ( MINUS )? i= IDENT | CLASSKEYWORD | ( MINUS )? n= NUMBER | ( MINUS )? p= PERCENTAGE | ( MINUS )? d= DIMENSION | s= string | u= URI | h= HASH | UNIRANGE | INCLUDES | COLON | COMMA | GREATER | LESS | QUESTION | PERCENT | EQUALS | SLASH | PLUS | ASTERISK | e= EXPRESSION | ( MINUS )? ^(f= FUNCTION (t= terms )? ) | DASHMATCH | ^( PARENBLOCK ( any )* ) | ^( BRACEBLOCK ( any )* ) );
     public final void valuepart() throws RecognitionException {
         CommonTree i=null;
         CommonTree n=null;
@@ -1515,14 +1515,14 @@
 
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:418:5: ( ( MINUS )? i= IDENT | CLASSKEYWORD | ( MINUS )? n= NUMBER | ( MINUS )? p= PERCENTAGE | ( MINUS )? d= DIMENSION | s= string | u= URI | h= HASH | UNIRANGE | INCLUDES | COLON | COMMA | GREATER | LESS | QUESTION | PERCENT | EQUALS | SLASH | PLUS | ASTERISK | e= EXPRESSION | ( MINUS )? ^(f= FUNCTION (t= terms )? ) | DASHMATCH | ^( PARENBLOCK ( any )* ) | ^( BRACEBLOCK ( any )* ) )
+            // CSSTreeParser.g:418:5: ( ( MINUS )? i= IDENT | CLASSKEYWORD | ( MINUS )? n= NUMBER | ( MINUS )? p= PERCENTAGE | ( MINUS )? d= DIMENSION | s= string | u= URI | h= HASH | UNIRANGE | INCLUDES | COLON | COMMA | GREATER | LESS | QUESTION | PERCENT | EQUALS | SLASH | PLUS | ASTERISK | e= EXPRESSION | ( MINUS )? ^(f= FUNCTION (t= terms )? ) | DASHMATCH | ^( PARENBLOCK ( any )* ) | ^( BRACEBLOCK ( any )* ) )
             int alt27=25;
             alt27 = dfa27.predict(input);
             switch (alt27) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:418:7: ( MINUS )? i= IDENT
+                    // CSSTreeParser.g:418:7: ( MINUS )? i= IDENT
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:418:7: ( MINUS )?
+                    // CSSTreeParser.g:418:7: ( MINUS )?
                     int alt19=2;
                     int LA19_0 = input.LA(1);
 
@@ -1531,7 +1531,7 @@
                     }
                     switch (alt19) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:418:8: MINUS
+                            // CSSTreeParser.g:418:8: MINUS
                             {
                             match(input,MINUS,FOLLOW_MINUS_in_valuepart864); 
                             ((terms_scope)terms_stack.peek()).dash =true;
@@ -1547,7 +1547,7 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:419:7: CLASSKEYWORD
+                    // CSSTreeParser.g:419:7: CLASSKEYWORD
                     {
                     match(input,CLASSKEYWORD,FOLLOW_CLASSKEYWORD_in_valuepart884); 
                     ((declaration_scope)declaration_stack.peek()).invalid = true;
@@ -1555,9 +1555,9 @@
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:420:6: ( MINUS )? n= NUMBER
+                    // CSSTreeParser.g:420:6: ( MINUS )? n= NUMBER
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:420:6: ( MINUS )?
+                    // CSSTreeParser.g:420:6: ( MINUS )?
                     int alt20=2;
                     int LA20_0 = input.LA(1);
 
@@ -1566,7 +1566,7 @@
                     }
                     switch (alt20) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:420:7: MINUS
+                            // CSSTreeParser.g:420:7: MINUS
                             {
                             match(input,MINUS,FOLLOW_MINUS_in_valuepart894); 
                             ((terms_scope)terms_stack.peek()).unary =-1;
@@ -1582,9 +1582,9 @@
                     }
                     break;
                 case 4 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:421:7: ( MINUS )? p= PERCENTAGE
+                    // CSSTreeParser.g:421:7: ( MINUS )? p= PERCENTAGE
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:421:7: ( MINUS )?
+                    // CSSTreeParser.g:421:7: ( MINUS )?
                     int alt21=2;
                     int LA21_0 = input.LA(1);
 
@@ -1593,7 +1593,7 @@
                     }
                     switch (alt21) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:421:8: MINUS
+                            // CSSTreeParser.g:421:8: MINUS
                             {
                             match(input,MINUS,FOLLOW_MINUS_in_valuepart916); 
                             ((terms_scope)terms_stack.peek()).unary =-1;
@@ -1609,9 +1609,9 @@
                     }
                     break;
                 case 5 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:422:7: ( MINUS )? d= DIMENSION
+                    // CSSTreeParser.g:422:7: ( MINUS )? d= DIMENSION
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:422:7: ( MINUS )?
+                    // CSSTreeParser.g:422:7: ( MINUS )?
                     int alt22=2;
                     int LA22_0 = input.LA(1);
 
@@ -1620,7 +1620,7 @@
                     }
                     switch (alt22) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:422:8: MINUS
+                            // CSSTreeParser.g:422:8: MINUS
                             {
                             match(input,MINUS,FOLLOW_MINUS_in_valuepart936); 
                             ((terms_scope)terms_stack.peek()).unary =-1;
@@ -1642,7 +1642,7 @@
                     }
                     break;
                 case 6 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:430:7: s= string
+                    // CSSTreeParser.g:430:7: s= string
                     {
                     pushFollow(FOLLOW_string_in_valuepart962);
                     s=string();
@@ -1656,7 +1656,7 @@
                     }
                     break;
                 case 7 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:434:7: u= URI
+                    // CSSTreeParser.g:434:7: u= URI
                     {
                     u=(CommonTree)match(input,URI,FOLLOW_URI_in_valuepart981); 
                     ((terms_scope)terms_stack.peek()).term = tf.createURI(extractText(u));
@@ -1664,7 +1664,7 @@
                     }
                     break;
                 case 8 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:435:7: h= HASH
+                    // CSSTreeParser.g:435:7: h= HASH
                     {
                     h=(CommonTree)match(input,HASH,FOLLOW_HASH_in_valuepart999); 
                     ((terms_scope)terms_stack.peek()).term = tf.createColor(extractText(h));
@@ -1675,7 +1675,7 @@
                     }
                     break;
                 case 9 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:440:7: UNIRANGE
+                    // CSSTreeParser.g:440:7: UNIRANGE
                     {
                     match(input,UNIRANGE,FOLLOW_UNIRANGE_in_valuepart1018); 
                     ((declaration_scope)declaration_stack.peek()).invalid = true;
@@ -1683,7 +1683,7 @@
                     }
                     break;
                 case 10 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:441:7: INCLUDES
+                    // CSSTreeParser.g:441:7: INCLUDES
                     {
                     match(input,INCLUDES,FOLLOW_INCLUDES_in_valuepart1029); 
                     ((declaration_scope)declaration_stack.peek()).invalid = true;
@@ -1691,7 +1691,7 @@
                     }
                     break;
                 case 11 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:442:7: COLON
+                    // CSSTreeParser.g:442:7: COLON
                     {
                     match(input,COLON,FOLLOW_COLON_in_valuepart1040); 
                     ((declaration_scope)declaration_stack.peek()).invalid = true;
@@ -1699,7 +1699,7 @@
                     }
                     break;
                 case 12 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:443:7: COMMA
+                    // CSSTreeParser.g:443:7: COMMA
                     {
                     match(input,COMMA,FOLLOW_COMMA_in_valuepart1054); 
                     ((terms_scope)terms_stack.peek()).op = Term.Operator.COMMA;
@@ -1707,7 +1707,7 @@
                     }
                     break;
                 case 13 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:444:7: GREATER
+                    // CSSTreeParser.g:444:7: GREATER
                     {
                     match(input,GREATER,FOLLOW_GREATER_in_valuepart1072); 
                     ((declaration_scope)declaration_stack.peek()).invalid = true;
@@ -1715,7 +1715,7 @@
                     }
                     break;
                 case 14 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:445:7: LESS
+                    // CSSTreeParser.g:445:7: LESS
                     {
                     match(input,LESS,FOLLOW_LESS_in_valuepart1084); 
                     ((declaration_scope)declaration_stack.peek()).invalid = true;
@@ -1723,7 +1723,7 @@
                     }
                     break;
                 case 15 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:446:7: QUESTION
+                    // CSSTreeParser.g:446:7: QUESTION
                     {
                     match(input,QUESTION,FOLLOW_QUESTION_in_valuepart1099); 
                     ((declaration_scope)declaration_stack.peek()).invalid = true;
@@ -1731,7 +1731,7 @@
                     }
                     break;
                 case 16 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:447:7: PERCENT
+                    // CSSTreeParser.g:447:7: PERCENT
                     {
                     match(input,PERCENT,FOLLOW_PERCENT_in_valuepart1110); 
                     ((declaration_scope)declaration_stack.peek()).invalid = true;
@@ -1739,7 +1739,7 @@
                     }
                     break;
                 case 17 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:448:7: EQUALS
+                    // CSSTreeParser.g:448:7: EQUALS
                     {
                     match(input,EQUALS,FOLLOW_EQUALS_in_valuepart1122); 
                     ((declaration_scope)declaration_stack.peek()).invalid = true;
@@ -1747,7 +1747,7 @@
                     }
                     break;
                 case 18 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:449:7: SLASH
+                    // CSSTreeParser.g:449:7: SLASH
                     {
                     match(input,SLASH,FOLLOW_SLASH_in_valuepart1135); 
                     ((terms_scope)terms_stack.peek()).op = Term.Operator.SLASH;
@@ -1755,7 +1755,7 @@
                     }
                     break;
                 case 19 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:450:5: PLUS
+                    // CSSTreeParser.g:450:5: PLUS
                     {
                     match(input,PLUS,FOLLOW_PLUS_in_valuepart1147); 
                     ((declaration_scope)declaration_stack.peek()).invalid = true;
@@ -1763,7 +1763,7 @@
                     }
                     break;
                 case 20 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:451:5: ASTERISK
+                    // CSSTreeParser.g:451:5: ASTERISK
                     {
                     match(input,ASTERISK,FOLLOW_ASTERISK_in_valuepart1158); 
                     ((declaration_scope)declaration_stack.peek()).invalid = true;
@@ -1771,7 +1771,7 @@
                     }
                     break;
                 case 21 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:452:5: e= EXPRESSION
+                    // CSSTreeParser.g:452:5: e= EXPRESSION
                     {
                     e=(CommonTree)match(input,EXPRESSION,FOLLOW_EXPRESSION_in_valuepart1169); 
 
@@ -1783,9 +1783,9 @@
                     }
                     break;
                 case 22 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:457:7: ( MINUS )? ^(f= FUNCTION (t= terms )? )
+                    // CSSTreeParser.g:457:7: ( MINUS )? ^(f= FUNCTION (t= terms )? )
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:457:7: ( MINUS )?
+                    // CSSTreeParser.g:457:7: ( MINUS )?
                     int alt23=2;
                     int LA23_0 = input.LA(1);
 
@@ -1794,7 +1794,7 @@
                     }
                     switch (alt23) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:457:8: MINUS
+                            // CSSTreeParser.g:457:8: MINUS
                             {
                             match(input,MINUS,FOLLOW_MINUS_in_valuepart1180); 
                             ((terms_scope)terms_stack.peek()).unary =-1;
@@ -1808,7 +1808,7 @@
 
                     if ( input.LA(1)==Token.DOWN ) {
                         match(input, Token.DOWN, null); 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:457:50: (t= terms )?
+                        // CSSTreeParser.g:457:50: (t= terms )?
                         int alt24=2;
                         int LA24_0 = input.LA(1);
 
@@ -1817,7 +1817,7 @@
                         }
                         switch (alt24) {
                             case 1 :
-                                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:457:50: t= terms
+                                // CSSTreeParser.g:457:50: t= terms
                                 {
                                 pushFollow(FOLLOW_terms_in_valuepart1193);
                                 t=terms();
@@ -1847,7 +1847,7 @@
                     }
                     break;
                 case 23 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:467:7: DASHMATCH
+                    // CSSTreeParser.g:467:7: DASHMATCH
                     {
                     match(input,DASHMATCH,FOLLOW_DASHMATCH_in_valuepart1205); 
                     ((declaration_scope)declaration_stack.peek()).invalid = true;
@@ -1855,13 +1855,13 @@
                     }
                     break;
                 case 24 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:468:7: ^( PARENBLOCK ( any )* )
+                    // CSSTreeParser.g:468:7: ^( PARENBLOCK ( any )* )
                     {
                     match(input,PARENBLOCK,FOLLOW_PARENBLOCK_in_valuepart1216); 
 
                     if ( input.LA(1)==Token.DOWN ) {
                         match(input, Token.DOWN, null); 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:468:20: ( any )*
+                        // CSSTreeParser.g:468:20: ( any )*
                         loop25:
                         do {
                             int alt25=2;
@@ -1874,7 +1874,7 @@
 
                             switch (alt25) {
                         	case 1 :
-                        	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:468:20: any
+                        	    // CSSTreeParser.g:468:20: any
                         	    {
                         	    pushFollow(FOLLOW_any_in_valuepart1218);
                         	    any();
@@ -1898,13 +1898,13 @@
                     }
                     break;
                 case 25 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:469:7: ^( BRACEBLOCK ( any )* )
+                    // CSSTreeParser.g:469:7: ^( BRACEBLOCK ( any )* )
                     {
                     match(input,BRACEBLOCK,FOLLOW_BRACEBLOCK_in_valuepart1231); 
 
                     if ( input.LA(1)==Token.DOWN ) {
                         match(input, Token.DOWN, null); 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:469:20: ( any )*
+                        // CSSTreeParser.g:469:20: ( any )*
                         loop26:
                         do {
                             int alt26=2;
@@ -1917,7 +1917,7 @@
 
                             switch (alt26) {
                         	case 1 :
-                        	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:469:20: any
+                        	    // CSSTreeParser.g:469:20: any
                         	    {
                         	    pushFollow(FOLLOW_any_in_valuepart1233);
                         	    any();
@@ -1981,7 +1981,7 @@
 
 
     // $ANTLR start "combined_selector"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:472:1: combined_selector returns [CombinedSelector combinedSelector] : s= selector (c= combinator s= selector )* ;
+    // CSSTreeParser.g:472:1: combined_selector returns [CombinedSelector combinedSelector] : s= selector (c= combinator s= selector )* ;
     public final CombinedSelector combined_selector() throws RecognitionException {
         combined_selector_stack.push(new combined_selector_scope());
         CombinedSelector combinedSelector = null;
@@ -1996,8 +1996,8 @@
         	combinedSelector = (CombinedSelector) rf.createCombinedSelector().unlock();
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:502:2: (s= selector (c= combinator s= selector )* )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:502:4: s= selector (c= combinator s= selector )*
+            // CSSTreeParser.g:502:2: (s= selector (c= combinator s= selector )* )
+            // CSSTreeParser.g:502:4: s= selector (c= combinator s= selector )*
             {
             pushFollow(FOLLOW_selector_in_combined_selector1281);
             s=selector();
@@ -2007,7 +2007,7 @@
 
             	     combinedSelector.add(s);
             	  
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:505:3: (c= combinator s= selector )*
+            // CSSTreeParser.g:505:3: (c= combinator s= selector )*
             loop28:
             do {
                 int alt28=2;
@@ -2020,7 +2020,7 @@
 
                 switch (alt28) {
             	case 1 :
-            	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:505:4: c= combinator s= selector
+            	    // CSSTreeParser.g:505:4: c= combinator s= selector
             	    {
             	    pushFollow(FOLLOW_combinator_in_combined_selector1290);
             	    c=combinator();
@@ -2081,13 +2081,13 @@
 
 
     // $ANTLR start "combinator"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:512:1: combinator returns [Selector.Combinator combinator] : ( CHILD | ADJACENT | DESCENDANT );
+    // CSSTreeParser.g:512:1: combinator returns [Selector.Combinator combinator] : ( CHILD | ADJACENT | DESCENDANT );
     public final Selector.Combinator combinator() throws RecognitionException {
         Selector.Combinator combinator = null;
 
          logEnter("combinator"); 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:515:2: ( CHILD | ADJACENT | DESCENDANT )
+            // CSSTreeParser.g:515:2: ( CHILD | ADJACENT | DESCENDANT )
             int alt29=3;
             switch ( input.LA(1) ) {
             case CHILD:
@@ -2114,7 +2114,7 @@
 
             switch (alt29) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:515:4: CHILD
+                    // CSSTreeParser.g:515:4: CHILD
                     {
                     match(input,CHILD,FOLLOW_CHILD_in_combinator1324); 
                     combinator =Selector.Combinator.CHILD;
@@ -2122,7 +2122,7 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:516:4: ADJACENT
+                    // CSSTreeParser.g:516:4: ADJACENT
                     {
                     match(input,ADJACENT,FOLLOW_ADJACENT_in_combinator1331); 
                     combinator =Selector.Combinator.ADJACENT;
@@ -2130,7 +2130,7 @@
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:517:4: DESCENDANT
+                    // CSSTreeParser.g:517:4: DESCENDANT
                     {
                     match(input,DESCENDANT,FOLLOW_DESCENDANT_in_combinator1338); 
                     combinator =Selector.Combinator.DESCENDANT;
@@ -2158,7 +2158,7 @@
 
 
     // $ANTLR start "selector"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:521:1: selector returns [Selector sel] : ( ^( SELECTOR ^( ELEMENT (i= IDENT )? ) ( selpart )* ) | ^( SELECTOR ( selpart )+ ) | INVALID_SELECTOR );
+    // CSSTreeParser.g:521:1: selector returns [Selector sel] : ( ^( SELECTOR ^( ELEMENT (i= IDENT )? ) ( selpart )* ) | ^( SELECTOR ( selpart )+ ) | INVALID_SELECTOR );
     public final Selector selector() throws RecognitionException {
         selector_stack.push(new selector_scope());
         Selector sel = null;
@@ -2171,7 +2171,7 @@
         	Selector.ElementName en = rf.createElement(Selector.ElementName.WILDCARD);
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:533:5: ( ^( SELECTOR ^( ELEMENT (i= IDENT )? ) ( selpart )* ) | ^( SELECTOR ( selpart )+ ) | INVALID_SELECTOR )
+            // CSSTreeParser.g:533:5: ( ^( SELECTOR ^( ELEMENT (i= IDENT )? ) ( selpart )* ) | ^( SELECTOR ( selpart )+ ) | INVALID_SELECTOR )
             int alt33=3;
             int LA33_0 = input.LA(1);
 
@@ -2212,7 +2212,7 @@
             }
             switch (alt33) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:533:7: ^( SELECTOR ^( ELEMENT (i= IDENT )? ) ( selpart )* )
+                    // CSSTreeParser.g:533:7: ^( SELECTOR ^( ELEMENT (i= IDENT )? ) ( selpart )* )
                     {
                     match(input,SELECTOR,FOLLOW_SELECTOR_in_selector1374); 
 
@@ -2221,7 +2221,7 @@
 
                     if ( input.LA(1)==Token.DOWN ) {
                         match(input, Token.DOWN, null); 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:535:11: (i= IDENT )?
+                        // CSSTreeParser.g:535:11: (i= IDENT )?
                         int alt30=2;
                         int LA30_0 = input.LA(1);
 
@@ -2230,7 +2230,7 @@
                         }
                         switch (alt30) {
                             case 1 :
-                                // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:535:12: i= IDENT
+                                // CSSTreeParser.g:535:12: i= IDENT
                                 {
                                 i=(CommonTree)match(input,IDENT,FOLLOW_IDENT_in_selector1402); 
                                  en.setName(extractText(i)); 
@@ -2247,7 +2247,7 @@
                     		  log.debug("Adding element name: {}.", en.getName());
                     		  ((selector_scope)selector_stack.peek()).s.add(en);
                     		 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:541:10: ( selpart )*
+                    // CSSTreeParser.g:541:10: ( selpart )*
                     loop31:
                     do {
                         int alt31=2;
@@ -2260,7 +2260,7 @@
 
                         switch (alt31) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:541:10: selpart
+                    	    // CSSTreeParser.g:541:10: selpart
                     	    {
                     	    pushFollow(FOLLOW_selpart_in_selector1449);
                     	    selpart();
@@ -2282,12 +2282,12 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:543:7: ^( SELECTOR ( selpart )+ )
+                    // CSSTreeParser.g:543:7: ^( SELECTOR ( selpart )+ )
                     {
                     match(input,SELECTOR,FOLLOW_SELECTOR_in_selector1468); 
 
                     match(input, Token.DOWN, null); 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:544:10: ( selpart )+
+                    // CSSTreeParser.g:544:10: ( selpart )+
                     int cnt32=0;
                     loop32:
                     do {
@@ -2301,7 +2301,7 @@
 
                         switch (alt32) {
                     	case 1 :
-                    	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:544:10: selpart
+                    	    // CSSTreeParser.g:544:10: selpart
                     	    {
                     	    pushFollow(FOLLOW_selpart_in_selector1480);
                     	    selpart();
@@ -2327,7 +2327,7 @@
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:546:7: INVALID_SELECTOR
+                    // CSSTreeParser.g:546:7: INVALID_SELECTOR
                     {
                     match(input,INVALID_SELECTOR,FOLLOW_INVALID_SELECTOR_in_selector1498); 
                      ((statement_scope)statement_stack.peek()).invalid = true; 
@@ -2353,7 +2353,7 @@
 
 
     // $ANTLR start "selpart"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:549:1: selpart : (h= HASH | c= CLASSKEYWORD | ^( ATTRIBUTE ea= attribute ) | p= pseudo | INVALID_SELPART );
+    // CSSTreeParser.g:549:1: selpart : (h= HASH | c= CLASSKEYWORD | ^( ATTRIBUTE ea= attribute ) | p= pseudo | INVALID_SELPART );
     public final void selpart() throws RecognitionException {
         CommonTree h=null;
         CommonTree c=null;
@@ -2366,7 +2366,7 @@
         	logEnter("selpart");
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:556:5: (h= HASH | c= CLASSKEYWORD | ^( ATTRIBUTE ea= attribute ) | p= pseudo | INVALID_SELPART )
+            // CSSTreeParser.g:556:5: (h= HASH | c= CLASSKEYWORD | ^( ATTRIBUTE ea= attribute ) | p= pseudo | INVALID_SELPART )
             int alt34=5;
             switch ( input.LA(1) ) {
             case HASH:
@@ -2403,7 +2403,7 @@
 
             switch (alt34) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:556:8: h= HASH
+                    // CSSTreeParser.g:556:8: h= HASH
                     {
                     h=(CommonTree)match(input,HASH,FOLLOW_HASH_in_selpart1532); 
                      ((selector_scope)selector_stack.peek()).s.add(rf.createID(extractText(h))); 
@@ -2411,7 +2411,7 @@
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:557:7: c= CLASSKEYWORD
+                    // CSSTreeParser.g:557:7: c= CLASSKEYWORD
                     {
                     c=(CommonTree)match(input,CLASSKEYWORD,FOLLOW_CLASSKEYWORD_in_selpart1544); 
                      ((selector_scope)selector_stack.peek()).s.add(rf.createClass(extractText(c))); 
@@ -2419,7 +2419,7 @@
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:558:4: ^( ATTRIBUTE ea= attribute )
+                    // CSSTreeParser.g:558:4: ^( ATTRIBUTE ea= attribute )
                     {
                     match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_selpart1552); 
 
@@ -2436,7 +2436,7 @@
                     }
                     break;
                 case 4 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:559:7: p= pseudo
+                    // CSSTreeParser.g:559:7: p= pseudo
                     {
                     pushFollow(FOLLOW_pseudo_in_selpart1570);
                     p=pseudo();
@@ -2448,7 +2448,7 @@
                     }
                     break;
                 case 5 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:560:4: INVALID_SELPART
+                    // CSSTreeParser.g:560:4: INVALID_SELPART
                     {
                     match(input,INVALID_SELPART,FOLLOW_INVALID_SELPART_in_selpart1577); 
                      ((combined_selector_scope)combined_selector_stack.peek()).invalid = true;
@@ -2473,7 +2473,7 @@
 
 
     // $ANTLR start "attribute"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:563:1: attribute returns [Selector.ElementAttribute elemAttr] : i= IDENT ( ( EQUALS | INCLUDES | DASHMATCH ) (i= IDENT | s= string ) )? ;
+    // CSSTreeParser.g:563:1: attribute returns [Selector.ElementAttribute elemAttr] : i= IDENT ( ( EQUALS | INCLUDES | DASHMATCH ) (i= IDENT | s= string ) )? ;
     public final Selector.ElementAttribute attribute() throws RecognitionException {
         Selector.ElementAttribute elemAttr = null;
 
@@ -2489,12 +2489,12 @@
         	boolean isStringValue = false;
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:581:2: (i= IDENT ( ( EQUALS | INCLUDES | DASHMATCH ) (i= IDENT | s= string ) )? )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:581:4: i= IDENT ( ( EQUALS | INCLUDES | DASHMATCH ) (i= IDENT | s= string ) )?
+            // CSSTreeParser.g:581:2: (i= IDENT ( ( EQUALS | INCLUDES | DASHMATCH ) (i= IDENT | s= string ) )? )
+            // CSSTreeParser.g:581:4: i= IDENT ( ( EQUALS | INCLUDES | DASHMATCH ) (i= IDENT | s= string ) )?
             {
             i=(CommonTree)match(input,IDENT,FOLLOW_IDENT_in_attribute1611); 
             attribute=extractText(i); 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:582:4: ( ( EQUALS | INCLUDES | DASHMATCH ) (i= IDENT | s= string ) )?
+            // CSSTreeParser.g:582:4: ( ( EQUALS | INCLUDES | DASHMATCH ) (i= IDENT | s= string ) )?
             int alt37=2;
             int LA37_0 = input.LA(1);
 
@@ -2503,9 +2503,9 @@
             }
             switch (alt37) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:582:5: ( EQUALS | INCLUDES | DASHMATCH ) (i= IDENT | s= string )
+                    // CSSTreeParser.g:582:5: ( EQUALS | INCLUDES | DASHMATCH ) (i= IDENT | s= string )
                     {
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:582:5: ( EQUALS | INCLUDES | DASHMATCH )
+                    // CSSTreeParser.g:582:5: ( EQUALS | INCLUDES | DASHMATCH )
                     int alt35=3;
                     switch ( input.LA(1) ) {
                     case EQUALS:
@@ -2532,7 +2532,7 @@
 
                     switch (alt35) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:582:6: EQUALS
+                            // CSSTreeParser.g:582:6: EQUALS
                             {
                             match(input,EQUALS,FOLLOW_EQUALS_in_attribute1620); 
                             op=Selector.Operator.EQUALS; 
@@ -2540,7 +2540,7 @@
                             }
                             break;
                         case 2 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:583:7: INCLUDES
+                            // CSSTreeParser.g:583:7: INCLUDES
                             {
                             match(input,INCLUDES,FOLLOW_INCLUDES_in_attribute1631); 
                             op=Selector.Operator.INCLUDES; 
@@ -2548,7 +2548,7 @@
                             }
                             break;
                         case 3 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:584:7: DASHMATCH
+                            // CSSTreeParser.g:584:7: DASHMATCH
                             {
                             match(input,DASHMATCH,FOLLOW_DASHMATCH_in_attribute1642); 
                             op=Selector.Operator.DASHMATCH; 
@@ -2558,7 +2558,7 @@
 
                     }
 
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:586:5: (i= IDENT | s= string )
+                    // CSSTreeParser.g:586:5: (i= IDENT | s= string )
                     int alt36=2;
                     int LA36_0 = input.LA(1);
 
@@ -2576,7 +2576,7 @@
                     }
                     switch (alt36) {
                         case 1 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:586:6: i= IDENT
+                            // CSSTreeParser.g:586:6: i= IDENT
                             {
                             i=(CommonTree)match(input,IDENT,FOLLOW_IDENT_in_attribute1660); 
 
@@ -2587,7 +2587,7 @@
                             }
                             break;
                         case 2 :
-                            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:590:7: s= string
+                            // CSSTreeParser.g:590:7: s= string
                             {
                             pushFollow(FOLLOW_string_in_attribute1672);
                             s=string();
@@ -2641,54 +2641,117 @@
 
 
     // $ANTLR start "pseudo"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:602:1: pseudo returns [Selector.PseudoPage pseudoPage] : ^( PSEUDO (f= FUNCTION )? i= IDENT ) ;
+    // CSSTreeParser.g:602:1: pseudo returns [Selector.PseudoPage pseudoPage] : ( ^( PSEUDO i= IDENT ) | ^( PSEUDO f= FUNCTION i= IDENT ) | ^( PSEUDO f= FUNCTION n= NUMBER ) );
     public final Selector.PseudoPage pseudo() throws RecognitionException {
         Selector.PseudoPage pseudoPage = null;
 
+        CommonTree i=null;
         CommonTree f=null;
-        CommonTree i=null;
+        CommonTree n=null;
 
 
-        		  logEnter("pseudo");
-        		  String fname =null;
-        		  String value = null;
+        		logEnter("pseudo");
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:608:2: ( ^( PSEUDO (f= FUNCTION )? i= IDENT ) )
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:608:4: ^( PSEUDO (f= FUNCTION )? i= IDENT )
-            {
-            match(input,PSEUDO,FOLLOW_PSEUDO_in_pseudo1705); 
-
-            match(input, Token.DOWN, null); 
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:609:8: (f= FUNCTION )?
-            int alt38=2;
+            // CSSTreeParser.g:606:2: ( ^( PSEUDO i= IDENT ) | ^( PSEUDO f= FUNCTION i= IDENT ) | ^( PSEUDO f= FUNCTION n= NUMBER ) )
+            int alt38=3;
             int LA38_0 = input.LA(1);
 
-            if ( (LA38_0==FUNCTION) ) {
-                alt38=1;
+            if ( (LA38_0==PSEUDO) ) {
+                int LA38_1 = input.LA(2);
+
+                if ( (LA38_1==DOWN) ) {
+                    int LA38_2 = input.LA(3);
+
+                    if ( (LA38_2==IDENT) ) {
+                        alt38=1;
+                    }
+                    else if ( (LA38_2==FUNCTION) ) {
+                        int LA38_4 = input.LA(4);
+
+                        if ( (LA38_4==IDENT) ) {
+                            alt38=2;
+                        }
+                        else if ( (LA38_4==NUMBER) ) {
+                            alt38=3;
+                        }
+                        else {
+                            NoViableAltException nvae =
+                                new NoViableAltException("", 38, 4, input);
+
+                            throw nvae;
+                        }
+                    }
+                    else {
+                        NoViableAltException nvae =
+                            new NoViableAltException("", 38, 2, input);
+
+                        throw nvae;
+                    }
+                }
+                else {
+                    NoViableAltException nvae =
+                        new NoViableAltException("", 38, 1, input);
+
+                    throw nvae;
+                }
             }
+            else {
+                NoViableAltException nvae =
+                    new NoViableAltException("", 38, 0, input);
+
+                throw nvae;
+            }
             switch (alt38) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:609:9: f= FUNCTION
+                    // CSSTreeParser.g:606:4: ^( PSEUDO i= IDENT )
                     {
-                    f=(CommonTree)match(input,FUNCTION,FOLLOW_FUNCTION_in_pseudo1718); 
-                    fname=extractText(f);
+                    match(input,PSEUDO,FOLLOW_PSEUDO_in_pseudo1705); 
 
+                    match(input, Token.DOWN, null); 
+                    i=(CommonTree)match(input,IDENT,FOLLOW_IDENT_in_pseudo1709); 
+
+                    match(input, Token.UP, null); 
+
+                    			pseudoPage = rf.createPseudoPage(extractText(i), null);
+                    		
+
                     }
                     break;
+                case 2 :
+                    // CSSTreeParser.g:610:4: ^( PSEUDO f= FUNCTION i= IDENT )
+                    {
+                    match(input,PSEUDO,FOLLOW_PSEUDO_in_pseudo1720); 
 
-            }
+                    match(input, Token.DOWN, null); 
+                    f=(CommonTree)match(input,FUNCTION,FOLLOW_FUNCTION_in_pseudo1724); 
+                    i=(CommonTree)match(input,IDENT,FOLLOW_IDENT_in_pseudo1728); 
 
-            i=(CommonTree)match(input,IDENT,FOLLOW_IDENT_in_pseudo1735); 
-            value=extractText(i);
+                    match(input, Token.UP, null); 
 
-            match(input, Token.UP, null); 
+                    			pseudoPage = rf.createPseudoPage(extractText(i), extractText(f));
+                    		
 
-            			pseudoPage = rf.createPseudoPage(value, fname);
-            		
+                    }
+                    break;
+                case 3 :
+                    // CSSTreeParser.g:614:4: ^( PSEUDO f= FUNCTION n= NUMBER )
+                    {
+                    match(input,PSEUDO,FOLLOW_PSEUDO_in_pseudo1739); 
 
+                    match(input, Token.DOWN, null); 
+                    f=(CommonTree)match(input,FUNCTION,FOLLOW_FUNCTION_in_pseudo1743); 
+                    n=(CommonTree)match(input,NUMBER,FOLLOW_NUMBER_in_pseudo1747); 
+
+                    match(input, Token.UP, null); 
+
+                    			pseudoPage = rf.createPseudoPage(extractText(n), extractText(f));
+                    		
+
+                    }
+                    break;
+
             }
-
         }
         catch (RecognitionException re) {
             reportError(re);
@@ -2702,14 +2765,14 @@
 
 
     // $ANTLR start "string"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:616:1: string returns [String s] : (st= STRING | INVALID_STRING );
+    // CSSTreeParser.g:620:1: string returns [String s] : (st= STRING | INVALID_STRING );
     public final String string() throws RecognitionException {
         String s = null;
 
         CommonTree st=null;
 
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:617:2: (st= STRING | INVALID_STRING )
+            // CSSTreeParser.g:621:2: (st= STRING | INVALID_STRING )
             int alt39=2;
             int LA39_0 = input.LA(1);
 
@@ -2727,17 +2790,17 @@
             }
             switch (alt39) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:617:4: st= STRING
+                    // CSSTreeParser.g:621:4: st= STRING
                     {
-                    st=(CommonTree)match(input,STRING,FOLLOW_STRING_in_string1760); 
+                    st=(CommonTree)match(input,STRING,FOLLOW_STRING_in_string1769); 
                      s = extractText(st);
 
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:618:4: INVALID_STRING
+                    // CSSTreeParser.g:622:4: INVALID_STRING
                     {
-                    match(input,INVALID_STRING,FOLLOW_INVALID_STRING_in_string1767); 
+                    match(input,INVALID_STRING,FOLLOW_INVALID_STRING_in_string1776); 
                     s =null;
 
                     }
@@ -2757,10 +2820,10 @@
 
 
     // $ANTLR start "any"
-    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:621:1: any : ( IDENT | CLASSKEYWORD | NUMBER | PERCENTAGE | DIMENSION | string | URI | HASH | UNIRANGE | INCLUDES | COLON | COMMA | GREATER | EQUALS | SLASH | EXCLAMATION | ^( FUNCTION ( any )* ) | DASHMATCH | ^( PARENBLOCK ( any )* ) | ^( BRACEBLOCK ( any )* ) );
+    // CSSTreeParser.g:625:1: any : ( IDENT | CLASSKEYWORD | NUMBER | PERCENTAGE | DIMENSION | string | URI | HASH | UNIRANGE | INCLUDES | COLON | COMMA | GREATER | EQUALS | SLASH | EXCLAMATION | ^( FUNCTION ( any )* ) | DASHMATCH | ^( PARENBLOCK ( any )* ) | ^( BRACEBLOCK ( any )* ) );
     public final void any() throws RecognitionException {
         try {
-            // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:622:3: ( IDENT | CLASSKEYWORD | NUMBER | PERCENTAGE | DIMENSION | string | URI | HASH | UNIRANGE | INCLUDES | COLON | COMMA | GREATER | EQUALS | SLASH | EXCLAMATION | ^( FUNCTION ( any )* ) | DASHMATCH | ^( PARENBLOCK ( any )* ) | ^( BRACEBLOCK ( any )* ) )
+            // CSSTreeParser.g:626:3: ( IDENT | CLASSKEYWORD | NUMBER | PERCENTAGE | DIMENSION | string | URI | HASH | UNIRANGE | INCLUDES | COLON | COMMA | GREATER | EQUALS | SLASH | EXCLAMATION | ^( FUNCTION ( any )* ) | DASHMATCH | ^( PARENBLOCK ( any )* ) | ^( BRACEBLOCK ( any )* ) )
             int alt43=20;
             switch ( input.LA(1) ) {
             case IDENT:
@@ -2873,44 +2936,44 @@
 
             switch (alt43) {
                 case 1 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:622:5: IDENT
+                    // CSSTreeParser.g:626:5: IDENT
                     {
-                    match(input,IDENT,FOLLOW_IDENT_in_any1783); 
+                    match(input,IDENT,FOLLOW_IDENT_in_any1792); 
 
                     }
                     break;
                 case 2 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:623:5: CLASSKEYWORD
+                    // CSSTreeParser.g:627:5: CLASSKEYWORD
                     {
-                    match(input,CLASSKEYWORD,FOLLOW_CLASSKEYWORD_in_any1789); 
+                    match(input,CLASSKEYWORD,FOLLOW_CLASSKEYWORD_in_any1798); 
 
                     }
                     break;
                 case 3 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:624:5: NUMBER
+                    // CSSTreeParser.g:628:5: NUMBER
                     {
-                    match(input,NUMBER,FOLLOW_NUMBER_in_any1795); 
+                    match(input,NUMBER,FOLLOW_NUMBER_in_any1804); 
 
                     }
                     break;
                 case 4 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:625:5: PERCENTAGE
+                    // CSSTreeParser.g:629:5: PERCENTAGE
                     {
-                    match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_any1801); 
+                    match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_any1810); 
 
                     }
                     break;
                 case 5 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:626:5: DIMENSION
+                    // CSSTreeParser.g:630:5: DIMENSION
                     {
-                    match(input,DIMENSION,FOLLOW_DIMENSION_in_any1807); 
+                    match(input,DIMENSION,FOLLOW_DIMENSION_in_any1816); 
 
                     }
                     break;
                 case 6 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:627:5: string
+                    // CSSTreeParser.g:631:5: string
                     {
-                    pushFollow(FOLLOW_string_in_any1813);
+                    pushFollow(FOLLOW_string_in_any1822);
                     string();
 
                     state._fsp--;
@@ -2919,83 +2982,83 @@
                     }
                     break;
                 case 7 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:628:5: URI
+                    // CSSTreeParser.g:632:5: URI
                     {
-                    match(input,URI,FOLLOW_URI_in_any1819); 
+                    match(input,URI,FOLLOW_URI_in_any1828); 
 
                     }
                     break;
                 case 8 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:629:5: HASH
+                    // CSSTreeParser.g:633:5: HASH
                     {
-                    match(input,HASH,FOLLOW_HASH_in_any1825); 
+                    match(input,HASH,FOLLOW_HASH_in_any1834); 
 
                     }
                     break;
                 case 9 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:630:5: UNIRANGE
+                    // CSSTreeParser.g:634:5: UNIRANGE
                     {
-                    match(input,UNIRANGE,FOLLOW_UNIRANGE_in_any1831); 
+                    match(input,UNIRANGE,FOLLOW_UNIRANGE_in_any1840); 
 
                     }
                     break;
                 case 10 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:631:5: INCLUDES
+                    // CSSTreeParser.g:635:5: INCLUDES
                     {
-                    match(input,INCLUDES,FOLLOW_INCLUDES_in_any1837); 
+                    match(input,INCLUDES,FOLLOW_INCLUDES_in_any1846); 
 
                     }
                     break;
                 case 11 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:632:5: COLON
+                    // CSSTreeParser.g:636:5: COLON
                     {
-                    match(input,COLON,FOLLOW_COLON_in_any1843); 
+                    match(input,COLON,FOLLOW_COLON_in_any1852); 
 
                     }
                     break;
                 case 12 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:633:5: COMMA
+                    // CSSTreeParser.g:637:5: COMMA
                     {
-                    match(input,COMMA,FOLLOW_COMMA_in_any1849); 
+                    match(input,COMMA,FOLLOW_COMMA_in_any1858); 
 
                     }
                     break;
                 case 13 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:634:5: GREATER
+                    // CSSTreeParser.g:638:5: GREATER
                     {
-                    match(input,GREATER,FOLLOW_GREATER_in_any1855); 
+                    match(input,GREATER,FOLLOW_GREATER_in_any1864); 
 
                     }
                     break;
                 case 14 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:635:5: EQUALS
+                    // CSSTreeParser.g:639:5: EQUALS
                     {
-                    match(input,EQUALS,FOLLOW_EQUALS_in_any1861); 
+                    match(input,EQUALS,FOLLOW_EQUALS_in_any1870); 
 
                     }
                     break;
                 case 15 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:636:5: SLASH
+                    // CSSTreeParser.g:640:5: SLASH
                     {
-                    match(input,SLASH,FOLLOW_SLASH_in_any1867); 
+                    match(input,SLASH,FOLLOW_SLASH_in_any1876); 
 
                     }
                     break;
                 case 16 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:637:5: EXCLAMATION
+                    // CSSTreeParser.g:641:5: EXCLAMATION
                     {
-                    match(input,EXCLAMATION,FOLLOW_EXCLAMATION_in_any1873); 
+                    match(input,EXCLAMATION,FOLLOW_EXCLAMATION_in_any1882); 
 
                     }
                     break;
                 case 17 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:638:5: ^( FUNCTION ( any )* )
+                    // CSSTreeParser.g:642:5: ^( FUNCTION ( any )* )
                     {
-                    match(input,FUNCTION,FOLLOW_FUNCTION_in_any1880); 
+                    match(input,FUNCTION,FOLLOW_FUNCTION_in_any1889); 
 
                     if ( input.LA(1)==Token.DOWN ) {
                         match(input, Token.DOWN, null); 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:638:16: ( any )*
+                        // CSSTreeParser.g:642:16: ( any )*
                         loop40:
                         do {
                             int alt40=2;
@@ -3008,9 +3071,9 @@
 
                             switch (alt40) {
                         	case 1 :
-                        	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:638:16: any
+                        	    // CSSTreeParser.g:642:16: any
                         	    {
-                        	    pushFollow(FOLLOW_any_in_any1882);
+                        	    pushFollow(FOLLOW_any_in_any1891);
                         	    any();
 
                         	    state._fsp--;
@@ -3031,20 +3094,20 @@
                     }
                     break;
                 case 18 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:639:5: DASHMATCH
+                    // CSSTreeParser.g:643:5: DASHMATCH
                     {
-                    match(input,DASHMATCH,FOLLOW_DASHMATCH_in_any1891); 
+                    match(input,DASHMATCH,FOLLOW_DASHMATCH_in_any1900); 
 
                     }
                     break;
                 case 19 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:640:5: ^( PARENBLOCK ( any )* )
+                    // CSSTreeParser.g:644:5: ^( PARENBLOCK ( any )* )
                     {
-                    match(input,PARENBLOCK,FOLLOW_PARENBLOCK_in_any1898); 
+                    match(input,PARENBLOCK,FOLLOW_PARENBLOCK_in_any1907); 
 
                     if ( input.LA(1)==Token.DOWN ) {
                         match(input, Token.DOWN, null); 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:640:18: ( any )*
+                        // CSSTreeParser.g:644:18: ( any )*
                         loop41:
                         do {
                             int alt41=2;
@@ -3057,9 +3120,9 @@
 
                             switch (alt41) {
                         	case 1 :
-                        	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:640:18: any
+                        	    // CSSTreeParser.g:644:18: any
                         	    {
-                        	    pushFollow(FOLLOW_any_in_any1900);
+                        	    pushFollow(FOLLOW_any_in_any1909);
                         	    any();
 
                         	    state._fsp--;
@@ -3080,13 +3143,13 @@
                     }
                     break;
                 case 20 :
-                    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:641:5: ^( BRACEBLOCK ( any )* )
+                    // CSSTreeParser.g:645:5: ^( BRACEBLOCK ( any )* )
                     {
-                    match(input,BRACEBLOCK,FOLLOW_BRACEBLOCK_in_any1909); 
+                    match(input,BRACEBLOCK,FOLLOW_BRACEBLOCK_in_any1918); 
 
                     if ( input.LA(1)==Token.DOWN ) {
                         match(input, Token.DOWN, null); 
-                        // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:641:18: ( any )*
+                        // CSSTreeParser.g:645:18: ( any )*
                         loop42:
                         do {
                             int alt42=2;
@@ -3099,9 +3162,9 @@
 
                             switch (alt42) {
                         	case 1 :
-                        	    // /home/burgetr/workspace/CSSParser/src/cz/vutbr/web/csskit/antlr/CSSTreeParser.g:641:18: any
+                        	    // CSSTreeParser.g:645:18: any
                         	    {
-                        	    pushFollow(FOLLOW_any_in_any1911);
+                        	    pushFollow(FOLLOW_any_in_any1920);
                         	    any();
 
                         	    state._fsp--;
@@ -3321,32 +3384,37 @@
     public static final BitSet FOLLOW_IDENT_in_attribute1660 = new BitSet(new long[]{0x0000000000000002L});
     public static final BitSet FOLLOW_string_in_attribute1672 = new BitSet(new long[]{0x0000000000000002L});
     public static final BitSet FOLLOW_PSEUDO_in_pseudo1705 = new BitSet(new long[]{0x0000000000000004L});
-    public static final BitSet FOLLOW_FUNCTION_in_pseudo1718 = new BitSet(new long[]{0x0000002000000000L});
-    public static final BitSet FOLLOW_IDENT_in_pseudo1735 = new BitSet(new long[]{0x0000000000000008L});
-    public static final BitSet FOLLOW_STRING_in_string1760 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_INVALID_STRING_in_string1767 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_IDENT_in_any1783 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_CLASSKEYWORD_in_any1789 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_NUMBER_in_any1795 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_PERCENTAGE_in_any1801 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_DIMENSION_in_any1807 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_string_in_any1813 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_URI_in_any1819 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_HASH_in_any1825 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_UNIRANGE_in_any1831 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_INCLUDES_in_any1837 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_COLON_in_any1843 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_COMMA_in_any1849 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_GREATER_in_any1855 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_EQUALS_in_any1861 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_SLASH_in_any1867 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_EXCLAMATION_in_any1873 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_FUNCTION_in_any1880 = new BitSet(new long[]{0x0000000000000004L});
-    public static final BitSet FOLLOW_any_in_any1882 = new BitSet(new long[]{0x63FE943000800308L,0x0000000000000022L});
-    public static final BitSet FOLLOW_DASHMATCH_in_any1891 = new BitSet(new long[]{0x0000000000000002L});
-    public static final BitSet FOLLOW_PARENBLOCK_in_any1898 = new BitSet(new long[]{0x0000000000000004L});
-    public static final BitSet FOLLOW_any_in_any1900 = new BitSet(new long[]{0x63FE943000800308L,0x0000000000000022L});
-    public static final BitSet FOLLOW_BRACEBLOCK_in_any1909 = new BitSet(new long[]{0x0000000000000004L});
-    public static final BitSet FOLLOW_any_in_any1911 = new BitSet(new long[]{0x63FE943000800308L,0x0000000000000022L});
+    public static final BitSet FOLLOW_IDENT_in_pseudo1709 = new BitSet(new long[]{0x0000000000000008L});
+    public static final BitSet FOLLOW_PSEUDO_in_pseudo1720 = new BitSet(new long[]{0x0000000000000004L});
+    public static final BitSet FOLLOW_FUNCTION_in_pseudo1724 = new BitSet(new long[]{0x0000002000000000L});
+    public static final BitSet FOLLOW_IDENT_in_pseudo1728 = new BitSet(new long[]{0x0000000000000008L});
+    public static final BitSet FOLLOW_PSEUDO_in_pseudo1739 = new BitSet(new long[]{0x0000000000000004L});
+    public static final BitSet FOLLOW_FUNCTION_in_pseudo1743 = new BitSet(new long[]{0x0004000000000000L});
+    public static final BitSet FOLLOW_NUMBER_in_pseudo1747 = new BitSet(new long[]{0x0000000000000008L});
+    public static final BitSet FOLLOW_STRING_in_string1769 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_INVALID_STRING_in_string1776 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_IDENT_in_any1792 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_CLASSKEYWORD_in_any1798 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_NUMBER_in_any1804 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_PERCENTAGE_in_any1810 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_DIMENSION_in_any1816 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_string_in_any1822 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_URI_in_any1828 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_HASH_in_any1834 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_UNIRANGE_in_any1840 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_INCLUDES_in_any1846 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_COLON_in_any1852 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_COMMA_in_any1858 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_GREATER_in_any1864 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_EQUALS_in_any1870 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_SLASH_in_any1876 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_EXCLAMATION_in_any1882 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_FUNCTION_in_any1889 = new BitSet(new long[]{0x0000000000000004L});
+    public static final BitSet FOLLOW_any_in_any1891 = new BitSet(new long[]{0x63FE943000800308L,0x0000000000000022L});
+    public static final BitSet FOLLOW_DASHMATCH_in_any1900 = new BitSet(new long[]{0x0000000000000002L});
+    public static final BitSet FOLLOW_PARENBLOCK_in_any1907 = new BitSet(new long[]{0x0000000000000004L});
+    public static final BitSet FOLLOW_any_in_any1909 = new BitSet(new long[]{0x63FE943000800308L,0x0000000000000022L});
+    public static final BitSet FOLLOW_BRACEBLOCK_in_any1918 = new BitSet(new long[]{0x0000000000000004L});
+    public static final BitSet FOLLOW_any_in_any1920 = new BitSet(new long[]{0x63FE943000800308L,0x0000000000000022L});
 
 }
\ No newline at end of file
