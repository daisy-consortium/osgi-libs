Index: cz/vutbr/web/csskit/RuleFactoryImpl.java
===================================================================
--- cz/vutbr/web/csskit/RuleFactoryImpl.java
+++ cz/vutbr/web/csskit/RuleFactoryImpl.java
@@ -9,6 +9,7 @@
 import cz.vutbr.web.css.Declaration;
 import cz.vutbr.web.css.RuleFactory;
 import cz.vutbr.web.css.RuleImport;
+import cz.vutbr.web.css.RuleMargin;
 import cz.vutbr.web.css.RuleMedia;
 import cz.vutbr.web.css.RulePage;
 import cz.vutbr.web.css.RuleSet;
@@ -78,6 +79,13 @@
 	public RulePage createPage(Priority priority) {
 		return new RulePageImpl(priority);
 	}
+	
+	/* (non-Javadoc)
+	 * @see cz.vutbr.web.css.RuleFactory#createMargin()
+	 */
+	public RuleMargin createMargin(String area, Priority priority) {
+		return new RuleMarginImpl(area, priority);
+	}
 
 	/* (non-Javadoc)
 	 * @see cz.vutbr.web.css.RuleFactory#createCombinedSelector()
Index: cz/vutbr/web/csskit/RulePageImpl.java
===================================================================
--- cz/vutbr/web/csskit/RulePageImpl.java
+++ cz/vutbr/web/csskit/RulePageImpl.java
@@ -1,32 +1,60 @@
 package cz.vutbr.web.csskit;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import cz.vutbr.web.css.Declaration;
+import cz.vutbr.web.css.PrettyOutput;
+import cz.vutbr.web.css.Rule;
+import cz.vutbr.web.css.RuleMargin;
 import cz.vutbr.web.css.RulePage;
 
 /**
- * Wrap of declarations bounded with pseudo-page 
+ * Wrap of declarations bounded with a page rule 
  * 
  * @author kapy
  * @author Jan Svercl, VUT Brno, 2008
+ * @author Bert Frees, 2012
  */
-public class RulePageImpl extends AbstractRuleBlock<Declaration> implements RulePage {
+public class RulePageImpl extends AbstractRuleBlock<Rule<?>> implements RulePage {
 
+	protected String name;
 	protected String pseudo;
 	
 	protected RulePageImpl(Priority priority) {
 		super(priority);
+		this.name = null;
 		this.pseudo = null;
+		replaceAll(new ArrayList<Rule<?>>());
 	}
 	
 	/**
-	 * Gets name of pseudopage
+	 * Gets name of the page
 	 */
+	public String getName() {
+		return name;
+	}
+
+	/**
+	 * Sets name of the page
+	 * @param name The name to set
+	 * @return Modified instance
+	 */
+	public RulePage setName(String name) {
+		this.name = name;
+		return this;
+	}
+	
+	/**
+	 * Gets pseudo-class of the page
+	 */
 	public String getPseudo() {
 		return pseudo;
 	}
 
 	/**
-	 * @param pseudo the pseudo to set
+	 * Sets pseudo-class of the page
+	 * @param pseudo The pseudo-class to set
 	 * @return Modified instance
 	 */
 	public RulePage setPseudo(String pseudo) {
@@ -34,6 +62,14 @@
 		return this;
 	}
 
+	@Override
+	public boolean add(Rule<?> element) {
+		if (element instanceof Declaration || element instanceof RuleMargin)
+			return super.add(element);
+		else
+			throw new IllegalArgumentException("Element must be either a Declaration or a RuleMargin");
+	}
+
 	@Override 
 	public String toString() {
 		return this.toString(0);
@@ -43,13 +79,16 @@
     	
     	StringBuilder sb = new StringBuilder();
     	
-    	sb.append(OutputUtil.PAGE_KEYWORD).append(OutputUtil.SPACE_DELIM);
+    	sb.append(OutputUtil.PAGE_KEYWORD);
+    	if(name != null && !"".equals(name))
+    		sb.append(OutputUtil.SPACE_DELIM).append(name);
     	if(pseudo != null && !"".equals(pseudo))
     		sb.append(OutputUtil.PAGE_OPENING).append(pseudo);
     	
-    	// append declarations
+    	// append declarations and margin rules
     	sb.append(OutputUtil.RULE_OPENING);
-    	sb = OutputUtil.appendList(sb, list, OutputUtil.EMPTY_DELIM, depth + 1);
+    	List<PrettyOutput> rules = (List)list;
+    	sb = OutputUtil.appendList(sb, rules, OutputUtil.EMPTY_DELIM, depth + 1);
     	sb.append(OutputUtil.RULE_CLOSING).append(OutputUtil.PAGE_CLOSING);
     
     	return sb.toString();
Index: cz/vutbr/web/csskit/OutputUtil.java
===================================================================
--- cz/vutbr/web/csskit/OutputUtil.java
+++ cz/vutbr/web/csskit/OutputUtil.java
@@ -42,6 +42,7 @@
 	public static final String ATTRIBUTE_CLOSING = "]";
 	public static final String PERCENT_SIGN = "%";
 	public static final String HASH_SIGN = "#";
+	public static final String MARGIN_AREA_OPENING = "@";
 	
 	
 	
Index: cz/vutbr/web/csskit/antlr/Preparator.java
===================================================================
--- cz/vutbr/web/csskit/antlr/Preparator.java
+++ cz/vutbr/web/csskit/antlr/Preparator.java
@@ -5,6 +5,7 @@
 import cz.vutbr.web.css.CombinedSelector;
 import cz.vutbr.web.css.Declaration;
 import cz.vutbr.web.css.RuleBlock;
+import cz.vutbr.web.css.RuleMargin;
 import cz.vutbr.web.css.RuleSet;
 import cz.vutbr.web.css.Selector;
 import cz.vutbr.web.css.RuleBlock.Priority;
@@ -53,13 +54,24 @@
 	
 	/**
 	 * Creates RulePage, block of rules associated with specific page 
-	 * @param decl List of declarations
-	 * @param pseudo Name, or pseudo name of page
+	 * @param declarations List of declarations
+	 * @param marginRules List of margin rules
+	 * @param name Name of the page
+	 * @param pseudo Pseudo-class of the page
 	 * @return RulePage
 	 */
-	public RuleBlock<?> prepareRulePage(List<Declaration> decl, String pseudo);
+	public RuleBlock<?> prepareRulePage(List<Declaration> declarations,
+			List<RuleMargin> marginRules, String name, String pseudo);
 	
 	/**
+	 * Creates RuleMargin, block of declarations associated with specific area in the page margin. 
+	 * @param area The margin area
+	 * @param declarations List of declarations
+	 * @return RuleMargin
+	 */
+	public RuleMargin prepareRuleMargin(String area, List<Declaration> declarations);
+	
+	/**
 	 * Marks priority 
 	 * @return Mark
 	 */
Index: cz/vutbr/web/csskit/antlr/SimplePreparator.java
===================================================================
--- cz/vutbr/web/csskit/antlr/SimplePreparator.java
+++ cz/vutbr/web/csskit/antlr/SimplePreparator.java
@@ -12,6 +12,7 @@
 import cz.vutbr.web.css.Declaration;
 import cz.vutbr.web.css.RuleBlock;
 import cz.vutbr.web.css.RuleFactory;
+import cz.vutbr.web.css.RuleMargin;
 import cz.vutbr.web.css.RuleMedia;
 import cz.vutbr.web.css.RulePage;
 import cz.vutbr.web.css.RuleSet;
@@ -92,22 +93,47 @@
 		return (RuleBlock<?>) rm;
 	}
 
-	public RuleBlock<?> prepareRulePage(List<Declaration> decl, String pseudo) {
+	public RuleBlock<?> prepareRulePage(List<Declaration> declarations,
+			List<RuleMargin> marginRules, String name, String pseudo) {
 
-		if (decl == null || decl.isEmpty()) {
+		if ((declarations == null || declarations.isEmpty()) &&
+		    (marginRules == null || marginRules.isEmpty())) {
 			log.debug("Empty RulePage was ommited");
 			return null;
 		}
 
 		Priority prio = ps.getAndIncrement();
 		RulePage rp = rf.createPage(prio);
-		rp.replaceAll(decl);
+		if (declarations != null)
+			for (Declaration d : declarations)
+				rp.add(d);
+		if (marginRules != null)
+			for (RuleMargin m : marginRules)
+				rp.add(m);
+		rp.setName(name);
 		rp.setPseudo(pseudo);
+			
 		log.info("Create @page as {}th with:\n{}", prio, rp);
 
 		return (RuleBlock<?>) rp;
 	}
+	
+	public RuleMargin prepareRuleMargin(String area, List<Declaration> decl) {
+		
+		if ((decl == null || decl.isEmpty())) {
+			log.debug("Empty RuleMargin was ommited");
+			return null;
+		}
+		
+		Priority prio = ps.getAndIncrement();
+		RuleMargin rm = rf.createMargin(area, prio);
+		rm.replaceAll(decl);
+		
+		log.info("Create @" + area + " as " + prio + "th with:\n" + rm);
 
+		return rm;
+	}
+
 	public Priority markPriority() {
 		return ps.markAndIncrement();
 	}
Index: cz/vutbr/web/csskit/antlr/CSSTreeParser.g
===================================================================
--- cz/vutbr/web/csskit/antlr/CSSTreeParser.g
+++ cz/vutbr/web/csskit/antlr/CSSTreeParser.g
@@ -19,6 +19,7 @@
 import cz.vutbr.web.css.Declaration;
 import cz.vutbr.web.css.RuleBlock;
 import cz.vutbr.web.css.RuleFactory;
+import cz.vutbr.web.css.RuleMargin;
 import cz.vutbr.web.css.RuleMedia;
 import cz.vutbr.web.css.RulePage;
 import cz.vutbr.web.css.RuleSet;
@@ -174,6 +175,8 @@
 	$statement::insideAtstatement=true;
 	$atstatement::stm = $stmnt = null;
 	List<RuleSet> rules = null;
+	List<RuleMargin> margins = null;
+	String name = null;
 	String pseudo = null;
 	Priority mark = preparator.markPriority();
 }
@@ -194,8 +197,25 @@
 	    imports.pop();
 		log.info("Imported file was parsed, returing in nesting.");
 	  }
-	| ^(PAGE (i=IDENT{ pseudo=extractText(i);})? decl=declarations)
-		{ $stmnt = preparator.prepareRulePage(decl, pseudo); }
+	| ^(PAGE
+			(i=IDENT
+				{ name = extractText(i); }
+			)?
+			(^(PSEUDO i=IDENT)
+				{ pseudo = extractText(i); }
+			)?
+			decl=declarations
+			^(SET (m=margin {
+				if (m!=null) {
+					if (margins == null) margins = new ArrayList<RuleMargin>();
+					margins.add(m);
+					log.debug("Inserted margin rule #{} into @page", margins.size()+1);
+				}
+			})*)
+		)
+		{
+			$stmnt = preparator.prepareRulePage(decl, margins, name, pseudo);
+		}
 	| ^(MEDIA (mediaList=media)? 
 			(  rs=ruleset {
 					   if(rules==null) rules = new ArrayList<RuleSet>();				
@@ -214,7 +234,19 @@
 		   $stmnt = preparator.prepareRuleMedia(mark, rules, mediaList);
 	   }
 	;
-	
+
+margin returns [RuleMargin m]
+@init {
+    logEnter("margin");
+}
+@after {
+    logLeave("margin");
+}
+	: ^(area = MARGIN_AREA
+		decl=declarations)
+		{ $m = preparator.prepareRuleMargin(extractText(area).substring(1), decl); }
+	;
+
 media returns [List<String> affected] 
 @init {
    logEnter("media");
Index: cz/vutbr/web/csskit/antlr/CSS.g
===================================================================
--- cz/vutbr/web/csskit/antlr/CSS.g
+++ cz/vutbr/web/csskit/antlr/CSS.g
@@ -759,9 +759,7 @@
 	| IMPORT
 	| INVALID_IMPORT
 	| IMPORT_END
-	| PAGE S* (COLON IDENT S*)? 
-		LCURLY S* declarations 
-		RCURLY -> ^(PAGE IDENT? declarations)
+	| page
 	| MEDIA S* media? 
 		LCURLY S* (ruleset S*)* RCURLY -> ^(MEDIA media? ruleset*)	
 	| ATKEYWORD S* LCURLY any* RCURLY -> INVALID_STATEMENT
@@ -772,6 +770,22 @@
 	  		"INVALID_STATEMENT", follow, re);							
 	}
 
+page
+	: PAGE S* (( IDENT | IDENT page_pseudo | page_pseudo) S*) ?
+		LCURLY S*
+		(declaration | margin_rule)? (SEMICOLON S* (declaration | margin_rule)? )*
+		RCURLY
+		-> ^(PAGE IDENT? page_pseudo? ^(SET declaration*) ^(SET margin_rule*))
+	;
+
+page_pseudo
+	: pseudocolon^ IDENT
+	;
+
+margin_rule
+	: MARGIN_AREA S* LCURLY S* declarations RCURLY S* -> ^(MARGIN_AREA declarations)
+	;
+
 /** A ruleset in the inline style according to
     http://www.w3.org/TR/css-style-attr */
 inlineset
@@ -1174,7 +1188,26 @@
 PAGE
 	: '@page'
 	;
-	
+
+MARGIN_AREA
+	: '@top-left-corner'
+	| '@top-left'
+	| '@top-center'
+	| '@top-right'
+	| '@top-right-corner'
+	| '@bottom-left-corner'
+	| '@bottom-left'
+	| '@bottom-center'
+	| '@bottom-right'
+	| '@bottom-right-corner'
+	| '@left-top'
+	| '@left-middle'
+	| '@left-bottom'
+	| '@right-top'
+	| '@right-middle'
+	| '@right-bottom'
+	;
+
 /** Keyword beginning with '@' */
 ATKEYWORD
 	: '@' MINUS? IDENT_MACR
Index: cz/vutbr/web/css/RuleFactory.java
===================================================================
--- cz/vutbr/web/css/RuleFactory.java
+++ cz/vutbr/web/css/RuleFactory.java
@@ -61,6 +61,14 @@
 	 * @return New CSS page
 	 */
 	RulePage createPage(Priority priority);
+	
+	/**
+	 * Creates CSS margin rule
+	 * @param area Margin area
+	 * @param priority Priority mark
+	 * @return New CSS margin rule
+	 */
+	RuleMargin createMargin(String area, Priority priority);
 
 	/**
 	 * Creates CSS combined selector, collection of (simple) selectors
Index: cz/vutbr/web/css/RuleMargin.java
===================================================================
--- cz/vutbr/web/css/RuleMargin.java
+++ cz/vutbr/web/css/RuleMargin.java
@@ -0,0 +1,42 @@
+package cz.vutbr.web.css;
+
+/**
+ * Contains CSS rules associated with a specific area in the page margin. 
+ * 
+ * @author Bert Frees, 2012
+ */
+public interface RuleMargin extends RuleBlock<Declaration>, PrettyOutput {
+
+	public enum MarginArea {
+		
+		TOPLEFTCORNER("top-left-corner"),
+		TOPLEFT("top-left"),
+		TOPCENTER("top-center"),
+		TOPRIGHT("top-right"),
+		TOPRIGHTCORNER("top-right-corner"),
+		BOTTOMLEFTCORNER("bottom-left-corner"),
+		BOTTOMLEFT("bottom-left"),
+		BOTTOMCENTER("bottom-center"),
+		BOTTOMRIGHT("bottom-right"),
+		BOTTOMRIGHTCORNER("bottom-right-corner"),
+		LEFTTOP("left-top"),
+		LEFTMIDDLE("left-middle"),
+		LEFTBOTTOM("left-bottom"),
+		RIGHTTOP("right-top"),
+		RIGHTMIDDLE("right-middle"),
+		RIGHTBOTTOM("right-bottom");
+		
+		public final String value;
+		
+		private MarginArea(String value) {
+			this.value = value;
+		}
+	}
+
+	/**
+	 * Returns margin area
+	 * @return Margin area
+	 */
+	public MarginArea getMarginArea();	
+	
+}
Index: cz/vutbr/web/csskit/RuleMarginImpl.java
===================================================================
--- cz/vutbr/web/csskit/RuleMarginImpl.java
+++ cz/vutbr/web/csskit/RuleMarginImpl.java
@@ -0,0 +1,80 @@
+package cz.vutbr.web.csskit;
+
+import cz.vutbr.web.css.Declaration;
+import cz.vutbr.web.css.RuleMargin;
+import cz.vutbr.web.css.RuleMargin.MarginArea;
+import cz.vutbr.web.css.RuleSet;
+
+/**
+ * Implementation of RuleMargin
+ * 
+ * @author Bert Frees, 2012
+ */
+public class RuleMarginImpl extends AbstractRuleBlock<Declaration> implements RuleMargin {
+
+	private MarginArea marginArea;
+
+	protected RuleMarginImpl(String area, Priority priority) {
+		super(priority);
+		for (MarginArea a : MarginArea.values()) {
+			if (a.value.equals(area)) {
+				marginArea = a;
+				break; }}
+		if (marginArea == null)
+			throw new IllegalArgumentException("Illegal value for margin area: " + area);
+	}
+
+	public MarginArea getMarginArea() {
+		return marginArea;
+	}
+
+	@Override
+	public String toString() {
+		return this.toString(0);
+	}
+	
+	public String toString(int depth) {
+		
+		StringBuilder sb = new StringBuilder();
+		
+		sb = OutputUtil.appendTimes(sb, OutputUtil.DEPTH_DELIM, depth);
+		sb.append(OutputUtil.MARGIN_AREA_OPENING).append(marginArea.value);
+		
+		sb.append(OutputUtil.RULE_OPENING);
+		sb = OutputUtil.appendList(sb, list, OutputUtil.RULE_DELIM, depth + 1);
+		sb.append(OutputUtil.RULE_CLOSING);
+		
+		return sb.toString();
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#hashCode()
+	 */
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = super.hashCode();
+		result = prime * result + ((marginArea == null) ? 0 : marginArea.hashCode());
+		return result;
+	}
+
+	/* (non-Javadoc)
+	 * @see java.lang.Object#equals(java.lang.Object)
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (!super.equals(obj))
+			return false;
+		if (!(obj instanceof RuleMarginImpl))
+			return false;
+		RuleMarginImpl other = (RuleMarginImpl) obj;
+		if (marginArea == null) {
+			if (other.marginArea != null)
+				return false;
+		} else if (!marginArea.equals(other.marginArea))
+			return false;
+		return true;
+	}
+}
Index: cz/vutbr/web/css/RulePage.java
===================================================================
--- cz/vutbr/web/css/RulePage.java
+++ cz/vutbr/web/css/RulePage.java
@@ -2,22 +2,36 @@
 
 
 /**
- * Contains collection of CSS declarations specified for name of CSS pseudo-page.
+ * Contains collection of CSS declarations specified for a page rule.
  * 
  * @author kapy
  * @author Jan Svercl, VUT Brno, 2008
+ * @author Bert Frees, 2012
  */
-public interface RulePage extends RuleBlock<Declaration>, PrettyOutput {
+public interface RulePage extends RuleBlock<Rule<?>>, PrettyOutput {
 
 	/**
-	 * Gets name of CSS pseudo-page
-	 * @return Name of pseudo-page
+	 * Gets name of the page
+	 * @return Name of the page
 	 */
+    public String getName();
+    
+    /**
+     * Sets name of the page
+     * @param name New name of the page
+     * @return Modified instance
+     */
+    public RulePage setName(String name);
+
+	/**
+	 * Gets pseudo-class of the page
+	 * @return Pseudo-class of the page
+	 */
     public String getPseudo();
     
     /**
-     * Sets name of CSS pseudo-page
-     * @param pseudo New name of pseudo-page
+     * Sets pseudo-class of the page
+     * @param pseudo New pseudo-class of the page
      * @return Modified instance
      */
     public RulePage setPseudo(String pseudo);
